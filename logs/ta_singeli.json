[
  {
    "id": 89934,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-03-03T12:20:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, that’s the normal case. I was highlighting functions because they’re kind of different.</p>\n",
    "replyID": 89931,
    "replyName": "dzaima"
  },
  {
    "id": 89931,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-03-03T10:01:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That works. Would any of that apply to <code>def</code> args? i.e. a generic name for <code>{}</code>-args</p>\n",
    "replyID": 89905,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89905,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-03-03T01:44:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Still working on the BQN-based compiler. How about “generator” as a name for <code>{}</code> application? Sounds about as close to “generic” as it actually is, and I feel like it does a good job of suggesting that it actually runs code when you call it. A <code>f{}()</code> function is a “generated function”, and you’d probably call <code>f</code> a “function generator” in the somewhat rare case when you pass it around rather than give it parameters immediately.</p>\n"
  },
  {
    "id": 89601,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-28T17:12:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">added <code>def NAME=expr;</code> and labels/gotos, but not complete in-function <code>def</code>s as those behave differently</p>\n"
  },
  {
    "id": 89539,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T18:01:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I was thinking that <code>=</code> should be this weird define-or-assign thing for a while until I figured out <code>def</code> removes the ambiguity.</p>\n"
  },
  {
    "id": 89534,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:59:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, I didn’t notice that I was using <code>=</code> incorrectly, so I <em>did</em> mean the first but shouldn’t have.</p>\n",
    "replyID": 89533,
    "replyName": "dzaima"
  },
  {
    "id": 89533,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:57:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, so your “I was wondering why you did that” wasn’t \"it should’ve stayed <code>loop = newLabel{}</code>\", but rather “it should be something completely different”</p>\n",
    "replyID": 89523,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89529,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:57:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, <code>a = 2+2;</code> isn’t legal unless <code>a:</code> has already been applied.</p>\n",
    "replyID": 89522,
    "replyName": "dzaima"
  },
  {
    "id": 89523,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:56:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For the gotos I guess it should be <code>def loop = newLabel{}</code> and so on.</p>\n"
  },
  {
    "id": 89522,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:56:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so indeed the existence of <code>a:=5;</code> <em>completely</em> changes what <code>a = 2+2;</code> later on means?</p>\n",
    "replyID": 89521,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89521,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:55:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes. <code>i</code> is declared, so <code>+</code> should add its value to <code>1</code> (cast to <code>u64</code>), then <code>=</code> should assign that value.</p>\n",
    "replyID": 89519,
    "replyName": "dzaima"
  },
  {
    "id": 89519,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:54:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you have <code>i = i+1;</code> in your <code>for_each</code> definition</p>\n",
    "replyID": 89518,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89518,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:53:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I say no. You can’t <code>def</code> the same thing twice in one scope.</p>\n",
    "replyID": 89517,
    "replyName": "dzaima"
  },
  {
    "id": 89517,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:53:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but mutating assignment is still allowed in <code>def</code>s?</p>\n",
    "replyID": 89514,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89516,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:52:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So <code>a = 2+2</code> requires <code>a</code> to be declared and gives it the value <code>4</code>, which is converted over from a constant to the appropriate type.</p>\n"
  },
  {
    "id": 89514,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:51:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Compile-time definitions should use <code>def</code>, which doesn’t allow mutation, so I think this is no longer an issue. In an ordinary statement <code>=</code> always means runtime assignment.</p>\n",
    "replyID": 89510,
    "replyName": "dzaima"
  },
  {
    "id": 89510,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:50:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but <code>a = b;</code> still is (and should be) mutating assignment regardless of whether <code>b</code> is a compile-time value or not</p>\n",
    "replyID": 89509,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89509,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:49:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">How so? I’m thinking <code>newLabel</code> just requests a unique label ID. The function has a table connecting label IDs to instruction IDs, and populates it when <code>label</code> is called, all at compile time.</p>\n",
    "replyID": 89505,
    "replyName": "dzaima"
  },
  {
    "id": 89506,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:48:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(what would <code>a:= 5; a = 2+2;</code> do? does the first <code>a:= 5;</code> completely change the behavior of all further <code>a =</code>s?)</p>\n"
  },
  {
    "id": 89505,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:46:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">because otherwise it’s mutating assignment, which is definitely not allowed on static values</p>\n",
    "replyID": 89504,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89504,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T17:45:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The <code>:</code> was your edit, not mine. I was wondering why you did that.</p>\n",
    "replyID": 89503,
    "replyName": "dzaima"
  },
  {
    "id": 89503,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T17:40:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>loop:= newLabel{};</code> argh now i have to make variables able to hold compile-time-static values too</p>\n"
  },
  {
    "id": 89489,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T16:37:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">currently I’m just going with 2 separate arguments to <code>exec</code> - the pointer offset, and passed number. But a non-offsetting <code>exec</code> also makes sense</p>\n",
    "replyID": 89479,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89483,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T16:34:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess we should be able to do dead code elimination pretty easily in the IR, so it’s not really a problem if the index is computed but not used.</p>\n"
  },
  {
    "id": 89479,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-27T16:32:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">True. Also looks like the vector load/store operations don’t have indexed addressing modes, so it’s kind of pointless to use an index for the control for them. Maybe it would make the most sense to have a flag for <code>exec</code> to indicate whether the given index offsets pointers (as opposed to just being used as a value), or possibly a second <code>exec</code> function where it doesn’t?</p>\n",
    "replyID": 89451,
    "replyName": "dzaima"
  },
  {
    "id": 89451,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T15:40:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">in your loop definitions, e.g. <code>for_scalar_tail</code> would end up assigning weird numbers to the <code>i</code> variable in the loop - the iterated variable and pointer offset should be different parameters</p>\n"
  },
  {
    "id": 89450,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-27T15:27:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://tio.run/##lVTbattAEH3XV0wTSmRHbSRZlm916VOgryVvxhhdVqmIvAqyrAaMvz09s6srOCEBa9mZOXtm5syuo29RFsjH1@tURtkxFj8OZZzK8vvfn0bfFeZ5xr5DGZRpRKnMUimoytOYDukuOIgynZOJg/NdSWMKLDrWBkmLmu3TiE4UbOR2/bSi83tkjs9kjr8rWzLfA4UmY/8nyCYuk03cy2Ts/wSZ75n1@UtkavsuWaMF8z1elk3zMUkhymMhFddFJiVEw/SmZh9hUio0TG8K9hEmhWyY3lTrAlN73172e@CKVPKN6xK0NcZOUx5VdjfDygGpQZ3t0hoAukVkBX@drnJXxrmlbWYb213LPVIYTt9wez1UE52vc3irfvrpwPIH1oytykOBZpN3ZGfZaACaq/o3lbdV6Cmb8wFiwS6nRfhsLgYIx2af20Jm6oQ9xDhwal2rqQWaUQ@qpNNVrHVLOuFad6Sp19wQRFVqBnG8G1wh6NmXs6/mUMxmRHoeOAY0QIjhfgz/onK@GzhM@yCVZjt4XKbJFnWfCGMjTIsm57pXCuvQDOP18U3tNhTVocXCosUc30yFmk4CK7Qia6Jkeca9LBPz6mtM6ndl4bS9taKNw4u7Ber8ejc2ojwWSyMWCSV5sUvS4lDS6WCRgMJBgU2Y5dHTmdOCVryIyLQHoZGSNDk9nM1gOX6AV62FWrPl0fdGtNQXWHP8ahOhYgoBpbwSBaWUFPmebCpzyrRUeA04FNyG3NIZeW7qXm/gTk7YQADD@P1naYTiMZX3kmKH4CZXrfxd026HUwy2@IAhxT9@dGKflgqQP/PbszFzA4NFyBAyvpdGR2nr8j0aM75b0BvodR3GUbKIeCzwNsaUEzSG3zdmytgf@TnSF3vJlipsTrEogGB@LsrToCkiGrDoA5wW4COiAXhLPYTbImYcqiEORUGWKQQEcxW/38Ec3NlDVwLCncNRDr9zuMoxa1QTL895Ub4vWj1FjG589/of\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">yay</a></p>\n"
  },
  {
    "id": 89443,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T22:34:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(fwiw the def branch also has added that <code>=</code>)</p>\n"
  },
  {
    "id": 89442,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T22:30:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, BQN-based parser is now working on test.singeli after I add an <code>=</code> to the type. The plan now is to make each node into an object with a few operations that might traverse children; currently the only one is printing.</p>\n"
  },
  {
    "id": 89434,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T21:04:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I haven’t had editing not work for me once</p>\n",
    "replyID": 89433,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89433,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T20:41:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oops, I meant <em>unlikely</em> to change (editing still doesn’t work for most posts?), that is, shouldn’t require anyone to understand it because it doesn’t need maintainence.</p>\n"
  },
  {
    "id": 89432,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T20:36:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Note that in singeli.bqn, <code>Tokenize</code> is mostly taken from BQN’s implementation and is unreadable but likely to change, while the parser (starting at the definition of <code>Name</code>) is ordinary recursive descent stuff with a few utilities. Shouldn’t be too hard to work with.</p>\n"
  },
  {
    "id": 89431,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T20:29:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s assuming that my implementation actually proves useful.</p>\n"
  },
  {
    "id": 89430,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T20:29:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">to generate/compile, maybe, but it’s obviously not needed for the resulting .so/library/whatever</p>\n",
    "replyID": 89428,
    "replyName": "ngn"
  },
  {
    "id": 89429,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T20:29:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m writing in BQN because it’s easiest for me, but I expect the final implementation (not including the parts in Singeli) to be under 500 not-dense lines and easy to port to Javascript or something.</p>\n",
    "replyID": 89428,
    "replyName": "ngn"
  },
  {
    "id": 89428,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-26T20:27:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">will singeli require bqn?</p>\n"
  },
  {
    "id": 89427,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-26T20:22:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m so far behind with everything here… 😦</p>\n"
  },
  {
    "id": 89398,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T15:55:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Which does mean you can’t call the pointers with different indices, but of course there’s going to be <em>some</em> point where you have to stop relying on built-in support and just write it yourself. You can offset pointers manually to pass to a block; it just might not make efficient use of load instructions.</p>\n"
  },
  {
    "id": 89397,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T15:53:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes.</p>\n",
    "replyID": 89396,
    "replyName": "dzaima"
  },
  {
    "id": 89396,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T15:51:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>exec</code> takes 3 args: index location (both as what to assign for the block and what offset to use in <code>vars</code>); <code>vars</code> as a regular tuple of pointers; <code>block</code> as a magic thing that stores its code, name of index variable, and names of expected variables</p>\n"
  },
  {
    "id": 89385,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T13:59:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ve also thought about allowing marking implicit <code>{}</code>-args somehow, inferred from other <code>{}</code>- or <code>()</code>-args; not quite sure how that’d work, but it’s obviously very useful</p>\n"
  },
  {
    "id": 89384,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-26T12:25:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">got constant-evaluted <code>def</code>s <a href=\"https://dzaima.github.io/paste/#0bZBNbsIwEIX3PsWgLtIKFvEYZRELlpyAPaL4p5Gog2gUV4py9844CbUQluJo5r332R5jHRjY7QHXqIWh6tKGn26wIzetFsK9f0ANjUJuTMuAhsIVsAOnhc/1KWxG0j3rngAMjY3pvoZjXTeySmRZ6SdBYRIUXSMOx5GoVM3yqEURZcXEODCCa4VzTUk6htan9U04BDAy3QfTzt8bnE5nY9i6YbsINkKPYL@bLhnaG6yhL6GX4m47koQN5hAyZJl8JaHcMOdLuJyv19SnExFWyK@YfxOnXDj299beu3@My9D4QHtCc261TYin7OLzWVY9stNgprisXuUXL00yI2xzAs8mERS@Iixemv0f#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">working</a></p>\n"
  },
  {
    "id": 89379,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T03:49:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Two significant changes to the syntax: I’m requiring <code>fn(…) : type = {…</code> to have an <code>=</code> since <code>typeGen{n}</code> could be a valid type, and I’ve made <code>:</code> a standalone character to avoid clumping it with <code>=</code> in <code>:=</code>, so <code>::</code> can’t be used for parameter specification. I put in <code>==</code> instead but there are probably other options or approaches.</p>\n"
  },
  {
    "id": 89378,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T03:44:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The infrastructure is in place for decent parse error reporting (parse stack with positions and expected/received), but a few bits aren’t hooked up making the output useless currently.</p>\n"
  },
  {
    "id": 89377,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T03:42:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think most of the remaining problems are that the AST definitions in <code>nodes</code> don’t quite match up with what’s generated, so <code>RunNode</code> fails to print the AST.</p>\n"
  },
  {
    "id": 89376,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-26T03:41:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Got most of a BQN recursive-descent parser done today. Expressions are just lists of operations, names with parameters and arguments, etc. I’m thinking I can add some top-level statements to define operators and then finish parsing expressions in a second pass.</p>\n"
  },
  {
    "id": 89306,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:59:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://github.com/dzaima/singeli/tree/def\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">def branch</a> with the defs</p>\n"
  },
  {
    "id": 89305,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T12:56:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess that strategy even allows you to alias <code>=</code>, so you could use APL-style <code>←</code> for assignment assuming you can differentiate it from other meanings.</p>\n"
  },
  {
    "id": 89303,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T12:52:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ve been thinking about a BQN version (not Co-dfns style) mainly for that reason. I think it would have an initial pass (maybe combined with tokenization) to resolve includes and operator definitions, and then use something like a Pratt parser to handle the precedence table.</p>\n",
    "replyID": 89298,
    "replyName": "dzaima"
  },
  {
    "id": 89302,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:52:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">this also means that e.g. <code>f(1+1)</code> doesn’t calculate <code>1+1</code> statically, by design</p>\n"
  },
  {
    "id": 89301,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:50:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>processDef</code> handles <code>1+x</code> by resolving the static <code>x</code> and static <code>x</code> only, and statically computes the result.</p>\n"
  },
  {
    "id": 89300,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:49:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">whoops, meant <code>SiExpr::process</code> vs <code>SiExpr::processDef</code></p>\n",
    "replyID": 89299,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89299,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T12:48:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Doesn’t <code>processDef</code> have to handle constants in order to resolve things like <code>1+x</code>? Seems like you could just use that.</p>\n",
    "replyID": 89296,
    "replyName": "dzaima"
  },
  {
    "id": 89298,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:46:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(as-is, I must statically know whether to parse an expression as constant or dynamic, by design. Of course this can probably be merged like types and exprs were, but at that point it’d be better for everyone to just write the whole language from scratch (which you’re free to do). my model just isn’t made for custom-definable syntax)</p>\n"
  },
  {
    "id": 89297,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:43:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess i could move the <code>:</code> to the <code>def</code> syntax actually, but that’s only marginally important</p>\n"
  },
  {
    "id": 89296,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:42:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">reason being my <code>SiExpr::process</code> and <code>SiExpr::processConst</code> are completely separate and shall stay that way</p>\n"
  },
  {
    "id": 89295,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:42:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, the calling syntax needs it (so <code>type{:a}</code>)</p>\n",
    "replyID": 89294,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89294,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T12:39:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So like <code>def isType{:x, T}</code>? I still don’t get why you’d need to know whether it’s static or dynamic before evaluation. Just check when it’s called.</p>\n",
    "replyID": 89292,
    "replyName": "dzaima"
  },
  {
    "id": 89293,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:34:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(“a whole ton of technical debt” as in I have, in the hour or two of making this, completely lost any understanding of how anything of my code does. the things you made me do.​.)</p>\n"
  },
  {
    "id": 89292,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:25:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with prepending of <code>:</code> for passing dynamic values in <code>{}</code>-args, and a whole ton of technical debt, I’ve managed to make simple <code>def</code> examples work</p>\n"
  },
  {
    "id": 89291,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T12:08:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, i completely forgot that now that passed <code>{}</code>-args can be either dynamic or static, I have to somehow parse them as whichever it is, which is definitely not a possible thing.</p>\n"
  },
  {
    "id": 89290,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T10:40:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n"
  },
  {
    "id": 89289,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T10:05:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that said, just adding newlines as an alternative to <code>;</code> is just as simple as just replacing every <code>';'</code> with <code>(';'|'\\n')</code> and spamming <code>|'\\n'</code> everywhere else you want to accept ignored newlines (and removing it from the <code>WS</code> definition)</p>\n"
  },
  {
    "id": 89288,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-25T10:00:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that complicates the logic about the implicit return statement. Void functions could quietly actually return their last expressions value (and might require backtracking (ANTLR handles that for us now, but a custom parser wouldn’t be too happy))</p>\n",
    "replyID": 89285,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89285,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T01:22:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Although for syntax I would really appreciate it if we made newlines and semicolons interchangeable.</p>\n"
  },
  {
    "id": 89284,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-25T01:22:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added some possible for loop definitions in tests/loop.singeli. Change whatever you want about them if it’s convenient. I just want these kinds of things to be possible.</p>\n"
  },
  {
    "id": 89272,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-24T17:58:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">new features in c99: “intermingled declarations and code: variable declaration is no longer restricted to file scope or the start of a compound statement (block)” <a href=\"https://en.wikipedia.org/wiki/C99#Design\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">-W</a></p>\n"
  },
  {
    "id": 89271,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-24T17:54:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, i’ve just tested with <code>gcc -pedantic -std=c99</code></p>\n"
  },
  {
    "id": 89264,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T17:13:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Looks like it was added to the standard for C99.</p>\n",
    "replyID": 89263,
    "replyName": "ngn"
  },
  {
    "id": 89263,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-24T16:47:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i think in c (at least the early standards) you’re supposed to always do that, but practically all compilers are tolerant to declaring vars mid-function</p>\n",
    "replyID": 89254,
    "replyName": "dzaima"
  },
  {
    "id": 89254,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T16:07:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">declaring everything in the beginning works too</p>\n"
  },
  {
    "id": 89253,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T16:07:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">doesn’t seem to. (though <code>-Wall</code> <a href=\"https://tio.run/##S9ZNzknMS///PzOvRCE3MTNPQ1OhmktBIT2/JF8hJzEpNccayANJJivYKhiAOGBRKxCrKLWktChPIdmaq5br//9/yWk5ienF/3XDE3NyAA\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">gives</a> a correct warning)</p>\n",
    "replyID": 89252,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89252,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T16:05:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I thought C did that too actually (maybe with -Wall?). I put all the declarations up front if I have a lot of jumps.</p>\n",
    "replyID": 89249,
    "replyName": "dzaima"
  },
  {
    "id": 89250,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T16:04:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <a href=\"https://tio.run/##lZVhb6JAEIa/8ysmvVwKlbvuAtJW9H5FvzXGgFi7KYJB5C5p@O3ezC4Law88m1Qcdt59ZvYdpOv9/sc6i/Pt6ZvI19kx3cwPVSry6ufbL8tcSooio7VDFVdiDSLPRL6BuhApHMQqPmwq8Qg2bnxcVXAHsQvH9gZyF3T47sAHxC/5cvEeQXMJxkOC8XBVdbAwQISC0foXYL5HMN8bhtH6F2BhYLf7h2AyvAjTXhBvO2yb4hGk3FTHMpesQZI0QpNGPbuGJF3QpFHDriFJpSaNujVA6p63P7sd6kqR0xOnC@ghpLzvrWYGsub9OGsP@RaYTwBpSYKpCDOqdmQ1Vn@CzoTUG62huH0dWJiuqSJGAVSM1fDtjsKMzocq1AwmmBnFHg3b08Du2x3qvV@4Bk0/fImd/gcrhRo5v4TsJsnOXe5vuHnjmcX8z2cIsKDdteawLHMsqrwtqgIybCJjs8j0c6omlrbDCpyzbNhn@b/Zhzbr2/UUs6HMqmeS2qwD/DzIxb7Bp3ZPYFPaaJVjq1Irz1A/Yatctqqc5KzdOJUb8eSylVfAzpjTno9JX6WhcZquzn64eDzTUdPQcz/1lNRIcBuqUUQVoTnd3xP647mx49ndswuJvJbyms2OYeDATI30w0IttgizBTBMROr@95vINviSm2eOlqBpm4qQJQ7aha26iV3hTNo4wdiJtFqgFWLCe2ZDX/JCn9v27Lcoo14xbCLr7P@XKOhdgseGXSxyu/uN4cvHx5dP/MKWC@AUcAw8CjwM/Hb8kEhZQjKfUYAyTwYo40zLSpJhrIcRu4lbump0e3yhVa/2zfcU5N8Nuog8t0QWXrwlqprT6S8\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the current example</a> just doesn’t work at all in C++</p>\n"
  },
  {
    "id": 89249,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T16:03:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, C++ complains about any goto around a variable definition</p>\n"
  },
  {
    "id": 89248,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T16:02:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, C++ is the one <a href=\"https://tio.run/##Sy4o0E3OScxL//8/M69EITcxM09DU6GaS0EhPb8kXyEnMSk1xxrIA0kmK9gqGIA4YFErEKsotaS0KE8h2Zqr9v9/AA\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">that complains</a>. C alone <a href=\"https://tio.run/##S9ZNzknMS///PzOvRCE3MTNPQ1OhmktBIT2/JF8hJzEpNccayANJJivYKhiAOGBRKxCrKLWktChPIdmaq/b/fwA\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">allows that</a> apparently</p>\n"
  },
  {
    "id": 89246,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T16:00:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I mean restart the loop. Put an <code>if(0){}</code> or equivalent goto before the loop and jump to that.</p>\n",
    "replyID": 89245,
    "replyName": "dzaima"
  },
  {
    "id": 89245,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T15:59:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">“and go back in the loop” might be problematic. I don’t think C would allow it</p>\n",
    "replyID": 89244,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89244,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T15:58:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I like it too but I think we do want something goto-based to give full control over the output. If you’re writing code complicated enough that you want to break out of a specific loop instead of just returning, there’s a fair chance you also want to do tricky things like jump to another section that will clean things up and go back into the loop, or have multiple breaks that go to different places.</p>\n",
    "replyID": 89238,
    "replyName": "dzaima"
  },
  {
    "id": 89238,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T15:26:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(personally i have quite enjoyed java’s way of allowing labeling arbitrary blocks, and allowing <code>break label;</code> to go to right after it; might be unsuited for this though)</p>\n"
  },
  {
    "id": 89237,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T15:22:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, that’s how the current IR works</p>\n",
    "replyID": 89235,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89235,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T15:10:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We might want to think about how to break out of loops. Returns will work, but gotos have some issues. A significant problem with the <code>beginGoto</code> and <code>endGoto</code> functions is that you can’t easily have multiple gotos jumping to the same place. Maybe it would be better to have one function to generate a label, then two others to anchor it and (conditionally) jump to it. I guess we could also use symbols for labels, but they’d have to be function-scoped so it would be easy for them to conflict.</p>\n"
  },
  {
    "id": 89233,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:27:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And maybe I should eat breakfast. See you.</p>\n",
    "replyID": 89232,
    "replyName": "dzaima"
  },
  {
    "id": 89232,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:26:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">have to do something else for half an hour</p>\n"
  },
  {
    "id": 89231,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:25:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess <code>@for (vars over i to …) block;</code> would be <code>def @…</code>-specific syntax for magically transferring things to the parent context</p>\n"
  },
  {
    "id": 89229,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:25:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So the general form of definition and block-value-calling is <code>@for (vars from a to b) block</code>. I’m fine with changing that to <code>for{vars,a,b,block}</code>. For loop definitions should be only a small portion of the source so they don’t need to look slick.</p>\n"
  },
  {
    "id": 89227,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:22:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also <code>@for(vars …)</code> is already strange. <code>@for</code> usually rebinds variable names, but can’t here? it can only rebind the <code>vars</code> name</p>\n"
  },
  {
    "id": 89226,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:21:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That is quite true.</p>\n",
    "replyID": 89224,
    "replyName": "dzaima"
  },
  {
    "id": 89225,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:21:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, it should know the difference between a block literal and a block variable. I don’t know whether that’s magic.</p>\n",
    "replyID": 89222,
    "replyName": "dzaima"
  },
  {
    "id": 89224,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:20:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">actually yeah the <code>i</code> in <code>def @for_group{n} (vars over i to b) block = …</code> does like literally nothing</p>\n"
  },
  {
    "id": 89222,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:19:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so you’d want <code>@for(vars over i to len/n) block</code> to magically infer that <code>block</code> should be called on the new <code>vars</code> and <code>i</code>?</p>\n"
  },
  {
    "id": 89221,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:17:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, from the outside it shouldn’t look like the block cares about names at all. You just pass it an index and pointers and it runs. When the assignment happens is just part of how a block is implemented, which I guess is what you’re describing.</p>\n",
    "replyID": 89219,
    "replyName": "dzaima"
  },
  {
    "id": 89220,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:16:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, you also need to pass the <code>i</code> variable in the tuple</p>\n"
  },
  {
    "id": 89219,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:13:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m thinking the <code>block</code> argument should itself also contain the names it expects to be assigned, and <code>eval(block, tuple);</code> just assigns those. So <code>vars</code> in the <code>def</code> is a regular tuple and you never see the funkiness that is name rebinding</p>\n"
  },
  {
    "id": 89218,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:12:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Pretty often you’ll want to call another <code>for</code> loop though (for example doing one part with vectors and one with scalars).</p>\n",
    "replyID": 89217,
    "replyName": "dzaima"
  },
  {
    "id": 89217,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:10:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the block part of the <code>for</code> statement should always be a proper statement. There’s <code>eval</code> for using the weird <code>block</code> argument to <code>def</code>s</p>\n",
    "replyID": 89215,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89215,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:08:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, because the block will use those names. So the names are used if the block is a literal block with <code>{}</code>, but not if it’s the value of a block like <code>block</code>.</p>\n",
    "replyID": 89213,
    "replyName": "dzaima"
  },
  {
    "id": 89214,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:06:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">parsing a <code>NAME</code> as an expression is easy. The other way around allows funky things</p>\n"
  },
  {
    "id": 89213,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:06:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">we want both really</p>\n",
    "replyID": 89211,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89212,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:06:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So it is <code>expr</code>. But the index variable is still a name?</p>\n"
  },
  {
    "id": 89211,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:05:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Wait, I got the <code>NAME</code> thing wrong. We don’t want a list of names, we want a list/tuple of pointer values.</p>\n"
  },
  {
    "id": 89210,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:05:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>(NAME(','NAME)*)</code> matches a single name just like regex</p>\n",
    "replyID": 89208,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89209,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T14:04:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>vars</code> would be that tuple of values, right? We need to pass (or store somewhere) which variables the tuples values need to be assigned to too</p>\n",
    "replyID": 89207,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89208,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:04:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And I guess the thing before <code>'over'</code> has to admit a single name too.</p>\n"
  },
  {
    "id": 89207,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T14:03:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think probably <code>@for (vars over i at j) block</code> makes the most sense.</p>\n",
    "replyID": 89206,
    "replyName": "dzaima"
  },
  {
    "id": 89206,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:58:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so that’s that; now to figure out how <code>eval</code> or whatever works</p>\n"
  },
  {
    "id": 89204,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:57:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s right.</p>\n",
    "replyID": 89202,
    "replyName": "dzaima"
  },
  {
    "id": 89203,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:55:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>'@'(callable | 'for') '(' ((NAME(','NAME)*) 'over')? NAME (('from' expr)? 'to' expr)? ')' stt</code></p>\n"
  },
  {
    "id": 89202,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:55:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">actually <code>(expr(','expr)*)</code> has to be <code>(NAME(','NAME)*)</code> cause we need to assign to the names specified (same for <code>'over'</code> arg)</p>\n"
  },
  {
    "id": 89199,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:52:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>'@'(callable | 'for') '(' ((expr(','expr)*) 'over')? (expr ('from' expr)? 'to')? expr ')' stt</code></p>\n"
  },
  {
    "id": 89198,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:50:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d say the built-in <code>for</code> should also be prefixed with <code>@</code>, but it doesn’t matter too much. <code>(expr(','expr)*) 'over'</code> should be optional, and you’re missing the index variable after <code>'over'</code>.</p>\n",
    "replyID": 89192,
    "replyName": "dzaima"
  },
  {
    "id": 89194,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:48:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">or <code>('@' callable | 'for') …</code> i guess</p>\n"
  },
  {
    "id": 89192,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:45:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>('@'NAME | 'for') '(' (expr(','expr)*) 'over' ('from' expr)? 'to' expr ')' stt</code></p>\n"
  },
  {
    "id": 89190,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:43:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">When the alternative is hardcoding every kind of for loop you could possibly want into the interpreter, I think it looks pretty good.</p>\n"
  },
  {
    "id": 89189,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:42:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can pass any extra parameters you want with <code>{}</code> args, it’s just that there’s special support for writing for loops specifically. It’s also good that the language can fill in values like a start value of 0 if the user doesn’t specify.</p>\n",
    "replyID": 89186,
    "replyName": "dzaima"
  },
  {
    "id": 89186,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:37:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, that’s a <em>lot</em> more reasonable. :​|</p>\n",
    "replyID": 89185,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89185,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-24T13:36:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m not saying <code>def</code> should define the syntax. I think over/from/to should still be hardcoded into the parser. This happens to work for <code>if</code>-style structures as well because they only have one value and don’t need any keywords.</p>\n",
    "replyID": 89184,
    "replyName": "dzaima"
  },
  {
    "id": 89184,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:34:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0bY9BCsIwEEX3OcVftiq0qLioFLyJpG3SBk1HkrQKpeBpPJgnMcGCVlzNW8y8x1RC4iDJHGtD3QWRJS1ArhEGlZCqVU5Ri6tyDay6gZu606J1NkZxpvKEHAMDnvcHG1n14@q5saDeqxSkIQ0ORyj@nTIZ8WyhNusVzqL1tNvO14Imy9O9x6Ca0NEEn2zEZ8k0JL0yxoAkQeFf@3rMQnNXNl7wLvhYGEvb6YjHQTxObTa@AA#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this is fun</a>; if you allow only one definition it’s <em>technically</em> fine i guess, but there should really be <em>some</em> separation between what’s a keyword and what’s not</p>\n"
  },
  {
    "id": 89182,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-24T13:24:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if I’m understanding it right, having <code>over</code> defined would still mean that the definition could see the given <code>over</code> value as an argument though, right?</p>\n",
    "replyID": 89097,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89108,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T20:54:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that separate <code>{} =</code> could be called a … macro :​P</p>\n",
    "replyID": 89081,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89107,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T20:14:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>callable</code> for what?</p>\n",
    "replyID": 89106,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89106,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T20:08:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, being permissive would have some problems. All you really need is <code>callable</code>. There’s no reason to have operators return for loop functions.</p>\n",
    "replyID": 89105,
    "replyName": "dzaima"
  },
  {
    "id": 89105,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T20:02:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and monadic &amp; dyadic operators, pointer types, vector types (<code>a [2]b</code> could be <code>a[2] b</code> (<code>x[n]</code> isn’t in the grammar currently though i guess))</p>\n",
    "replyID": 89103,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89104,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T20:00:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The definition and invocation are the same. Any time your grammar would use <code>'for'</code>, replace it with <code>'@' condexpr</code>.</p>\n"
  },
  {
    "id": 89103,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:59:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think the only thing not allowed would be a function call, since you can’t tell the difference between the functions arguments and the condition. But it’s easy to split that off as part of <code>expr</code>, right?</p>\n",
    "replyID": 89102,
    "replyName": "dzaima"
  },
  {
    "id": 89102,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:57:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’d have to be <code>NAME '(' (NAME | INT | TINT | HEX | THEX | '(' expr ')' | everything else that's a single token )* ')'</code> or something</p>\n"
  },
  {
    "id": 89101,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:56:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m talking about the invocation, not the definition</p>\n",
    "replyID": 89099,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89100,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:56:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Possibly something more restricted than <code>expr</code> but that’s the idea.</p>\n"
  },
  {
    "id": 89099,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:55:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">My grammar is exactly the same as yours except instead of <code>'for' stuff</code> it has <code>'@' expr stuff</code>.</p>\n",
    "replyID": 89098,
    "replyName": "dzaima"
  },
  {
    "id": 89098,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:53:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">in my case the keywords would be hard-coded in the ANTLR grammar, but here I have to have ANTLR statically build an AST with no knowledge about what’s supposed to be a keyword in that definition or not</p>\n",
    "replyID": 89097,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89097,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:51:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Isn’t it the same as the for loop syntax you were proposing? No, having <code>over</code> be defined shouldn’t break it. If <code>a over i</code> was a valid expression on its own then you’d have to write <code>@for ((a over i) from 0 to len)</code> in order to use that value instead of having <code>over</code> be a keyword, but I don’t think that is the case.</p>\n",
    "replyID": 89096,
    "replyName": "dzaima"
  },
  {
    "id": 89096,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:48:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(also that is gonna be a parsing nightmare)</p>\n"
  },
  {
    "id": 89095,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:46:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">would <code>over:=5; for (a over i from 0 to len) …</code> break it?</p>\n"
  },
  {
    "id": 89094,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:46:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>@</code> is a special part of the syntax that does that. Basically like <code>for</code> now, except that it parses an extra value first.</p>\n",
    "replyID": 89093,
    "replyName": "dzaima"
  },
  {
    "id": 89093,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:45:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what says that <code>over</code> is a keyword but <code>i</code> is not? e.g. in <code>for (a over i from 0 to len)</code></p>\n",
    "replyID": 89090,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89092,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:44:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So it’s definitely still specialized for <code>for</code>-type loops, it’s just that only the syntax and not the functionality is specialized.</p>\n"
  },
  {
    "id": 89091,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:44:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Turning multiple arguments into a <code>vars</code> tuple is also part of matching up arguments.</p>\n"
  },
  {
    "id": 89090,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:43:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The <code>@</code> would signal that <code>over</code>, <code>from</code>, and <code>to</code> are keywords in that context, like it does when you call it.</p>\n",
    "replyID": 89088,
    "replyName": "dzaima"
  },
  {
    "id": 89089,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:42:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and that <code>vars</code> is a tuple)</p>\n"
  },
  {
    "id": 89088,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:41:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you’re missing some distinction of what of <code>vars over i from a to b</code> is an arg vs token</p>\n",
    "replyID": 89087,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89087,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:40:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Not very relatedly, a refinement to my for-loop definition idea is that you could write control structures starting with a symbol, for instance <code>@for (i to l) {…}</code>. Define it with <code>def @for (vars over i from a to b) block =</code> and the language will match things up for you. This also works for <code>def @if (cond) block =</code> but not really for a while loop, since everything in the parens is passed by value and a while condition has to be reevaluated.</p>\n"
  },
  {
    "id": 89086,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:34:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(but empty <code>{}</code> is invalid syntax because i wanted the fn def to be 3 chars shorter :​) )</p>\n"
  },
  {
    "id": 89085,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:34:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>f(x)=&gt;…</code> ≈ <code>f{}(x)=&gt;…</code> as far as the impl is concerned</p>\n",
    "replyID": 89084,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89084,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:32:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, except plain <code>f(x)=&gt;…</code>.</p>\n",
    "replyID": 89083,
    "replyName": "dzaima"
  },
  {
    "id": 89083,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:31:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s precisely what I’d do (and you can’t have <code>()=&gt;…</code> anywhere not after <code>{}</code> as that’d present the closure issues, so they really are just separate things)</p>\n",
    "replyID": 89081,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89082,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:31:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Also thinking that other kinds of definitions should use <code>def</code> at the beginning, so that purely compile-time definitions like <code>def TWO = 2</code> or <code>def Vec{x} = [8]x</code> are easy to distinguish from setting things at runtime.</p>\n"
  },
  {
    "id": 89081,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:28:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It does seem like making a <code>()</code> function is different from other things you might use <code>{}</code> for. It’s the only case where you want to save the result as well. Maybe it’s better to think of <code>{}() =&gt;</code> as a different construct than <code>{} =</code>?</p>\n"
  },
  {
    "id": 89080,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T19:18:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That case shouldn’t be allowed, because <code>a</code> isn’t local to the <code>()</code> function. The rule I’d use is that dynamic values can only be accessed in the context (function) that created them.</p>\n",
    "replyID": 89077,
    "replyName": "dzaima"
  },
  {
    "id": 89079,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:16:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">↑ seems a lot more logical. In the case of <code>{}()</code>, dynamic <code>{}</code>-arguments are just pointless and stupid and can always be replaced with <code>()</code>-args. In non-<code>{}()</code> cases, dynamic <code>{}</code>-args is the only way to do anything actually useful</p>\n"
  },
  {
    "id": 89078,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:06:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(or maybe just not allow a dynamic argument in that case and allow dynamic arguments only for non-<code>{}()</code> cases)</p>\n"
  },
  {
    "id": 89077,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T19:02:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also, to allow a <code>f{a}() =&gt; a;</code> definition with <code>a</code> being a dynamic value, you’d have to move <code>a</code> to a function argument in <code>beginFn</code> which is a thing that no other <code>{}</code>-arg requires. So it’s not as simple as just having <code>ProcRes</code> be a <code>Def</code></p>\n"
  },
  {
    "id": 89076,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T18:30:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>ProcRes</code> is literally the “constant variable handle” I was talking about. But it still needs to be wrapped in a <code>Def</code> (i guess it could be a subtype of <code>Def</code> itself, but eh)</p>\n",
    "replyID": 89075,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89075,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T18:26:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think you need to do any sort of conversion. Just allow the arguments to a <code>{}</code> function to be <code>ProcRes</code> instead of <code>Const</code>. Fairly sure this will simplify the overall implementation.</p>\n",
    "replyID": 89072,
    "replyName": "dzaima"
  },
  {
    "id": 89074,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:27:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but currently I have something else i have to do for maybe an hour</p>\n"
  },
  {
    "id": 89073,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:26:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">temporary limitation 3: “a <code>{}</code>-definition must be followed by a <code>()</code>-function definition” would get in the way of that, but that’s something I’m not reluctant to change</p>\n"
  },
  {
    "id": 89072,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:25:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess one could discard limitation 1 by adding a way to convert a dynamic variable to a constant variable handle, and adding a way to convert it back to a value if one wanted to do that</p>\n"
  },
  {
    "id": 89071,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:19:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with an intention of implementing custom control structures in the language itself, that’s understandable. But I didn’t and don’t have such intentions and can as such enjoy the benefits of having <code>{}</code>-args be easier to implement and reason about, at the cost of requiring control structures to be hard-coded</p>\n",
    "replyID": 89070,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89070,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T17:16:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, sorry for the non-sequitur. I don’t have anything else to say about closures right now except that I still think limitation 1 is silly.</p>\n",
    "replyID": 89069,
    "replyName": "dzaima"
  },
  {
    "id": 89069,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:14:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, you weren’t actually saying anything about a solution to the closure problem. Cause that still exists with a block evaluator function</p>\n"
  },
  {
    "id": 89068,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T17:09:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The one “extra” thing is the block evaluator: you could use <code>for{i,i+1,...}</code> but you have to know it won’t generate the loop logic in that case.</p>\n"
  },
  {
    "id": 89067,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T17:08:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But we’re going to support goto anyway, right? My point is really that if you wanted to actually write at the instruction level (maybe some variation on the exit condition) then you can do that.</p>\n",
    "replyID": 89065,
    "replyName": "dzaima"
  },
  {
    "id": 89066,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:05:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(<a href=\"https://github.com/dzaima/singeli/blob/8ca466c9f7a8668a40962dc1157a28e11562846d/src/si/obj/SiStt.java#L67-L78\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">while loop impl</a> if you’re curious how something like that looks)</p>\n"
  },
  {
    "id": 89065,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T17:03:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if you wrote that in the Java impl under <code>SiArch.SSE</code> or whatever you’d get pretty much my original way of doing it. Of course that means that you must have all loop definitions in the java code, but I don’t think that’s too awful</p>\n",
    "replyID": 89064,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89064,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T17:01:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Hm, you can implement a for loop in terms of a block evaluator and goto. Not that we have to do it this way, but it’s nice to know it’s possible.</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">for_copy{begin,end,vars,block} {\n  i := begin\n  loop = beginGoto{-1}          # backwards\n  exit = beginGoto{1, i&gt;=end}   # conditional forwards\n  eval{i,vars,block}\n  i = i+1\n  endGoto{loop}  # unconditional\n  endGoto{exit}\n}</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 129px; min-width: 385.9px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">for_copy</span>{<span class=\"cm-keyword\">begin</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">end</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">vars</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">block</span>} {</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">i</span> <span class=\"cm-keyword\">:</span><span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">begin</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">loop</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">beginGoto</span>{<span class=\"cm-keyword\">-1</span>}          <span class=\"cm-comment\"># backwards</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">exit</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">beginGoto</span>{<span class=\"cm-number\">1</span><span class=\"cm-function cm-apl-ravel\">,</span> <span class=\"cm-keyword\">i</span><span class=\"cm-function cm-apl-greaterThan\">&gt;</span><span class=\"cm-function cm-apl-null\">=</span><span class=\"cm-keyword\">end</span>}   <span class=\"cm-comment\"># conditional forwards</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">eval</span>{<span class=\"cm-keyword\">i</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">vars</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">block</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">i</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">i</span><span class=\"cm-function cm-apl-add\">+</span><span class=\"cm-number\">1</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">endGoto</span>{<span class=\"cm-keyword\">loop</span>}  <span class=\"cm-comment\"># unconditional</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">endGoto</span>{<span class=\"cm-keyword\">exit</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">}</span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 129px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 153px;\"></div></div></div>\n"
  },
  {
    "id": 89063,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:57:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(your singeli model doesn’t have limitation 1, and therefore gets around all the problems)</p>\n"
  },
  {
    "id": 89062,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:55:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">getting around limitation 1 gives my proposal of passing closure variables as a tuple to the new function; getting around limitation 2 is my proposal of mandatory inlining of <code>for_group</code>, allowing <code>body</code> to just see the variable slots directly</p>\n"
  },
  {
    "id": 89061,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:54:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and the separate function cannot access the callers variable slots because the IR isn’t dynamically scoped</p>\n"
  },
  {
    "id": 89060,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:53:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with my model, limitation 1: dynamic values can be only passed in <code>()</code>-args; limitation 2: <code>()</code>-functions necessarily create a whole new function in the <code>beginFn</code> sense. Therefore, invocation of anything dynamically (i.e. <code>for_group</code> with dynamic pointer arguments) necessarily creates a separate function</p>\n",
    "replyID": 89059,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89059,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:50:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I was thinking the block would just get access to the variable slots. Is there a problem with that approach?</p>\n",
    "replyID": 89058,
    "replyName": "dzaima"
  },
  {
    "id": 89058,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:48:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">though the actual closure runtime values would have to be passed as actual function arguments, which live in a separate world. Not impossible, but aaa</p>\n"
  },
  {
    "id": 89057,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:45:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that… works, i guess</p>\n"
  },
  {
    "id": 89056,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:45:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, in the <code>body</code> argument?</p>\n",
    "replyID": 89055,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89055,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:44:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think it should interact with syntax though. It’s just some extra data that a block carries around.</p>\n"
  },
  {
    "id": 89053,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:43:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s basically my suggestion. It’s not really fake: it’s the “upvalues” mechanism that some VMs like Lua use.</p>\n",
    "replyID": 89051,
    "replyName": "dzaima"
  },
  {
    "id": 89052,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:43:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">alternatively, IR-wise mandatory inlining for <code>for_group</code> would give closures for free</p>\n"
  },
  {
    "id": 89051,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:42:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess closures could be faked by passing another <code>closureVars</code> tuple argument and more magic syntax sugar that binds those to the previous names</p>\n"
  },
  {
    "id": 89050,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:41:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">re: my “and it could actually work”: I think it’s <em>mostly</em> implementable, but still no closures. it’d generate a custom function for <code>for_group</code> with the body inlined, but that’d still be in a function separate from the calling one. And unfortunately closures are pretty important</p>\n"
  },
  {
    "id": 89049,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:40:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That also gives a reasonable way to define (e.g.) <code>_mm_set_epi8</code>, which takes 16 <code>u8</code> arguments.</p>\n"
  },
  {
    "id": 89048,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:38:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">A comment is that the type of <code>vars</code> is a tuple. I guess there’s no problem since we’d fit it into C ABI just by expanding it into separate variables.</p>\n"
  },
  {
    "id": 89047,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:36:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(your model is definitely way better for this kind of thing)</p>\n"
  },
  {
    "id": 89046,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:36:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with that to “just work” in my impl, that’d have to be inlined for it to be able to use the local variables</p>\n"
  },
  {
    "id": 89045,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:35:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, i’m confusing myself</p>\n"
  },
  {
    "id": 89044,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:34:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with a magic <code>body</code> object and built-in <code>for{}</code> construct, you could just have <code>for_group{n, body}(init=0, len, vars) { … }</code> and it could actually work</p>\n"
  },
  {
    "id": 89043,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:34:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess you’d use <code>for () {...}</code> to just invoke directly, or <code>for{0,1,vars,body}</code>. Or <code>for{i,i+1,vars,body}</code> for a specific location? If that turns out to be common <code>for (i at k)</code> would make sense for a shortcut.</p>\n"
  },
  {
    "id": 89042,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:33:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, that’s what I meant.</p>\n",
    "replyID": 89041,
    "replyName": "dzaima"
  },
  {
    "id": 89041,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:32:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, is that about not using <code>()=&gt;…</code> lambdas for the body?</p>\n",
    "replyID": 89037,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89040,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:31:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">They’re converging…</p>\n",
    "replyID": 89039,
    "replyName": "dzaima"
  },
  {
    "id": 89039,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:30:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">…that being my or your <code>for</code>? :​P</p>\n",
    "replyID": 89037,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89038,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:30:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, that’s precisely what i’d do in a compiler-based impl</p>\n",
    "replyID": 89036,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89037,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:30:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m definitely on board with <code>for</code> magically invoking the body now.</p>\n"
  },
  {
    "id": 89036,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:29:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Actually there are some confusing things about the compiler-supplied for loops as well. If the body is <code>{z=x+y; z=z*y}</code>, does it write then read then write <code>z</code>? That would be bad; it would be better to have the body work on registers and then write every register that was set just once at the end.</p>\n"
  },
  {
    "id": 89035,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:27:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>body</code> could just be a <code>Def</code> wrapper around a <code>SttContext</code> (the raw parsed object gotten from ANTLR) and <code>for{…}</code> magically invoking &amp; generating it</p>\n"
  },
  {
    "id": 89034,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:26:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right; my complaint about IR was that <code>(a,b,c)=&gt;{body}</code> would have to be a function in the <code>beginFn</code> sense. It has to be something more special for this to work</p>\n",
    "replyID": 89033,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89033,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:25:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">What the definition in terms of the basic <code>for</code> loop does is keep you from having to worry about passing mutable variables into the body. I guess the body doesn’t have to be a real function; it could be some sort of block thing.</p>\n"
  },
  {
    "id": 89032,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:23:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, <code>for_group{n} a,b,c over i to l {code}</code> gets converted to <code>for_group{n}{0,l,(a,b,c),(a,b,c)=&gt;{body}}</code>, assuming you mark it as a for loop definition somehow. <code>{n}</code> isn’t a standard for loop variable so it has to be passed separately.</p>\n",
    "replyID": 89031,
    "replyName": "dzaima"
  },
  {
    "id": 89031,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:20:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i assume that’s with the syntax sugar inferring how to reassign the <code>vars</code> passed to <code>for</code> to actual variable names that were in the invocation? (is there any reason for <code>{n}{init=0,…}</code> over <code>{n, init=0,…}</code>?)</p>\n",
    "replyID": 89028,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89030,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:13:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Should be <code>l0*n</code> on the second for loop above.</p>\n"
  },
  {
    "id": 89029,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:10:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Wait, representing what in IR? Loop definitions are going to use <code>{}</code> functions, which should all be resolved during compilation.</p>\n",
    "replyID": 89027,
    "replyName": "dzaima"
  },
  {
    "id": 89028,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:09:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">How about a definition like this? <code>type{*v}</code> is weird, but otherwise I think it makes sense.</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">for_group{n}{init=0, len, vars, body} {\n  l0 = len//n;  # Integer divide\n  vec{v} = cast{*[n]type{*v}}\n  for{0,  l0,  maptup{vec,vars}, body}\n  for{l0, len, vars,             body}\n}  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 89px; min-width: 280.65px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">for_group</span>{<span class=\"cm-keyword\">n</span>}{<span class=\"cm-keyword\">init</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-number\">0</span><span class=\"cm-function cm-apl-ravel\">,</span> <span class=\"cm-keyword\">len</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">vars</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">body</span>} {</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">l0</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">len</span><span class=\"cm-operator cm-apl-reduce\">//</span><span class=\"cm-keyword\">n;</span>  <span class=\"cm-comment\"># Integer divide</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">vec</span>{<span class=\"cm-keyword\">v</span>} <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">cast</span>{<span class=\"cm-keyword\">*</span>[<span class=\"cm-keyword\">n</span>]<span class=\"cm-keyword\">type</span>{<span class=\"cm-keyword\">*v</span>}}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">for</span>{<span class=\"cm-number\">0</span><span class=\"cm-function cm-apl-ravel\">,</span>  <span class=\"cm-keyword\">l0</span><span class=\"cm-function cm-apl-catenate\">,</span>  <span class=\"cm-keyword\">maptup</span>{<span class=\"cm-keyword\">vec</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">vars</span>}<span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">body</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">for</span>{<span class=\"cm-keyword\">l0</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">len</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">vars</span><span class=\"cm-function cm-apl-catenate\">,</span>             <span class=\"cm-keyword\">body</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">}  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 89px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 113px;\"></div></div></div>\n"
  },
  {
    "id": 89027,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:08:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">not hard to deal with with inlining, but representing it in IR is kinda difficult</p>\n"
  },
  {
    "id": 89026,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:07:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also a problem with language-defined loop constructs and just using lambdas - closures</p>\n"
  },
  {
    "id": 89025,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:01:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And alignment.</p>\n"
  },
  {
    "id": 89024,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T16:01:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It really doesn’t. There are a <em>lot</em> of variations for the boundary conditions.</p>\n",
    "replyID": 89022,
    "replyName": "dzaima"
  },
  {
    "id": 89023,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T16:00:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">really the dispatch could just be per-export</p>\n"
  },
  {
    "id": 89022,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T15:59:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so much complication for being able to write the definition in singeli instead of the impl. I think loops being natively implemented per-<code>SiArch</code> works just fine (and for dispatching you’d want a generic way to dispatch any code block (or maybe just functions), not just loops)</p>\n",
    "replyID": 89020,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 89021,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T15:22:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Tuples are quite useful in other places though: for example you might want to compare four pairs of <code>[4]i32</code> registers and squash the results into a <code>[16]u8</code> to call movemask on it. You can do this by putting the results in a <code>2!2![4]i32</code> register (or whatever the syntax is for making a tuple of the same type), and then calling a <code>pack</code> function between the two halves twice.</p>\n"
  },
  {
    "id": 89020,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T15:14:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, I think a concept we need is a tuple type, which functions that aren’t defined on tuples automatically map over. So the for loop takes a length and a tuple of pointers (possibly different types), and a function of <em>mutable</em> tuples. Syntax sugar constructs the tuples and function. Getting writes to work will be really tricky though.</p>\n"
  },
  {
    "id": 89019,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-23T15:01:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No objections to the syntax, but I think it’s really important that it be possible to define for loops that follow the same syntax as the built-in one (although if this is possible, of course there’s no reason to actually <em>have</em> one built in). Really we’d like for it to be possible for a for loop to be a first-class value, so you can write code that accepts a loop as an argument and compile it for multiple architectures by varying the loop. So if they have a special syntax then there should also be a “define for loop” construct.</p>\n",
    "replyID": 89018,
    "replyName": "dzaima"
  },
  {
    "id": 89018,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T13:42:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0bY4xDsIwEAR7XrElSEEJ70EUtnUOlhwfOjsRdFQI0fEJHuaX4IRAgVLeamZvLQvWDonhN8jXF@oaQm3vlcAzn2CFOzQTsN2t7AefwjiG9LMc8v2BWC76gqrSlQEPJPh7ocIFA5lUKDqT6ZPjgNFxiboIttgrbQ5wAelIEBVaQlNkv9i9tCffntB9mt151xs#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">loop thoughts</a></p>\n"
  },
  {
    "id": 89016,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-23T11:52:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed many IR changes, reassignment, and basic while loops because i really wanted a working loop</p>\n"
  },
  {
    "id": 88987,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T20:16:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(half-relatedly, really should replace the <code>vN = …</code> IR syntax with <code>new vN …</code> or something)</p>\n"
  },
  {
    "id": 88986,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T20:15:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">wanted to add just <code>while</code> but even that requires adding mutable variables</p>\n"
  },
  {
    "id": 88985,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T20:08:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I really want to get <em>some</em> loop syntax in, at which point the language could actually be used. unfortunately <em>any</em> loop syntax is non-trivial :​|</p>\n"
  },
  {
    "id": 88984,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T20:02:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">heh, the old <code>•LNS</code> still exists and has URL reading: <code>{method⇐\"GET\"} •LNS \"https://…\"</code></p>\n",
    "replyID": 88981,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88983,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T19:51:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, some of them definitely don’t: for some cast functions it says there’s an <code>__m128i</code> made up of <code>M256</code>s, which turns into <code>[0.5]b256</code>.</p>\n"
  },
  {
    "id": 88982,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T19:50:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Current output is just prototypes of all the functions with Singeli-ish types. Should be fairly easy to get it to output actual function definitions. The xml file has element types, so I didn’t have to guess at what <code>__m128i</code> means, but I haven’t verified that these types make sense.</p>\n"
  },
  {
    "id": 88981,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T19:49:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added a parser for the intrinsics data. Intel’s intrinsics page pulls from a .xml file which is fairly reasonable. I’m not storing it in the repository: get it from the URL in the first line of <code>arch/proc.bqn</code>.</p>\n"
  },
  {
    "id": 88917,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T16:29:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed, currently with a separate main method in si.ir.c.IR2C</p>\n"
  },
  {
    "id": 88913,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T16:11:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">inlining in IR should be simple too, but quite unnecessary for a while if not forever</p>\n",
    "replyID": 88910,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88912,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T16:11:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I didn’t want them to clog godbolt :p</p>\n",
    "replyID": 88911,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88911,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T16:10:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>static</code> in the right places is a nice touch.</p>\n"
  },
  {
    "id": 88909,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T16:08:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think there’s any reason to try and simplify it. The C compiler is just going to put it back in SSA form anyway.</p>\n",
    "replyID": 88908,
    "replyName": "dzaima"
  },
  {
    "id": 88908,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T16:07:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0lVPRaoMwFH3PV1zYQ5WGoUk2Rl37Fb6NEdS0LFBtaaMMxH/fTTUay8rci9x7zsm5J7mYKdWmXZBtUgr5Jg1hu4NsnSfkwFuEDtXEUSgGwaGyZ/pvRvOQFmFCVplSXGrOVrAFPI0VBcS6kXoVA/UhPj2WkFNtzrXZEPKkq@JYq/371Shdmeev3QzKT6fjDPsuS5RddGVRcjWZ0QUgwpk0cNVSscB1TURHpolDaAlMPcNcTQTrJk4QvuxNfakQTUj3q2u83LUPYWVILzKPHph7NbsbxIdBsT9oZMXEcmoP@zHELYbTuhX6EbwEswDOos@MQhRYc5iuJWUZszd9k7wErrMZx3p4s7G3bybLUmISuT/bKH@9nT9ELB/SZ/qPOX9g7tXsbpBbjPAHjayY2EeLcVr3A/kRvASzAP5i@GwxPw#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">yay</a>; extremely verbose but that’s fiiiiiiiiiine</p>\n"
  },
  {
    "id": 88885,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T15:22:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">working on IR→C conversion</p>\n"
  },
  {
    "id": 88880,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T13:08:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess managing imports is an acceptable alternative, arch-specific things should probably be in a separate file or something anyways</p>\n",
    "replyID": 88878,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88879,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T12:59:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Since later definitions override earlier ones, the filler script for say SSE3 would load the filler script for SSE2, then the core script for SSE3, then adjust any filler definitions that can be improved with SSE3. I can work on these scripts today.</p>\n"
  },
  {
    "id": 88878,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-22T12:55:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think that’s necessary because the definitions are right for the given types, just not complete. I’m thinking there would be a second “filler” script to define these missing operations. If you want to control every instruction you would load just the core script and not the filler, and get errors when things don’t exist.</p>\n",
    "replyID": 88874,
    "replyName": "dzaima"
  },
  {
    "id": 88874,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T11:14:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hmm, given that SSE doesn’t have all regular operators (e.g. <code>&gt;=</code> for int arrays), maybe the emit definitions should be named <code>sse_…</code> and the actual <code>__…</code> operator (and properly named stdlib) definitions be created separately?</p>\n"
  },
  {
    "id": 88873,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T10:54:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and hex &amp; float literals</p>\n"
  },
  {
    "id": 88872,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-22T10:16:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">added typed literals (<code>127i8</code> <code>3141592653u32</code> etc)</p>\n"
  },
  {
    "id": 88852,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T22:16:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">added if/else, &gt;/&lt;/&gt;=/&lt;= (not for type comparison currently, but now easily addable), and return (and curly brace statement blocks)</p>\n"
  },
  {
    "id": 88849,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T20:48:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added… a README. Time to do real work now.</p>\n"
  },
  {
    "id": 88848,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T20:42:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">implemented the <code>::</code> &amp; equal name shorthands</p>\n"
  },
  {
    "id": 88846,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T20:14:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>src/si/gen</code> contains the grammar <code>Singeli.g4</code> and <code>antlrgen</code> generates the java files from it. <code>src/si/obj</code> contains most things doing parsing</p>\n"
  },
  {
    "id": 88845,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T20:11:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed build &amp; run files. <code>src/si/Main.java</code> holds the main interpreted file, <code>tests/test.singeli</code></p>\n"
  },
  {
    "id": 88844,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T20:05:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">invited</p>\n",
    "replyID": 88843,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88843,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T20:05:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Can I have push access? Nothing to add immediately but I’m sure I’ll want it pretty soon.</p>\n",
    "replyID": 88842,
    "replyName": "dzaima"
  },
  {
    "id": 88842,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T20:03:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://github.com/dzaima/singeli\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">made a repo</a> of the thing</p>\n"
  },
  {
    "id": 88841,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:57:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s kind of both at once. But I definitely agree that it’s different from other uses of <code>=</code>.</p>\n",
    "replyID": 88840,
    "replyName": "dzaima"
  },
  {
    "id": 88840,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T19:55:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">problem with <code>=</code> is that the <code>T=[16]i8</code> isn’t really equality comparison, nor assignment</p>\n"
  },
  {
    "id": 88839,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:54:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess I prefer <code>=</code> but I could live with either.</p>\n",
    "replyID": 88838,
    "replyName": "dzaima"
  },
  {
    "id": 88838,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T19:53:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">more: <code>{T, T, imm8 &amp; T=[16]i8}</code>; <code>{T::[16]i8, T, imm8}</code></p>\n"
  },
  {
    "id": 88837,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:52:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That looks exactly like a type declaration, which I think would be confusing.</p>\n",
    "replyID": 88835,
    "replyName": "dzaima"
  },
  {
    "id": 88836,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:51:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess even <code>{2*T, T}</code> isn’t <em>that</em> hard to support (require each name to appear alone as one parameter; check conformity by first assigning those names, then computing values for the others to make sure they match), but it’s less important.</p>\n"
  },
  {
    "id": 88835,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T19:51:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how about <code>{T:[18]i8, S:T, imm8}</code>? <code>=</code> in yours is ordered, so <code>:</code> fits a bit better imo</p>\n",
    "replyID": 88834,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88834,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:49:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It would be nice to have a cleaner syntax for equality conditions on parameters, so we can just write <code>{T=[16]i8, T, imm8}</code> instead of <code>{T, S, imm8 &amp; T=[16]i8 &amp; T=S}</code>.</p>\n"
  },
  {
    "id": 88833,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:47:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ll work on getting the conversion from C intrinsic headers to Singeli code automated better, so I can change the format around at will and do other things like load/store and AVX. I also need to do the same for scalar instructions.</p>\n"
  },
  {
    "id": 88832,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T19:45:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Control structures are the big one from the implementation (of Singeli) perspective. I’m still not sure what the best way to handle them is. Being able to write <code>for</code> in terms of just gotos would be the best I think, but I don’t know if it’s possible.</p>\n",
    "replyID": 88831,
    "replyName": "dzaima"
  },
  {
    "id": 88831,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T19:39:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">left is control structures and more operators i guess?</p>\n"
  },
  {
    "id": 88830,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T19:37:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">went with my dots for now, things can be changed later if needed. <a href=\"https://dzaima.github.io/paste/#0vZ1bb9s6Esff91MIJ8BiD1AUaFoURoucD9H0bVEEVuTYQmlb1oh2kEW/@/ImiZY4YyaZ8XlKDhvih/9ceBtSDw/LEgr/3/9@Fv8uft79d/Gr/vT1T0H995/lt59/n/@vu3@K1bbuCv/nxV8P263t@2HVmF//Kpbfp33cFI1pP/3rIYHw5Vf9@fbtCO7PzxA@3@IIVRLh09df9eLtCO7PzxAWKYKAUFqEqhoQPhT3kS3Mj/eIWSzCh6L8dv83bYiqGgxRlN/nCFV1whC8mA4haRYKITaER3CGQBAqDOH2V/31i0dwP74Gwf9tjPD1C45wwBC8PR1C0jMohNgXPMIiRRAQSlyFp1GFp9eq8BSr0FRJAItgmpsK94Wn0ReeXusLT7EvNEAiwBVUAFIFuIYKQKoAQQUQzAuAJgbvjnDCGPhCAtCYCAwlroMeddCv1UFPdNCEDpoUQo9C6NcKoc@F0IQQelBCl2JxYfpGEoR3Sl32CWJOwRcajgJIChcdql7v2oHiQ1Fvt4tz//x5d//nbZ7p@h590/X9PTKIa7cQO8FEtaPT9S6k651gotrR6XoX0vUc4SPUL6u7T7eLs1/@5CH89L8OCFCbv8ViYxdE2O07MTuYvvHAMM0NysBnCMcABAOkGc4sMQuI11nCMqSN4S2xswjHdSGWrY9rNFk7hOP6hCFw5WqPgM/jjmubqUu1CkExy074CJ45dru@o8F7mp1c@4mGwGMjMyo8RAiKMwIH4ZpdWBAQeHBkhkWAABICeohjBPEjPZMxP/4YJjUDxIdiu4Tf3378nRwsfN/RYGH/8dQcx5KgmBrDUwS7UBRTexwHg8QMgxTH0SAJiqk1PEUwDEUxNchxsAhCYS3yuKrV@bo7maPz192RFrZvr8R81DIU7V4H35xDJJP0a/YfBik8BNAQUyW4xy4Hga12AgRUGATT4OUhgIZwSmyb1UFoweP6xlY8Jkpd@wmDYNoKGSBSmyE9RIVBMG2GDBCp7ZAe4oBBMK39BohFet3l2ktcCZ7ocBDIHPumMM1NhXsET2x4BCAQ4CoqAKECXEcFIFTo88N6JafCepXlC3MEPhUsQoYvCKuQ4wvCKmT5Qic3Vqw7eqxYdycMgm@s8BD4WLHuKgyCb6zwEPhYse4OGATfWOEh8LFi3ZW4EmyR0eXlh04wMrq8/CCrQlZ@kFUhJz8owSyp8sYKJZglVd5YIaxCji8Iq5DlC4JjhcodK5TgWKFyxwolmKZVbppWgglK5aVpJZigVF6aFlYhKzRlVcgJzZ1fVoiosEPXd2e@MEfgU2GHru/OfEFaBcBVgCupALgKgy/4ZYWMCuj67twXZgiMKqDru3NfEFYhxxeEVcjyhU5QhS7PFzpBFbo8X5BVIcsXZFXI8QUlGBEqLy8owYhQeXlBWIUcXxBWIcsXBCNC5eUFJRgRKi8vCKuQ5QuyKmT4wr6txFQwfef4whyBTwWHcNkXpFXI8AVpFTJ8Qe8chIgKru@kN5z5whyBT4WAABjC1VQATAW4mgqAqeB9Yb@tmVdT@lMogvJ94xFhmr0MKYb3yTBjAIKh14F5JXHGQK0kYh2YlxIzhiwdOkEdukwdOkEdujwdlKA/qEx/UIL@oDL9QQn6g8r0ByXoDyrTH/yej4wO6LbTRIcZA6MO6L5TrMOxoyqo0xfScoeso62YvUVtcexc64SCoxbNHg70pbuOAm6hTt@FsxS21VO4swyJG3l938lreTdFs90f4flUJSmSh9ivKQ4cj7QjCneqnaQ4DBRWRiktPt@SFJUIRTyn6ylSxZLOL6rDbVPJaPE00yJVLTlQwECxELmyGvpOX1vtLVKekhTcfrFI31wdKKokBXeMLJLOOVIM3qkF84Um88VLlC@0YL7QZL54ifKFjmOEm4LMFy9RvtCCMaLJGHmJYkQLxogmY@QlihEtGCOajJEXHyNVfRS7JGb6pi6JmWaXvpMITKtyhwAkAlxBBSBVgGuoAKQKbpZXNUWMwHolp2qw@zgewW9TEQTvvo9jCYAksBqsnrt2@dgFgsnFqD9vmOnaxB9muqHvsSBncjfKtp8IBjJLZc62IwZfj5NgqAgGMkdRDMYREgy@dDPBcCAYyEcwKIZFkWJYTBF6hpK0xdObbPGUsIV3y9kNsdDs3PJJ7fet0I0k1zd2JSm@kTSH4LuRFCCAhJgqwZ2qPQRamjTeSEpCMCXrAAEkhFViMzwDwV85uKHeZjHhsQlvsyQZmAoHN9TjLIGhwhiYPGJDvUtyU2z6d0kQHVgcYkM9TBIYen8AQX8AopJ007/JsQmvL4hA2NcXKKc07SgDl1MGBtQpTXuFMXA5Jf4WhnOI/i0MRAcep8RfwhgYIDCAoD@QTmnbrUPUO1i1XXJaOaJMOTxEfQnC9x3N6eKB3ECY9vYCw@iaU7@kGCKnHBnCnC7BUNEM452c6fyOYoiWnCNDmNMlGA40w1jrPZ3eUQxRlffIsJgh9AzlJVu8c5kRGNJLjZvCN7vQ2AqO39sL47dtd7tT9gcfoTIQaIQGiBCh2@VzIafFM/nMnGnHGZiGjcCAvjNnGSqMgekORGBAXwexDCVuC5ZHUjyDpmyhCVvo0Rb61Udv57bQlC00ZQuOl1oCA2ULjdqCaRphGYjtOdPcVLgpWGYRDgFIBLiCCkCqANdQAUgV3HpvW@/kcmS9o3OkGbdOGANXjvQMeFwahgpj4MqRngGPS8NQ4rbgyZGOQVO20IQteHKkZ6BsoSlbsORIz0DZQqO24MoOhoHKkbV/Xg0xBU92sAhAIsAVVABSBbiGCkCq0OfIZg/F2QGjft8BYxyXpu8hNOdLf/8PfGzuj6tisl/Ldbhn@06f7Hkp9sfDhIDdHywB/nKTPYGvMAQuf3AIQCFAQKh0I7JvHvpO75w7BLO8aQLExlHw75v3fSP1KVaHTUSh5KyxUeh1ANO8UU1vDyUohaKlUKMUaiMnhdpQUqjNIIV9g47zcXf9aYSwfSdfePfn/1v4XSYp3h0gQ43jQJGu4PIQTZWkeLdbJCiAoHAWaWBZlSdkawqZ0uROZnzf44TmfHssNFsIreRm2FrRM2ytXJkOwsAzs3QMmmLQOATXAKYVOa3TyrtlWgeePKEVOa3TIWEKqwCkCnANFYBUAYIKm1pq6Wv7Jk4RbPsJZ@BZ8gUGTTDoHqIFOSFa7DwlQLQQKNRezhxqT5tDoQx8edIzIE/W2HYbGaEGQCQ4@5KMVGAYhn3boARMsdnXY@AEkCaIX/W@f8/76rYOAnte3dphb5@5b5aPv1lPGKPtINc34Yy2GU4lRvEed4xCYqBA3NFRuHIM@6MGXi10pIUm0oNrHrSYUbxPCx1roTExegqnRfvYsN5ZiUPD9I0@n2xrdB59MaE0ApAIbuR05UKDX7rf6t36wkw/cwHsegtZqu/5e6pwjIJAFcnVwUMACTFX4j4pxixtZyZrDxHmUlOMuHDsAkQ6c2fm6wABJIRTAg5tJ@WWtm@ijs82N9eBABLCKWEWXWLb16Zvcvu6X/DBRj89uWunPNW@8UQm9I1W@9r2asbAe6QSMSQ/zWHbyzkDa/V5z5AsQb8pbHNT0QzvLgwZGABngJHBrDV4KtDjmcTQd6oGPdhiEzmlmWGLQcSz/BmEm@JDvd5JHXjavqkCGduOMjAtM3oGrJbQtlcYA1d0BgbsE0a23X0eBJQaV7@9Q3xcbu@cNX5@PNVVt7lb/Ml0iHia7/oeZ/rTkqnGNLsdoRJaQYaWZmg9g2F56yH8oxmAu94eSZ9UanRJ96/P66XAr3yTCHkumUaIXVJFO4RphApDyHvWO40QHW8FBF9FmEYIhqiLmTMwZSjrj8lbOlNDJBFYRu6AMB@2p4ZIIrz1ms7EEHX6jk6GIXiikkoMcWYw0SkXle2FqGy9M7SCUdleiMrWO0MrGJXthahsVTCEXFS2F6JyMIRcVLYXonIwhFxUtheikjIEU1S2F6KyHyv7FZ7A4btfZqKf0XLLzCrJwLfMpJa6PQNMGLi3if1KFy3FcCvdq@gApA5@td0uBbP08kKWXp4wBLYsvbyQpZc@OSwFU@TyQorsVRBMkcsLKdKr0F9NkljbEdfEHIK/JpZE4FraEbfEAgKqAtPncQIC@l15037AELgWlx4B3wLTZYmrwJMfiatyNjeFq3KIL7Cco1E35QICXEEFIFWAa6gApAoQVADBvEB@V76/Lphk4AsJ8rvytr3EdWCpNggMmtBBk0KwbI8HCEII/135bgXdGw@Y3ddge44ewhaG9TNZ2/fDUqmHl1W7d84ZfRXWQNj2ayBs6@eH/W4FU45zhEfGY/YpwiN20n6OsHt5FEMwfachzhFeBFV4uayCHl7P5UnTMYKmXvC9KfTwMmUS4h2JOgkBBAT0EOuVnBLYG74zJaYQnEpgj/jOlegElehylegElegylVCCPqFyfUIJ@oTK9Qkl6BMq1yeUoE@oXJ9w7@gKKYG95TtTYgrBqQT2mO@ZEjtbn2SrSPknt33fyQmuGb5Mu2l2d/6TGEwL3xhjtvodMNz2YBKDafEbY8xWwAPGAedgmu7HHKl5jedw2xGIHCzrvwEj/ZUIT9EQvsGyBBwpgKAYA8XW90oFClJj3JtERYEywWANFKTMeMCIHHSCwRooHgMNFHXAOVgDxXOggaKiQJnJwRgoBoMIFNUQvsEYKJYCCAobKM9D@TW/Fs9UCfpN8RxK0JMITEI8UzXoHgFRga0G/ZkqQjeOadr/Dw#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">updated SSE</a> with that</p>\n"
  },
  {
    "id": 88828,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:41:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">question is, what would the syntax be? by the function version, it’d be <code>IsInt{i32} true; … IsInt{T} false;</code> but that’s a bit weird</p>\n"
  },
  {
    "id": 88825,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:26:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, that’d also mean <code>f{fn}(a:i32,b:i32,c:i32)=&gt;fn(fn(a,b),c);</code> <code>f{(a:i32, b:i32) =&gt; a+b}(1,2,3)</code> could be “a thing” somewhat trivially</p>\n"
  },
  {
    "id": 88824,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:23:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with enough refactoring, I think it would actually be possible to add <code>IsInt{T}</code> etc that don’t necessarily return functions. Definitely not <code>Type{a}</code> though, my runtime and compile-time objects and expressions are evaluated completely separately</p>\n"
  },
  {
    "id": 88823,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T17:17:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess we could have infinite signed or unsigned integer types that can’t actually be used for values, but that’s probably more complicated than just adding <code>IsInt</code>/<code>IsUns</code>.</p>\n"
  },
  {
    "id": 88822,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:15:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right</p>\n"
  },
  {
    "id": 88821,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T17:15:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, but not for <code>u64</code>, so it would be a bad choice for checking if a type is integer-like.</p>\n",
    "replyID": 88820,
    "replyName": "dzaima"
  },
  {
    "id": 88820,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:13:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">does <code>T&lt;i64</code> succeed for <code>u32</code>?</p>\n",
    "replyID": 88819,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88819,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T17:12:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>T&lt;i64</code> should indicate <code>T</code> is a subtype of <code>i64</code>. <code>Size{T}</code> and <code>Width{T}</code> work, although they could have operators too.</p>\n",
    "replyID": 88812,
    "replyName": "dzaima"
  },
  {
    "id": 88817,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:11:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(<code>&amp; T size 128</code> is stupid. you can’t compare size of 2 vectors (i.e. <code>Size{T}=Size{S}</code>))</p>\n"
  },
  {
    "id": 88815,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:09:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">in your model you could equivalently have <code>IsInt{T}</code>, <code>128=Size{T}</code> and <code>8=Width{T}</code></p>\n"
  },
  {
    "id": 88814,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:05:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>&amp; T.isInt</code>, <code>&amp; T.size=128</code> and <code>T.width=8</code> :​)</p>\n"
  },
  {
    "id": 88812,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T17:03:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">having <code>&amp; T is int</code>, <code>&amp; T size 128</code> and <code>&amp; T width 8</code> works, but is pretty stupid</p>\n"
  },
  {
    "id": 88811,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T16:54:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">about <code>t8</code>/<code>b128</code> - i don’t see any way without introducing special requirement syntax, or weird types like those. (and you definitely don’t want to use those in the emit type, but the matcing <code>T</code>/<code>S</code>)</p>\n"
  },
  {
    "id": 88810,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T16:47:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and making the fns give 2 typeargs of course)</p>\n"
  },
  {
    "id": 88809,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T16:44:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with the necessary syntax changes (semicolons at line ends, and underscores (though all of those <em>probably</em> won’t be operators and thus be accessed by name, hmm)), it does just “run”. though of course it’ll error when it actually touches one of those weird pseudo-types</p>\n"
  },
  {
    "id": 88808,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T16:41:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how to handle generic requirements is a good question</p>\n"
  },
  {
    "id": 88803,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T16:37:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yay</p>\n"
  },
  {
    "id": 88795,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T16:31:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Singeli’s types are more precise than C’s, and I may have gotten some of them wrong.</p>\n"
  },
  {
    "id": 88793,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T16:29:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Names are all just the first word of the C intrinsics after <code>_mm_</code>, so a lot of them are bad.</p>\n"
  },
  {
    "id": 88790,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T16:29:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m using <code>t8</code> and <code>b128</code> to stand in for any 8-bit integer type and any integer vector register (<code>__si128</code>). These need to be replaced with predicates.</p>\n"
  },
  {
    "id": 88787,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T16:28:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0vZ3dbtu4EoDv/RTCBjg4C/Sm6aIIFtjzENu9OygKK3Jso7Qta0Q7yEHf/fBPEi3NjJRkJr1Ky4bzzS9JiaTWJRTxz//@Kf5V/PPXfx@@7z9//VVwf/69/vOf32//6a//FJvDvi3irxe//TgcfqxL@LGp3V9/K9bjLu6K2jVfV@uJ/D@@77/cv11@@PUb@V/uSfkVIv/z1@/7h7fLD79@I/8BEZ/kl6t1VfXyPxXfMhe4H78R3vDyPxXln99@5@1fVYP9y6n8qrri8qMNg3zUG5z83P5RfrQ/Kr/C5d9/33/9I8oPP75GfvzdXP7XP0j5Z1x@9GGQj0YDJz/3f5T/gIhP8ktK/6dB/6fX6v@U619XmHQv37XWFeX/p8H/T6/1/1Pu/xo4@aCuP3D6g77@wOkPQX9QzH@gCkCMP7jiAHIJAFQGJICSsoAdLGBfawE7soClLWAZE9jBBPa1JrC3JrC0CWyygS3VssD1jReCGIW2jIVgiiCXCAEBOASXC2a/PTY9wqdifzg8zAXk0lAMfWfBGPoe/BCaV@ujYjU6stX4GKrxUbEaHdlqfAzVGJFffr6Plvc//CJmQ4T88LvFIB/27h@ITDgG9Y@nVs38rm8yDVxrTQDI2T8AAA0AKICgAzwA6oPogONqfdkWasX4sqVqcZB/2V5x@VKlOMonp2OXbbkqzSalwKQE0YPywuE49J2Px7clKDRfOQI6ExbmQCToUiATHwhCq0sChoBOhYVJkAiAI4BIcMkI/sZHAffj3/2A0BN8Kg5r@Pnn37@jA0HsOxsI/H8eeeFSkghjH0SE5A4OYeyGS@@HDKA3wqXzA4IwdkJESP7gEMZ@uPSOwBFg9bjZm9vVMVqCl6@OMyv4vpMNkPGoOdkQjFMCtAa/5vlAb4RIACzBrQ2kB6VAQCxREgFUOIHQqBQJgCVwNjjUm7PSKiX0TSxTXEKG5itOIPScoidAnlR0BBVOIPSkoidAnlV0BGecQGip1hM8oCul0FxSNpDJhUCAz5DvCtdaV1QUyGRClA@0fPgA/YHWHz5Cf6D1j3Vgu9HTf7uZ9/9Uvpz@Xv6c/5X1n/W/sv7z/m/1xoFty44D2/aKE8iNA5GAHAe2bYUTyI0DkYAcB7btGSeQGwciATkObNuSsoFYHrQL6kCrmAftgjqgq/98HdDVf7YOGMU6aBaMA0axDpoF44Cy/rP@V9Z/3v@K44BZNA4YxXHALBoHjGIVNouqsFGsQmZBFTaKVcgsqMLK@s9noa7@s1l4jMsBFf2P1HIs8/9Uvpz@R2o5lvlfW38g9YcP0R9I/ZP/43JAR39qOZb7fyJfUH9qOZb7X1n/Wf8r6z/v/1ZR/3aB/1tF/dsF/tfVf97/uvrP@t8oxr9ZkP9GMf7NgvxX1n/W/8r6z/tfMf7Ngvw3ivFvFuS/sv7z/tfVf87/p6ZS09/1Pev/qXw5/YP8Gf9r6z/nf2395/xvj4FARf/QNxYBmf@n8uX0T/KBkP9B@gOhP3yQ/kDo7/1/OuyF1z/2c9osFPsm49@1egNgAO8zwAQAaIBoAeEVwA0AswIYLCC8BJgAzFugVbRAu8QCraIF2gUWMIoxYJbEgFGMAbMkBoxiDJglMWAUY8AsiYH4KEbHAtSjoBsLTAAELUA9CxoscGm5ncP4kaqlY9HF7xq9p1xwaUPjDYLEVi3/PL7buxoQ4B726FEuj@AbPUJ4caBxmqzrGztSdlfUh9MFnq8VgoC@EH7Nlrnh9XCGEN8QIwjnhOCtp2WFL/ccQqWAkE/NOgRk82CIhep8X1caVniaWAHZPdgjQEJ4UDlcmfpGD1h2jiivCIJ0LDygZyx7hApBkM6IBywaB4QUjlaxLliuLrz0dcEq1gXL1YWXvi7YPCOkEbi68NLXBauYEZbLiJc@I6xiRlguI176jLCKGWG5jHjxGVHtL2onnVzfzEkn1@qqMypfaO0c5AMnH9T1B05/0NcfOP3dZK2qi1y@6DGTqibOmET5/tERI/7dZ0y8eODEw2rz3DbrxzaJH53x@fWGqaqv62mqmvoeytDtMR/ffCUB2FK0cK6cAcQiNAWoSAC2EHEAzvkIQCxBU4AzCcBev8ABRAljgIeR/A6gZFzw9CYXPCEuiHE4PuaUWl0cPpnTqVE6XxP6Jg7YDOdrpgRy52sSAXAEtzaQrsSRgNrF052vQQmEanEiAI4AVrv@GgL5/XQ75hoQlwy7cA0ICiC0nW7H3AOSACocQCgKdsxFGHfFLl6EQVhAJAh2zE0YCSDGACjGANB7KnfxKohdugBAhcBfAMBEoWsmAKSiMAFQUeiaKxxAKgrJWxhCEMRbGAgLyEQheQdDDwABABRjgItC33xd7Y@waVp0ajhwjCEiwX6OIPadTc2ysdkRuOaGBRhicRyIHEAWhQNAmppNASoOYDhnMp6mcQDZ8nAASFOzKcCZAxg2OI9naRxAtrV5AHgYy@8ASt4F71weJAB0iXBXxFaXCAfFIfnAD8m@@VoFgpiMOgRUMiaCkIyH9XOhZ4Vn7noy10wBCA0JCYC6n8wDVDiA0Db/BEDdSOEBSsoFIldyRADLuMCSLrCDC@yr323dusAyLrC0CyQuBUkAjAss4QKhaYEHoB@Wuda6ojwgMisI8oGTD@r6A6c/6OsPnP5ueXbYH/Wq4P7IVkE3IF1xAKkqGAHIFHQAFQ4gVQUjAJmCDqCkXCBTBQOAZVxgSRfIVMEIwLjA0i4QqYIRgHGBJVwgVQUcAFMF9/5yLsIDMlXAywdOPqjrD5z@oK8/cPrHKlifoLh5d2ff9@4uT0HX95CF46VhbPdpeLpsitETU6lXZ75v9L1ZNMLpcr4RLx4DXjx5GZB/lV3h8qViIMgHRj4E@ZWtVR5Yp77RR9ZBvluT1IFgFxDkH1h3fePbOrwFdj2C0XPCzlD73l3rztTRDUbRCIY1gumMYHZ6RjA7xghml4wQLy6Tu7rbfh4IfN/Y/d3xLfoBfpYIwrvTod/21yOg25wiQV0hCO8OBQQBaATniBrWVXklHhcR85OlM5PYdzY7yZ9XpdbVwRq9@bE17PzYmupMAcjMDgOAZQAsRSA1MlnDzc6s8XGIW0CmHljDzc5sKInK@gOnP@jrD5z@EPTf7bXWqL5v@sG9b75SADIrtARgaQAbCRrQM0FDvLxIBA0EBHPS84I5sV4wBIBcJYwA@L0ovrlapTfpKnnY72eYpoEDODU1IV4oDfvNDJR4QMVL3d/s9xEQ92d785@aVb1@/Cn68i57ShP6pqPPt8K1xBHeE39ZAvQIePwFhOoaECzIWsFmVrB0GQityQoThPdZweZWsIQZOgRnheaxFj2NkSeC65u6N9dvann0W@y05QMn342HYWtNH4jhb/vjdmaSvnClGnpLpajvebK1iiMgbbHUApEAOIKxDb6hZphU5YW1OBJ0s6JbhmFr1QwBXpgXluNEAByBswGcm1YrDn3f9AY331p/BAFwBM4GbpGk9ujY9c09Oo7rM9jZp6dwRlJmu2s@K0l9U9tdfXM1ApB9f5EBYN9V8M3lGEB0v3UHgG26vit8a11xAO/eUtEDAAkAHYBbI8jsuc5nBn3fyK7r5IJdH4VufqxGkE/QxwRudg777VHrRaLvm9lU4psJAKHlQQdA7LDzzRUOIJWICYD4woxvLlclGDMsU2@eVLVv2XcefzF9VcH3PUzSR1uLatdanR1AowjQsACNB3AYb32b/egG1bZzAxqExgwxGP53MbLAFZe/LAZx@XkMmuxhHSq/wuUvu8AZl5@9Qkry4xskVH6w/75AAkCkDPkAxE6e3NoflS8yGCf5k5H41v6o/LcePRnZf4@eO1lgf4kEZArAUAFcGuolYMMnYOMDoFFMwIZPwMYHQKOYgA2fgI0J9tdLwIZPwGR/vQRs@ARM9tdLwIZPQM7@IgnY8AkYR8BuQabwFjsuCanPGoUlYYUAyC0JmTVpBwA3ANJPaeOSlNrHEJakH2AB4Czg18TNWrEIr/kivL7i8sWK8JovwmtfBNaKRXDNF8Gov2IRXPNF0OvfHbTRWIrRZ52CfH/WCZUvtRKjjzol@YT@Qp8xSfKpD2@75jMuX2ohGOWTz6RsWVL6y1RA@qSXL0DhpBfhf5EXVcxBryQf1PUHTn/Q1x84/SHoD4r5z314O55zQwHkEoD78LZvLikLiLywTwCWtoBlTCDyXDoR0CbwH95uN9C@8X1t@LxmB9ER@K1T3fta3/ePtTE/XjbNKUTj8JlNR@Cb9eUf9s8/TscNjCBy@Y@C76vH8h@JV9a5/OPLo5p81zdKkMt/UdT/ZUZ/21@hKlOFc/mWucP1rrDp5kKU4B11GCUAmgAiwXajZwPiFteRDcYEkjYgrnEd26BVtEG7yAatog3aJTYwinFgFsWBUYwDsygOjGIcmEVxYBTjwCyKg3CZqpINiNtcRzYYE0jagLjONbPB0W/k8fsp5WenXd/YDNWNS67ZtV4rnEFohZozjJepPUN1xhmEVqk5w3ip2jOcKQihmXoOgUxSIkR5pQwhslzrGdC7/iNCTcaDyIptQAAaoUsLv8FVKy3wHbadJ0yfFiMG0bTAN9n2DH1EjhhE0yIyUGlhzhSEaFpECCotTJ8WE0MIpoVjoNPC1GQ8CKaFRwAaAVbP/bZjeSs8M5uu74rnsOkalS9kgmdm13WUj@svtev6mdl27SLRNf8f%23C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SSE arithmetic</a>.</p>\n"
  },
  {
    "id": 88777,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T15:36:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0jZFLa8MwEITv@hVDDk1fNC/XBJX0UsixJ99KG5RYSQW2FCw5BEr/e1eKXdvBKTXYh/V@s7Ozx3n8YJXeyUxxtlqJNP1KcIVkAUDNpt/Xgif3WPPkBotnyFw5JBhQ2wAC66cO8ha9X0by3Heu5J5a@tj5n@z0Me7B8zL7j1tFfRXDnLSuWTjMP6PEHfUN/TBSHGIB3@TF62oc/VbjiKrBxbnIrRehP7WIb6pEQvUkEqpBhLFC2jJznK3lTumlxnbiVwrvaIRTVl6BHaZEht2ohMMYhwmTOl3qBh230S64EVnmtducPO5N4TxWrd0oRV0T9RotEz7dfhezNtslTy6iXhczVLlRKLIoTGF5kzzHq0Eu3OaTbohtqTdOGZplSp3St6iDolAvXxd9z0dzGY4Xo1PllS20cbDCKbtVMoXSdQp@wsXT90/4AQ#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\"><code>__add</code> and <code>__mul</code></a></p>\n"
  },
  {
    "id": 88776,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T14:58:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>type{a}</code> would need to be able to give a type too. Having separate syntax to get type of an object would work in my model</p>\n",
    "replyID": 88771,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88772,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T14:54:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You have to turn off caching when a parameter is a runtime value, but that should be easy.</p>\n"
  },
  {
    "id": 88771,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T14:53:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The way to do it without type inference is to make operators take parameters, not arguments (creeping closer to my model) and define <code>a+b = add{type{a}}(a,b)</code>.</p>\n",
    "replyID": 88768,
    "replyName": "dzaima"
  },
  {
    "id": 88768,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T14:30:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">another flaw with <code>+ = add</code> is that <code>a + b</code> doesn’t specify <code>T</code>, and there’s currently no type inference. (not that there <em>shouldn’t</em> be type inference, but it is a pretty big complication)</p>\n"
  },
  {
    "id": 88767,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T14:18:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0hVFRa4MwGHzPrzj6sG4waHUqIcM9Fvayh@Hb2Io2sQ3DpFgrg7H/vmitidV1ARHucndfvks5/05wgyQGIB/8n9uUJffIWHKH@AmikBUSzFLOZ0iRPZK0F7wF738LimJtbq7F3lwZK@lVpR9GI/Fcf7aYQeaI0Xg1FpYIHKabzJLUJemZbJjQZUKXkVHQJ0WBQUkulTzsBGfDabhW4mKMAUQtRJ5fGcnEVqqVQr5sFt5@i0X/IlL7JrVdhoFQL1F7RCi@UkR87XVZNTobb908nJ59/nWe3S4cW7eaSX8PzmNsgHGmpwA6CKDjgEGDkxk@nO0QIspSlwfmdMLwolGk1WYn1Rb5UW0qqc0U@qj4lergng97bKf/G4@an/L8BQ#JS\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">yay</a></p>\n"
  },
  {
    "id": 88766,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:27:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, i didn’t even consider that <code>emit</code> needs to return something :​D</p>\n",
    "replyID": 88764,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88765,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:27:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(my version being <code>emit \"add\" a b;</code> and <code>emit \"neg\" a;</code>, the IR parser could get the types of <code>a</code> and <code>b</code> if needed)</p>\n"
  },
  {
    "id": 88764,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:27:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The type parameter is just the result type, since otherwise it wouldn’t be known. It shouldn’t have anything to do with the arguments.</p>\n"
  },
  {
    "id": 88763,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:26:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, that’s right. I sort of mixed up <code>emit</code> and <code>add</code>, I guess.</p>\n",
    "replyID": 88761,
    "replyName": "dzaima"
  },
  {
    "id": 88762,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:25:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">unless you want to have <code>emit{'add', T, T}(a,b)</code> and <code>emit{'neg', T}(a)</code> in which case it’s fine</p>\n"
  },
  {
    "id": 88761,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:24:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>emit{'add', T}</code> has to interpret a specific <code>emit</code> definition and generate a function. also i.e. <code>f{T}(a:T); f{T}(a:T,b:T); 'f'=f{i32};</code> is ambiguous</p>\n",
    "replyID": 88760,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88760,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:21:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Number of args is determined by the parameters, which I think should be supported.</p>\n",
    "replyID": 88758,
    "replyName": "dzaima"
  },
  {
    "id": 88759,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:18:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">again, though, trivial details, easily changeable in any editor with find&amp;replace and/or multi-cursor and/or macros</p>\n"
  },
  {
    "id": 88758,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:17:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">a problem with it being a regular-ish function is that it should be able to take an arbitrary number of args of arbitrary types (this wouldn’t be an issue in your model with dynamic <code>{}</code>-args i guess)</p>\n"
  },
  {
    "id": 88756,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:15:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">one alternative i was thinking about was just having emit be a separate syntactical construct that can do anything platform-specific it wants to</p>\n",
    "replyID": 88749,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88755,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:13:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">sure; of course this can be trivially changed later, do whatever</p>\n",
    "replyID": 88754,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88754,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:12:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ll use <code>__add</code> and let it be magically linked to <code>+</code> then?</p>\n",
    "replyID": 88751,
    "replyName": "dzaima"
  },
  {
    "id": 88753,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:11:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m thinking the easiest way to do infix ops is for every sequence of symbols to be infix but a few special ones like <code>+</code> and <code>*</code> to have extra precedence rules.</p>\n"
  },
  {
    "id": 88752,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:10:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess next up then is implementing <code>{}</code>-arg constraints</p>\n"
  },
  {
    "id": 88751,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T13:10:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that can work i guess (except that <code>+ = add</code>, and having strings just for emit is a bit strange)</p>\n",
    "replyID": 88749,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88750,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:08:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you think this style will work I can put together files for SSE and AVX in C intrinsics and x86 opcodes.</p>\n"
  },
  {
    "id": 88749,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-21T13:07:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0S0xJqQ5RUFMIsc00NlJQUKjVSLQK0VFIsgrRVLC1U0jNzSypVk9MSVHXUQgByukkaXIlwrVEm8QCdWHVkpsbD1QXn1oAVIBdrwUevUamZli1c2kr2CoAJQA%23JS\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Here’s my idea</a> for implementing things in terms of <code>emit</code>. This way a different instruction or intrinsic set can be defined by the user.</p>\n"
  },
  {
    "id": 88747,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-21T12:35:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0nZHPboMwDMbvfgrfKFqlNsCJqTtw6BP0Nk1VgLChoXRiLJqEePfZSZqgqtthSOSPHf8@54ts2/m0bGSJpy3WNKZ4eEL5UD9CItv23OdZggek5UzLxUdNjD4XLy4BvW6YQ7sUZ8BQsxFblCkskNAJLqOJjsP0Nio1k2ynuQGrT0NTuh46zY25UVIupVRK@pf3M5Fz35iD0GbLetyGjVR/cQn6C7EKyCow7R0YTN@oPr@GqQSo1Wuvjxq7Pd/X/rtdOA0mc@7YhNmjEaB0e9Sgvj8u48Rl3txIEuisvE6e5/2NSJ@@RxXoHydSQ29k@uwpHBFgBC0bOQzcjWHgDS3jmkjKw009MVrPzoMp1jzbncnXoYJUbiRyjN5HpeKuUnWVcg/yL71ipVf9AA#JS\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">very basic IR gen</a> (edit 2)</p>\n"
  },
  {
    "id": 88731,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T22:38:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">decided to go with the merging of type and expr; <a href=\"https://dzaima.github.io/paste/#0lVVZb@JIEH73r6g3B7A0wkmYyBErheyutE87mrH2BYVRY9pgxbRZu00mi/Lft6oPu22OYVpKTNfx1dF1rA9xID5uWBQP4OAB/IhimIIYsUe6eB@eX7yOfSStD9ltGMD9xyORQoc0HoYwgtvhHbI8tlp947vDUzAj0KcAltFsABE8KXQ2WmrIW9I3sgSCfwSMny95XWWTuz5/Quj@W1mIdczK9XNRC9mVIeubsQ1nLl5iMk5fsk9fmP4GDF1dqhCUCVQgeOX6Nqu2TCYbvvqHJ7Iov2X/8X4gDsIpcYI8CTO/e1G5mj@8GFf3PPk7RYnqECt/78jPA2B2Gg6htWLz0KqWPKnLKivEDWk4t0dSb@6k3lxQTRRfuaxLrYWC9k5y9jeKLdlKuazdismojhtjNjzSsGLGJ1HI50JUkgmJakrngMU0Z6SP4vePMNZGGzl/6lx06aCs1qZ0N4ZHmG5PPf1TuY7fd7xCIcCS0Gytdh8AG9gSsXL@tHN1YFQBjW86CK665rf6@t4HCLsAwST4fAQS9kBCBEl1diEcquKMsYNMhovXex/wTNND/aB7bWIJtknG4YNvKLotitfPVgbryOo9ODRHFYvJN8SJbVntjmqYuM05YnxH5ndURijVa9YHw0kdTtrlUAtbjvVScfYKTnNazywz7TDTHrOZC4qpYfH2RZaVZQxNQcpNybGIA0hFG1sAiQkwFRSz/s@QN0DWoDF1a3zUIKoekdrAzi7hIugZxFkDOWswVUIJ2E9rkUjsVKpUG4wx6n0aekUtd7WMPHXcQRnBHz92OGn4CvyRD7KADdtzwCFZQZEC/7dmOUgq/wjWhQTqRyZW1D9mIgMsFouj4RrBXyIpSpwgEiRSISFyBNxawwAIb/zTsQzHZ9GeM5P0V8PSpaQi00P2F@c5XHeMy@2MdvzcKzPAc77lQirnyO8leg2i3i55GcAbq0BP8vMb4IRJd6xH8FX/xnQkLM8v74MzeXfGfwR/mtKDbV1J4JnccAwDM/mGPzGl9OYlrwgUMMAK483Sd4wKiXWuI@2vl0XntKvDyReDPctrHtiyvLR6emF0F8k5TOPXVZvp0nsv@mvF7Q2syLp5b6c9VIeryLDRrtxe1xTg0Y466Yxq1p9tO7jUmUdr7Fo7p5ciXJ4CZE8ttgiemcA3w1rMZbbL3ylVsHyHsF1fl2TsOojg92wlfGkeBIZqOlTOcxU0WM5vvzMO9wZ1p/SoAvSbI@oVyAtv@Ol/#Java\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">current things</a></p>\n"
  },
  {
    "id": 88728,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:22:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">though functions would also be valid <code>{}</code>-args, and 3 naming cases is too much</p>\n"
  },
  {
    "id": 88727,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:22:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’d very much say the language <em>should</em> force annotating whether a thing is a function or value, though that’s unrelated</p>\n",
    "replyID": 88726,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88726,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T20:20:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But the language shouldn’t force you to annotate them (regardless, you could use Hungarian notation if you really wanted to). Parsing and compilation/evaluation run in the same step so you’ll see errors at the same time either way.</p>\n",
    "replyID": 88724,
    "replyName": "dzaima"
  },
  {
    "id": 88725,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:18:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so i guess there’s either that, or the syntax unification</p>\n"
  },
  {
    "id": 88724,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:16:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">being able to tell what’s a type and what’s not in your code is… good, y’know</p>\n",
    "replyID": 88723,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88723,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T20:15:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Because you don’t need to be able to use numbers as types? There’s just no reason to have types follow a different syntax from anything else.</p>\n",
    "replyID": 88721,
    "replyName": "dzaima"
  },
  {
    "id": 88722,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:14:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, the built-in numeric types should be lowercase :​|</p>\n"
  },
  {
    "id": 88721,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:13:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how about doing what BQN did over APL - require types to start with uppercase?</p>\n"
  },
  {
    "id": 88720,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:12:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">actually even in <code>f{T}()</code> <code>T</code> could be either a type or value</p>\n"
  },
  {
    "id": 88719,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T20:05:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s what I’d do.</p>\n",
    "replyID": 88718,
    "replyName": "dzaima"
  },
  {
    "id": 88718,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:05:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also, is halving width <code>T/2</code>?</p>\n"
  },
  {
    "id": 88717,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:04:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">good question</p>\n"
  },
  {
    "id": 88716,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T20:02:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">How <em>do</em> you get <code>T</code> from <code>[4]T</code> though?</p>\n",
    "replyID": 88713,
    "replyName": "dzaima"
  },
  {
    "id": 88715,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T20:01:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I mean it can also just be a runtime error. No need to go out of your way to detect these things during parsing.</p>\n",
    "replyID": 88713,
    "replyName": "dzaima"
  },
  {
    "id": 88714,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T20:01:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’ll just ditch the <code>n*T</code> syntax for now ¯\\_(ツ)_/¯</p>\n"
  },
  {
    "id": 88713,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:58:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">\"<code>([4]T)[0]</code> to be [something]\" nooooope</p>\n",
    "replyID": 88712,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88712,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T19:58:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think you can exclude that case without too much effort. Although I’m not sure it’s unreasonable for <code>([4]T)[0]</code> to be <code>T</code>.</p>\n",
    "replyID": 88710,
    "replyName": "dzaima"
  },
  {
    "id": 88711,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:58:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s trying to unify completely separate things way too hard imo. And you should really statically easily be able to know whether a given thing is a number or a type</p>\n",
    "replyID": 88708,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88710,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:56:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">probably is. but having <code>[n]…</code> and <code>…[n]</code> in the same rule feels just stupid, allowing for things like <code>[2]a[2]</code></p>\n"
  },
  {
    "id": 88708,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T19:55:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If a phrase means something completely different when one part of it is a type versus a number, isn’t that a problem for the programmer anyway?</p>\n",
    "replyID": 88707,
    "replyName": "dzaima"
  },
  {
    "id": 88707,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:53:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m not even sure if it’s possible to unify them without conflicts</p>\n"
  },
  {
    "id": 88704,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T19:51:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You <em>get to</em> unify them. In my opinion <code>[x]y</code> should just be fancy syntax for a particular operation that requires <code>y</code> to be a type.</p>\n",
    "replyID": 88703,
    "replyName": "dzaima"
  },
  {
    "id": 88703,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:48:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but it means that I either have to unify my <code>type</code> and <code>expr</code> grammars (allowing for things like <code>2+[5](2+2)</code> in the AST), or having fallback re-parsing. (and I like my context-free grammars)</p>\n",
    "replyID": 88699,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88699,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T19:45:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But that’s just dynamic typing?</p>\n",
    "replyID": 88695,
    "replyName": "dzaima"
  },
  {
    "id": 88695,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T19:34:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">annoying thing i don’t want to think about: in <code>g{T}() =&gt; f{2*T}();</code>, <code>2*T</code> can be either multiplying a constant number by 2, or doubling the width of <code>T</code></p>\n"
  },
  {
    "id": 88694,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-20T18:40:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ngn: takes another gulp of lithuanian “originali” (closest to latvian i can get here) and remains silent 😃</p>\n",
    "replyID": 88693,
    "replyName": "dzaima"
  },
  {
    "id": 88693,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T18:06:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">next 2 hours, did almost nothing, but hey, <a href=\"https://dzaima.github.io/paste/#0lVTbjtowEH3PV8xbuESqCJdWQVRiV63Up1bbtC@ISCYYiBZsmjjANuLfO2MnIUCgbCSU2J45c2Y4x4tMHBvMm4hp1HWb4MHEbelvyCyAgxcNejCC/tA6Wpa1zHxHh/vN/NjHQ9FmQ1pgiC1fOzZuLTNEcKB/HNKWW9nqtFxoQ7fVwyNrkY2dJ8IbOzDznqj8WAOz9sygdSl1oVPxR3D4@rFOE@RVORoQnL2PpVj6LF4@y1So8pgqrToFdezUp2r01v3iG0afgSGtmaargTGBkDXNTZRsmApXfP6bh0rGP6O//JJ5BaEunCBrYSa9qZ7L5NM0p7rj4fcFRiSZr/n2iGcGOI7yhNBOYRO3SI15mMZJJEWDMiqrIaWXa0ovF5gm5AtXaWyyMLBYU1zxjWEzNteUDS3fCIb6xp7zM8oownJOQqpnKRLFhMI0nZOhcCZMi4ykBR1TtIyzR5UFQrD5HGNNNo27LNzGcVv6Xx/HS/9tyxMMAlSDOTZpfQdYs1BHEWePzpYVGK2dTuMMoZpuzk/5Zn0J4J4DOAPn4xWIewHiIohlyVRtU@VZZ0r34Mthi6Lhc7DbNigJK7bjgFJPQC6A/0nZGhR14sFSKqDRMjGnUeRuAgiC4MoiHnwToYxRDAoU7kJI2/ecBDVPcEPz72VtvKCJGzu803nw2BMEehQnN1V47nQZ4Gu@4UJpcsR7hqxBpJsZjx3YswSM5257taZk1YAevJhvHEfI1uv7zq2hbwBLo3rwNRWhwgzYpIkCHqkVxzZwknv8xJECP2xjnhAoYIMJ9hst3rAr3EzXptPLiyA4e04mr8wrzF3qFLK7d0tcqabqeQ9@iVch90JT@VAAA7t0blWzKKW0/KM86tHQ0heFZoQGePCCeEQ5V9dALRljov9cKDeVGZyMeropHq1Tf@/crUXPPw#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">pretty error messages</a></p>\n"
  },
  {
    "id": 88688,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-20T17:40:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i wish i could say something clever</p>\n"
  },
  {
    "id": 88687,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T17:38:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">except that my <code>{}</code>-args are cached</p>\n",
    "replyID": 88684,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 88684,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-20T16:34:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you add an <code>emit{}</code> function that prints its arguments/parameters and returns a result-number object then I think you have the core of my implementation idea already. The other parts would just be function definition and calling.</p>\n",
    "replyID": 88683,
    "replyName": "dzaima"
  },
  {
    "id": 88683,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T16:07:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(^ that’s <a href=\"https://dzaima.github.io/paste/#0NcyxDsIgFEbh/T7Fv6HFRaoONI4@BXG4tVBNDKCA0RDe3TTG7csZjqu@rVib7fnWqw1GbfyiNTR@DZUAliM1Ek7gCFdV10Ni1@3bQBRKjiUnTXR6R3vJdoKQAjngyi8Lfs4JwcE@Ct@RP9EmjTnk/539BKMOi78#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">checkable</a> fwiw)</p>\n"
  },
  {
    "id": 88682,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T16:01:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(well, it also computes necessarily-constant numbers, like the <code>1*2 + 3*4</code> there i guess)</p>\n"
  },
  {
    "id": 88681,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T15:56:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and that stuff is <a href=\"https://dzaima.github.io/paste/#0lY9Pa4QwFMTv@RRzs7sKi9GWJdKDCz307k08ZF3/FEpiYyxbxO/el9gW6dJDDyFkZvJ789o5j07LnRR5hLM47SCQY2aADM9sYd1cRMrZxc6rV1HgESqUmXtQoI@/E6WqCsdwt8O4eyUhhGP1fC48yqX@iCS3dW5CLGjjgFq080vCIzpLRhLfSA/pkuFwQGOMNojJTX7crcNZ0HlU5//h3pE6vlHiPaepyT51Tu@ztLGzVsVnabEyrb6K9H4ULbJKEcpj9WtswhjTkx0mOwrGnq5DU9vmgiAMYDV6@d5Amm6EbtG8TfIV9mNoRoFOWxAKUl1AO7JnVWtj6DMs5VHrSdl/4taSnrj2/AQ#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this</a> - how much i’ve managed to make work in the last ~3hrs. It just outputs errors and literally nothing else :​)</p>\n"
  },
  {
    "id": 88680,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-20T15:54:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah, i’m just about to post stuff</p>\n",
    "replyID": 88679,
    "replyName": "ngn"
  },
  {
    "id": 88679,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-20T15:43:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anybody still here?</p>\n"
  },
  {
    "id": 87633,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-06T15:23:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">suggestion from the k room: “autosize”</p>\n"
  },
  {
    "id": 87628,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-06T14:33:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I called them “internal types” on the APL Wiki (<a href=\"https://aplwiki.com/wiki/APL%5C360#Internal_types\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">example</a>). I can’t find any well-known term for the technique. Seems V8 uses “Smi” for its small (32-bit) integer optimization, but that’s obscure and horrible.</p>\n",
    "replyID": 87623,
    "replyName": "ngn"
  },
  {
    "id": 87623,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-06T11:28:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is there a term for this overflowing of int types into wider int types? “fluid ints”? “single user-facing int type”?</p>\n"
  },
  {
    "id": 87588,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T22:07:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i don’t expect any difference between the two versions, tbh</p>\n",
    "replyID": 87586,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87587,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:57:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yep, no need to “jump back” in the loop 😃</p>\n",
    "replyID": 87586,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87586,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:56:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s <code>if (o &amp;&amp; (i!=n/k || o&gt;&gt;((-n)%k))) return i;</code> versus <code>if (o) { if (i!=n/k || o&gt;&gt;((-n)%k)) return i; *z=res; return n; }</code>.</p>\n"
  },
  {
    "id": 87585,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:52:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think what I really meant is that the duplicated-code version has one jump instead of two. The loop should be about equally predictable in both cases.</p>\n"
  },
  {
    "id": 87584,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:52:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think I can do any better than predictable/unpredictable. I doubt you’d be able to measure any difference between those two versions.</p>\n",
    "replyID": 87582,
    "replyName": "ngn"
  },
  {
    "id": 87583,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:50:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The one issue is if there are any cases of multiplication where it’s easier to detect any overflow than get a mask of overflows. I’m not sure whether there are though.</p>\n"
  },
  {
    "id": 87582,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:49:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">btw, i’ve never been able to get anything by trying to reason about branch prediction (maybe it’s just my lack of skills), however the amount of memory that’s accessed and the way it is accessed can have measurable impact.</p>\n"
  },
  {
    "id": 87581,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:47:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that sounds nice</p>\n",
    "replyID": 87579,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87580,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:47:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Or maybe you just copy the part that writes and returns <code>n</code>, which might avoid polluting the branch predictor.</p>\n"
  },
  {
    "id": 87579,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:46:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There’s kind of a hybrid where you compute <code>o=(x^r)&amp;(y^r)</code> and begin overflow proceedings if it has a zero. But then you go back into the loop if <code>i==n/k &amp;&amp; 0==o&gt;&gt;((-n)%k)</code>. In that case the loop just writes the final value, finishes, and returns <code>n</code>. Avoids the count leading zeros.</p>\n"
  },
  {
    "id": 87578,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:39:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, you can keep track of the rounded value and return it.</p>\n",
    "replyID": 87576,
    "replyName": "ngn"
  },
  {
    "id": 87577,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:38:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yep</p>\n",
    "replyID": 87574,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87576,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:38:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the nasty part is that the caller of <code>addII()</code> would have do the rounding 😦</p>\n"
  },
  {
    "id": 87575,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:38:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Which is probably what you meant originally.</p>\n"
  },
  {
    "id": 87574,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:38:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess you could calculate an exact <code>i</code> just to see whether it’s greater than <code>n</code>, and stop aborting if so.</p>\n"
  },
  {
    "id": 87573,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:37:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if there’s an overflow, we simply don’t write</p>\n",
    "replyID": 87572,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87572,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:36:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The problem isn’t that you have to compute <code>i</code>, it’s that you have to only write up to <code>i</code>. But yes, it probably wouldn’t be too far off.</p>\n",
    "replyID": 87570,
    "replyName": "ngn"
  },
  {
    "id": 87571,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:36:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if overflow detection is done with <code>o=(x^r)&amp;(y^r)</code>, we need only <code>o&amp;somemask</code>, count leading zeroes, and divide by some pow of 2 (shift right)</p>\n"
  },
  {
    "id": 87570,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:33:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i would expect an exact <code>return i</code> would take about the same amount</p>\n",
    "replyID": 87569,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87569,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:20:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Mask generation would be the part with more instructions, but you’re still looking at maybe 10-15 instructions for the last part. I can’t imagine that would have a real impact on your binary.</p>\n",
    "replyID": 87568,
    "replyName": "ngn"
  },
  {
    "id": 87568,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:17:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah sure, but special-casing the last iteration means ≈twice the number of instructions</p>\n",
    "replyID": 87566,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87567,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:16:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Typically the masked-overflow version would be the same as the non-masked, with an <code>&amp;</code> thrown in somewhere. Keeping track of overflow versus masked overflow would be kind of annoying, but you’d still have a tiny amount of source code.</p>\n"
  },
  {
    "id": 87566,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:15:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess another option is to have a for loop that masks off the last iteration, either by treating the inputs with a supplied function or by using a <em>masked</em> overflow-sensitive operation.</p>\n"
  },
  {
    "id": 87565,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:13:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So then changing your access pattern is just a matter of calling a different for loop function.</p>\n"
  },
  {
    "id": 87564,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:12:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Thinking about it a bit, I’m fairly sure that you could write a Singeli for loop that encodes that double-register pattern. The block argument to the for loop should just describe a direct computation on vector registers, and not know anything about pointers. So the loop handles the reading and writing. It puts <code>x</code> in and gets <code>z</code> out, and it can do two of those side by side if it wants.</p>\n",
    "replyID": 87558,
    "replyName": "ngn"
  },
  {
    "id": 87563,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:12:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">this is only in cases for which i’m sure no allocations can happen while i’m looping</p>\n"
  },
  {
    "id": 87562,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:11:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for example, in many cases i free the object <em>before</em> looping over it, so i can be done with the header before looping over the content, and i don’t have to “go back” to decrement refcount</p>\n"
  },
  {
    "id": 87561,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:10:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">sometimes i go out of my way to get nicer access patterns</p>\n"
  },
  {
    "id": 87560,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:07:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hm…</p>\n",
    "replyID": 87559,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87559,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T21:07:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The end of the array should only be out of cache if it’s very long, and in that case a single cache miss is negligible relative to the rest of the computation.</p>\n",
    "replyID": 87557,
    "replyName": "ngn"
  },
  {
    "id": 87558,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:05:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the other option seems too complicated to me</p>\n"
  },
  {
    "id": 87557,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T21:04:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if zeroing out is done before the loop, it would screw up the access pattern</p>\n",
    "replyID": 87556,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87556,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:58:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You could zero out elements after the end, or, for inputs longer than a single vector register, do a final pair of registers that overlap (last one is unaligned). You would read both, then compute and write both, so that you don’t end up adding twice.</p>\n",
    "replyID": 87555,
    "replyName": "ngn"
  },
  {
    "id": 87555,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:54:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but i think i can live with that 😃</p>\n"
  },
  {
    "id": 87554,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:54:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for <code>+</code> with a rounded <code>return i</code>, a false positive overflow might happen past the end of the input</p>\n"
  },
  {
    "id": 87553,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:47:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Same thing for <code>+</code>, but much easier since there is no state.</p>\n",
    "replyID": 87552,
    "replyName": "ngn"
  },
  {
    "id": 87552,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:46:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh… i was talking about <code>+</code>. but yeah, this probably applies to <code>+\\</code> too</p>\n",
    "replyID": 87551,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87551,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:46:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes. Elements you’ve computed already are the correct results, and elements you haven’t are the inputs. It’s important that you can just read the scan’s state from the last result; if you were doing something like a scan-map then you’d have to keep track of the state.</p>\n",
    "replyID": 87549,
    "replyName": "ngn"
  },
  {
    "id": 87550,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:44:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(i just wanna make sure i’m not missing something)</p>\n"
  },
  {
    "id": 87549,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:43:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ok, i do that. so it’s safe to alias input and output pointers then?</p>\n"
  },
  {
    "id": 87548,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:41:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, so the idea is that you check the entire vector register for overflow and abort and throw it out if that happens anywhere. You don’t compute the exact index of the overflow because it takes longer than just computing the result for that register again.</p>\n",
    "replyID": 87547,
    "replyName": "ngn"
  },
  {
    "id": 87547,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:40:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but it should be safe if you check for overflow <em>before</em> you write it out?</p>\n",
    "replyID": 87544,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87546,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:39:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah.</p>\n",
    "replyID": 87545,
    "replyName": "ngn"
  },
  {
    "id": 87545,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:39:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">by “vector” you mean “vector register”?</p>\n",
    "replyID": 87544,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87544,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:37:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you write out the whole vector, then it’s not safe to alias input and output pointers.</p>\n"
  },
  {
    "id": 87543,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:37:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Multiple of the group size. Trying to write out part of a vector after you overflow is a waste of time.</p>\n",
    "replyID": 87540,
    "replyName": "ngn"
  },
  {
    "id": 87542,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:36:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but if you’re emitting the instructions/IR directly, there might be a way</p>\n"
  },
  {
    "id": 87541,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:36:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i couldn’t make clang vectorize it properly if the actual <code>i</code> is returned</p>\n"
  },
  {
    "id": 87540,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:35:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">does <code>*@{return i}</code> return the actual index <code>i</code> or the previous multiple of the group size?</p>\n"
  },
  {
    "id": 87539,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:34:11Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">scanv{op, id, T} = (n:Size, z:*T, x:*T) =&gt; {  \n  s:T = id\n  for{T} x, z over i in n {  \n    opo = op@{return i}\n    z=r=opo{s, scan{opo, x}}; s=r[-1]\n  }\n  n\n}  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 116px; min-width: 329.767px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">scanv</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">id</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">T</span>} <span class=\"cm-function cm-apl-equals\">=</span> (<span class=\"cm-keyword\">n:Size</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">z:*T</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">x:*T</span>) <span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-function cm-apl-null\">&gt;</span> {  </span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">s:T</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">id</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">for</span>{<span class=\"cm-keyword\">T</span>} <span class=\"cm-keyword\">x</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">z</span> <span class=\"cm-keyword\">over</span> <span class=\"cm-keyword\">i</span> <span class=\"cm-keyword\">in</span> <span class=\"cm-keyword\">n</span> {  </span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">    <span class=\"cm-keyword\">opo</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">op@</span>{<span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">i</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">    <span class=\"cm-keyword\">z</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-keyword\">r</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-keyword\">opo</span>{<span class=\"cm-keyword\">s</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">opo</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">x</span>}}<span class=\"cm-keyword\">;</span> <span class=\"cm-keyword\">s</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-keyword\">r</span>[<span class=\"cm-keyword\">-1</span>]</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  }</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">n</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">}  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 116px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 140px;\"></div></div></div>\n"
  },
  {
    "id": 87538,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:31:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, actually it would be better to have <code>s:T</code> throughout. It should automatically be broadcasted.</p>\n"
  },
  {
    "id": 87537,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:30:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There’s also some complication in that the loop needs to transfer <code>s:T</code> outside into <code>s:$T</code> in the body.</p>\n"
  },
  {
    "id": 87536,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:29:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The theory is that you’d use a type of <code>for</code> loop that rounds the length up.</p>\n"
  },
  {
    "id": 87535,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:29:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">shouldn’t n be rounded to the next multiple of 4 (or 8, 16…)?</p>\n"
  },
  {
    "id": 87534,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:28:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah. It would actually be really helpful to put together a list of tasks we want to accomplish.</p>\n"
  },
  {
    "id": 87533,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:28:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">thanks! i think it’s more clear when we’re looking at actual examples</p>\n",
    "replyID": 87531,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87532,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:27:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s not letting me edit, but you need to store the result and carry it over. Maybe <code>s:T = id</code>, then <code>s = op{scan{*@{return i}, x}, broadcast{$T, s[-1]}}</code> with very speculative syntax.</p>\n"
  },
  {
    "id": 87531,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:24:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think this would be the idea for implementing vectorized scans in Singeli:</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">scan{op,v,k} = h=k/2; scan{op, op{v,v&gt;&gt;h}, h}\nscan{op,v,1} = v\nscan{op,v} = scan{op, v, #v}\n\nscanv{op, T}(n:Size, z:*T, x:*T) : Size = {\n  for{T} x, z over i in n {\n    z = scan{*@{return i}, x}\n  }\n  n\n}</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 142px; min-width: 322.75px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">v</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">k</span>} <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">h</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-keyword\">k</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-number\">2</span><span class=\"cm-keyword\">;</span> <span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">op</span>{<span class=\"cm-keyword\">v</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">v</span><span class=\"cm-function cm-apl-greaterThan\">&gt;</span><span class=\"cm-function cm-apl-null\">&gt;</span><span class=\"cm-keyword\">h</span>}<span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">h</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">v</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-number\">1</span>} <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">v</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-keyword\">v</span>} <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">v</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-comment\">#v}</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span cm-text=\"\">​</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">scanv</span>{<span class=\"cm-keyword\">op</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">T</span>}(<span class=\"cm-keyword\">n:Size</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">z:*T</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">x:*T</span>) <span class=\"cm-keyword\">:</span> <span class=\"cm-keyword\">Size</span> <span class=\"cm-function cm-apl-equals\">=</span> {</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">for</span>{<span class=\"cm-keyword\">T</span>} <span class=\"cm-keyword\">x</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">z</span> <span class=\"cm-keyword\">over</span> <span class=\"cm-keyword\">i</span> <span class=\"cm-keyword\">in</span> <span class=\"cm-keyword\">n</span> {</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">    <span class=\"cm-keyword\">z</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">scan</span>{<span class=\"cm-keyword\">*@</span>{<span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">i</span>}<span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">x</span>}</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  }</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">n</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">}</span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 142px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 166px;\"></div></div></div>\n"
  },
  {
    "id": 87530,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:18:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i was hoping for a way to keep things aligned like with addII() (everything is 32-byte aligned there, including the returned index), but it seems impossible (or just hard)</p>\n",
    "replyID": 87529,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87529,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:17:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Doesn’t the same strategy work? Do the scan in place, if it ever overflows, abort and return the current index; then pick up again using the value at the larger index.</p>\n",
    "replyID": 87528,
    "replyName": "ngn"
  },
  {
    "id": 87528,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:15:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">now i’m wondering about scans (the question above was just an intro to this question)</p>\n"
  },
  {
    "id": 87527,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:15:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Now that my ideas about the syntax are more developed, I think the argument to an arithmetic function that overflows should be a block. I guess that means you’d need doubled braces like <code>{{return i}}</code>, which is a little unfortunate.</p>\n"
  },
  {
    "id": 87526,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:14:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hah 😃 cool, i already do that in ngn/k</p>\n",
    "replyID": 87525,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87525,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T20:13:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, that’s the idea from draft 2. Dyalog doesn’t do that, it just gives up and starts over, which means it’s not able to do arithmetic in place if it might overflow.</p>\n",
    "replyID": 87524,
    "replyName": "ngn"
  },
  {
    "id": 87524,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-05T20:11:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how would you design an addII() function? should it return the index of how far it was able to go before the first overflow?</p>\n"
  },
  {
    "id": 87523,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-05T18:28:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">true. (i’d estimate that a my-only impl would be quite a bit simpler, but that’s not much of an issue)</p>\n",
    "replyID": 87517,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87522,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T18:23:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, it’s just extra work right at the start. I expect to support inlining pretty quickly.</p>\n",
    "replyID": 87521,
    "replyName": "dzaima"
  },
  {
    "id": 87521,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-05T18:21:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">inlining could just be an IR transformation, no? Also C &amp; LLVM both would just allow marking a function as inline/not-inline</p>\n"
  },
  {
    "id": 87519,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T17:45:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think now we should nail down exactly what the IR looks like, particularly if/for loops, and possibly build a backend (x86, I guess) for it.</p>\n"
  },
  {
    "id": 87518,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T17:43:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Inlining isn’t completely trivial since you can only inline functions into other functions unless you have access to the target platform or an emulator, so I won’t put it in the very first MVP.</p>\n"
  },
  {
    "id": 87517,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-05T17:42:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think the same implementation could actually support both systems, although the libraries needed would look different. We’d just need a switch to decide how functions get inlined, and to get the errors right, disable calling <code>{}</code> functions on runtime values in your version.</p>\n",
    "replyID": 87491,
    "replyName": "dzaima"
  },
  {
    "id": 87498,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:40:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I really can’t imagine this being a problem. The usual architecture as you pointed out should be a series of <code>{}</code> definitions, and finally exporting the appropriate functions at the end. If you want to call one of these definitions inline, call it directly, and if you want to avoid inlining, call the function by its symbol. If there’s a function that isn’t exported but is used in multiple places, well, it only takes one line to define it.</p>\n",
    "replyID": 87497,
    "replyName": "dzaima"
  },
  {
    "id": 87497,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:34:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">in your system, making a function be inlined (or a <code>{}</code>-only thing not be) would mean rewriting the whole header</p>\n"
  },
  {
    "id": 87496,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:34:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I can adopt your caching logic if I just say that functions cache when all arguments are compile-time constant.</p>\n",
    "replyID": 87493,
    "replyName": "dzaima"
  },
  {
    "id": 87495,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:33:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">In my system, you’d be able to forcibly inline or forcibly not inline too. It just wouldn’t be a forced decision on everything you write that has huge impact on syntax</p>\n",
    "replyID": 87494,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87494,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:31:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I consider that to be a feature: it doesn’t require you to rely on the compiler knowing when to inline things.</p>\n",
    "replyID": 87493,
    "replyName": "dzaima"
  },
  {
    "id": 87493,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:29:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">mine does too, but it can actually sanely cache equal specialized generic functions, and doesn’t force <code>call</code>s to not be inlined</p>\n",
    "replyID": 87492,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87492,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:28:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And mine guarantees <code>()</code> calls correspond exactly to <code>call</code> instructions. It would be easy to introduce a syntax so a function can require particular arguments to be constant, but that wouldn’t be obvious when you’re calling it.</p>\n",
    "replyID": 87491,
    "replyName": "dzaima"
  },
  {
    "id": 87491,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:24:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">really the only necessary difference between my and your system is that in mine <code>{}</code>-args are guaranteed constant now that i think about it</p>\n"
  },
  {
    "id": 87490,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:23:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I am quite biased, right. Though my system doesn’t actually necessarily even require static typing, though <code>f{X,Y,Z}(x:X,y:Y,z:Z) = x+y*z</code> is a bit more verbose (but pretty clear that it’s explicitly very polymorphic)</p>\n",
    "replyID": 87488,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87489,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:20:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">My system is very easy to implement, has full static typing for object code, and allows you to specify types for compile-time functions with conditions.</p>\n"
  },
  {
    "id": 87488,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:18:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But your only argument for it is that you prefer static typing, right? Obviously the runtime has to be statically typed, but I think typing everything that happens at compile time is unhelpful and restrictive.</p>\n",
    "replyID": 87486,
    "replyName": "dzaima"
  },
  {
    "id": 87487,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:18:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">types are never recursive for one, which is an extremely huge simplification over java’s</p>\n"
  },
  {
    "id": 87486,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:15:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s much simpler than Java’s at least, and i managed to somewhat implement a java-like type system, so it doesn’t sound too impossible</p>\n",
    "replyID": 87485,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87485,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:15:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I mean, that’s still a pretty difficult type system to implement if you want everything to be statically typed.</p>\n",
    "replyID": 87483,
    "replyName": "dzaima"
  },
  {
    "id": 87484,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:14:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d argue it’s still pretty useful to have a scalar function that automatically promotes to working on vectors.</p>\n"
  },
  {
    "id": 87483,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:14:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so the args of a vectorized for loop are always vectors of size <code>n</code></p>\n"
  },
  {
    "id": 87482,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:13:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, we did.</p>\n",
    "replyID": 87480,
    "replyName": "dzaima"
  },
  {
    "id": 87481,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:13:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with that, you still can do <code>#arg</code>, make broadcasts, shuffles, etc, without needing to write a completely separate function for scalar args</p>\n"
  },
  {
    "id": 87480,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:11:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i thought we agreed that that’d be handled with <code>[1]scalar</code>?</p>\n",
    "replyID": 87479,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87479,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:10:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Er, no? If you want to write a vectorized for loop that does scalar cleanup at the end then you want the input to be polymorphic over both.</p>\n",
    "replyID": 87478,
    "replyName": "dzaima"
  },
  {
    "id": 87478,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:09:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for this simple example i guess it’s fine, but for anything more complex than just a sequence of heavily overloaded builtin operators you’d certainly want to know what args are scalars and vectors</p>\n",
    "replyID": 87476,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87477,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:05:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s a completely unobservable thing though. I’m not saying the merging of <code>()</code> and <code>{}</code> args is good, I’m just saying it’s possible without losing much other than exports and inline status</p>\n",
    "replyID": 87475,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87476,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:05:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you want to add conditions you can. It’s <em>useful</em> to have a function that applies to many different types including scalars and vectors (array programming?).</p>\n",
    "replyID": 87474,
    "replyName": "dzaima"
  },
  {
    "id": 87475,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:02:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It doesn’t correspond to any particular location in the final object code output, but given the same <code>a</code> there’s a particular object code it creates. That’s not possible without knowing the type of <code>b</code>.</p>\n",
    "replyID": 87472,
    "replyName": "dzaima"
  },
  {
    "id": 87474,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T20:01:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">without types, <code>f{x,y,z} = x+y*z</code> is very much completely useless if i didn’t write it. In general I’d have <em>no clue</em> whether to call it with scalars, vectors, pointers, which need to be constant and which not, etc</p>\n",
    "replyID": 87473,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87473,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T20:00:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So to write <code>f{x,y,z} = x+y*z</code> you’d need another argument for the variable types? That gets unpleasant very quickly.</p>\n",
    "replyID": 87471,
    "replyName": "dzaima"
  },
  {
    "id": 87472,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:59:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well <code>f{a} = (b) =&gt; {…}</code> doesn’t correspond to any particular object code either, does it?</p>\n",
    "replyID": 87470,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87471,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:57:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">@dzaima <code>g{T:*int, n=int} (x: *T)…</code> or <code>g{A:int, B:*A, n=int}(x: B)</code> are probably better (<code>int</code> matching any integral type). It’s quite a bit more verbose, but at least someone reading it wouldn’t immediately need to ask “what’s n and x?”</p>\n"
  },
  {
    "id": 87470,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:57:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Maybe I misunderstood what you were arguing for? The comment I replied to says <code>f{a} = (b) =&gt; {…}</code> may as well be <code>f{a, b} =&gt; {…}</code> in <em>my</em> system, which I don’t think is right as it fails to specify the type of <code>b</code> and thus doesn’t correspond to any particular object code. And if you want to make every <code>{}</code> function call typed, that will require dependent types and a team of grad students.</p>\n",
    "replyID": 87468,
    "replyName": "dzaima"
  },
  {
    "id": 87469,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:47:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can think of it as reading a register of <code>n</code> <code>u8</code>s from a pointer. But you could do the same just with a type argument.</p>\n",
    "replyID": 87467,
    "replyName": "dzaima"
  },
  {
    "id": 87468,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:47:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with random syntax being made up on the go, <code>g{T, n=i8} (x: *T) = deref(cast{*[n]u8}(x))</code></p>\n"
  },
  {
    "id": 87467,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:46:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">wait, a pointer to vectors?</p>\n",
    "replyID": 87462,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87466,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:45:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(there shouldn’t really be a <code>*</code> in the argument list)</p>\n"
  },
  {
    "id": 87465,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:44:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So the result has type <code>[n]u8</code>, which depends on the value of <code>n</code>.</p>\n"
  },
  {
    "id": 87464,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:44:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">A number and a pointer.</p>\n",
    "replyID": 87463,
    "replyName": "dzaima"
  },
  {
    "id": 87463,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:43:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what’s <code>n</code> and <code>x</code>?</p>\n",
    "replyID": 87462,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87462,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:42:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">How would you type <code>g{n, *x} = deref{cast{*[n]u8,x}}</code>?</p>\n",
    "replyID": 87461,
    "replyName": "dzaima"
  },
  {
    "id": 87461,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:39:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t see why this needs dependent types. A type must be constructed only from things known at compile time, so all types are easily statically calculatable</p>\n",
    "replyID": 87459,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87460,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T19:37:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, i meant <code>a</code> and <code>b</code> there as arbitrary placeholders for \"something\"s</p>\n",
    "replyID": 87458,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87459,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:33:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you think you can unify them with a good enough type system, good luck with creating an optimized dependently-typed langauge from scratch?</p>\n"
  },
  {
    "id": 87458,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:33:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There is a real difference as well. Runtime functions are statically typed and compile time functions are dynamically typed, so <code>(b) =&gt;</code> is not valid because <code>b</code> needs a type.</p>\n"
  },
  {
    "id": 87457,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T19:30:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well yes, there is no reason to create and immediately invoke a function with only constant arguments. But because we are creating a low-level language, whether something is inlined or not is a very important part of semantics that the programmer should have control over.</p>\n",
    "replyID": 87456,
    "replyName": "dzaima"
  },
  {
    "id": 87456,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T18:10:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">better rephrased: if you don’t cache, <code>f{a}(b)</code> creates a new immediately invoked function, which has literally no excuse for not being inlined since it won’t be reused</p>\n"
  },
  {
    "id": 87455,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T18:08:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you don’t cache, any and all instances of <code>f{a} = (b) =&gt; {…}</code> are as good as, if not worse than <code>f{a, b} =&gt; {…}</code>, except for exporting (why must it be so special) and things like <code>g=f{xyz}</code> (which i doubt many will do)</p>\n",
    "replyID": 87454,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87454,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:59:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Hm, that’s tricky. You can’t always cache the arguments, since if you call <code>exec{block}; exec{block}</code> you need the block to be executed twice. I guess you’d want the option to cache, although it wouldn’t come up often.</p>\n",
    "replyID": 87451,
    "replyName": "dzaima"
  },
  {
    "id": 87453,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:52:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(gtg for ~15mins)</p>\n"
  },
  {
    "id": 87452,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:52:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">They’re passed by value.</p>\n",
    "replyID": 87451,
    "replyName": "dzaima"
  },
  {
    "id": 87451,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:51:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hm, that reminds me - <code>{}</code>-args are cached, right? Otherwise, <code>safe_double{u32}(4)</code> would always emit a new function</p>\n"
  },
  {
    "id": 87450,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:49:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Can you give an example?</p>\n",
    "replyID": 87449,
    "replyName": "dzaima"
  },
  {
    "id": 87449,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:48:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how about having some marker to make a <code>{}</code>-thing a function, instead of a completely different syntax system?</p>\n",
    "replyID": 87445,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87448,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:46:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The reason to use <code>&amp;</code> to set off conditions from arguments is that it already separates multiple conditions. So it’s kind of like there’s a default “true” condition after the last argument and adding <code>&amp;</code> narrows it down.</p>\n"
  },
  {
    "id": 87447,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:45:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We can probably bring them closer together, but the reason I ended up with a different syntax is that compile-time functions are dynamically typed and multiple dispatch. So the arguments are just a list of arguments, and then you add conditions.</p>\n",
    "replyID": 87446,
    "replyName": "dzaima"
  },
  {
    "id": 87446,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:42:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">like, I just don’t understand the need for the extremely different syntax between <em>that mess</em> and functions</p>\n",
    "replyID": 87441,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87445,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:42:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m pretty sure there will be situations where you’d want to call a common function, if you’re implementing more complex functionality. So it should be possible to call, but a more complicated syntax like <code>call{}</code> is fine.</p>\n",
    "replyID": 87444,
    "replyName": "dzaima"
  },
  {
    "id": 87444,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:39:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so, use functions only for exporting?</p>\n",
    "replyID": 87443,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87443,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:37:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There are exceptions but I think you’re right that it’s the more idiomatic way. It also gets rid of this weird problem where you feel like <code>f(x,y)</code> should infer type template parameters from the types of <code>x</code> and <code>y</code> but that’s a difficult pattern to actually support in the design.</p>\n",
    "replyID": 87440,
    "replyName": "dzaima"
  },
  {
    "id": 87442,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:37:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also since auto-inlining is very simple to do (just don’t inline anything that has <code>for</code> loops, and inline everything else, no?), I’d be just fine with inlining being handled solely by the language</p>\n"
  },
  {
    "id": 87441,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:35:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That looks about right. In this syntax I had thought of I would write <code>{T &amp; T&lt;u64, x:T}</code> as <code>{T, x &amp; T&lt;u64 &amp; typeof{x}==T}</code>, so that there’s just one list of conditions at the end.</p>\n",
    "replyID": 87438,
    "replyName": "dzaima"
  },
  {
    "id": 87440,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:34:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">↑↑ and that definition should be better actually, since if you were to execute it from singlei, you’d <em>definitely</em> want it to be inlined</p>\n"
  },
  {
    "id": 87439,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:30:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">↑ (should be <code>safe_double{f64, x:f64} =&gt; x+x</code>)</p>\n"
  },
  {
    "id": 87438,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:24:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0K05MS41PyS9NykmtDlFQUwixKTUz0VGosAqpVbBVqOZSUKi0MtIKAbKdE4tLqoFMoGQtSFhBW6GSq5aLS1nBvyy1KCc/MSUzL52rGMm8NLBJQHPsFCq0K7i41CHi8aXGRupAAzUqrIAsTZA0si6gGEgXAA#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this</a> is equivalent to the example <code>safe_double</code> definition, right?</p>\n"
  },
  {
    "id": 87437,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:24:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">[deleted]</p>\n"
  },
  {
    "id": 87436,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:24:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">replacement is as good as deletion 😃</p>\n"
  },
  {
    "id": 87435,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:22:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(why is there no message deletion)</p>\n",
    "replyID": 87434,
    "replyName": "ngn"
  },
  {
    "id": 87434,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:21:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n",
    "replyID": 87433,
    "replyName": "dzaima"
  },
  {
    "id": 87433,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:21:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is that the primary reason you want to separate them?</p>\n",
    "replyID": 87420,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87432,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:20:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">k9 will have them</p>\n",
    "replyID": 87431,
    "replyName": "dzaima"
  },
  {
    "id": 87431,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:19:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i mean, it’s certainly not a dealbreaker (though a <em>lot</em> of things aren’t; see tradfns), plus it’s also hard to compare when no impl has it</p>\n",
    "replyID": 87430,
    "replyName": "ngn"
  },
  {
    "id": 87430,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:16:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the fact that k survived for so long without bit booleans makes me doubt their usefulness in general (as opposed to byte booleans)</p>\n"
  },
  {
    "id": 87429,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:15:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you’re right about bool*int</p>\n",
    "replyID": 87427,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87428,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:15:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m not sure i want to go as far as <code>ntypes*ntypes*noperators</code>. bringing both args to a common supertype is not that terrible… we’ll see. at some point i’ll test on better hardware.</p>\n",
    "replyID": 87426,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87427,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:13:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Boolean times integer for example is pretty useful.</p>\n"
  },
  {
    "id": 87426,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:12:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Comparison functions are the biggest issue. Arithmetic with one boolean and one integer argument is also a problem. Doing the conversion separately will be half as fast.</p>\n",
    "replyID": 87425,
    "replyName": "ngn"
  },
  {
    "id": 87425,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:11:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i don’t understand what the problem is. <code>*</code> on booleans is c’s <code>&amp;</code>, and there’s no point implementing <code>+</code></p>\n",
    "replyID": 87424,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87424,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:07:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think so: if the type of <code>for</code> loop you’re using knows about booleans then you should just be able to use <code>u1</code> without caring where vectors of <code>u1</code> are stored.</p>\n",
    "replyID": 87422,
    "replyName": "ngn"
  },
  {
    "id": 87423,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:07:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i have a shortcut in vim that shows me in a split window the asm for the function under cursor. i don’t understand everything but i know this: if i see instructions that start with p or v, then it’s good 😃 it’s likely to be fast</p>\n"
  },
  {
    "id": 87422,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:05:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">bit booleans would require special treatment anyway</p>\n",
    "replyID": 87421,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87421,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:04:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I wouldn’t trust an autovectorizer in general, but I think that sort of thing is going to limit you in the future, as C compilers can’t generate bit boolean code.</p>\n",
    "replyID": 87419,
    "replyName": "ngn"
  },
  {
    "id": 87420,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:02:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes. My position is that if it doesn’t emit a <code>call</code> instruction then it shouldn’t use the same syntax as function calls—whatever that syntax might be (<code>()</code>, <code>call{...}</code>, etc.).</p>\n",
    "replyID": 87417,
    "replyName": "dzaima"
  },
  {
    "id": 87419,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T17:01:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i tried doing it in two loops: for(int i=0;i&lt;n/g;i++) and f(int j=0;j&lt;g;j++) where g is the group size g=32/sizeof(ItemType) and results are looking promising</p>\n",
    "replyID": 87415,
    "replyName": "dzaima"
  },
  {
    "id": 87418,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T17:00:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But however we do it, this will be a much saner language that C macros. So the downsides are that someone has to develop this language (the fun part!) and that your source code is in two different languages.</p>\n"
  },
  {
    "id": 87417,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T17:00:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so you would indeed say that all simple operators (taking vectors and outputting vectors) should take all args in <code>{}</code>-args?</p>\n",
    "replyID": 87410,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87416,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:59:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We should be able to compile IR to C, although of course that won’t accomplish the purpose of keeping the C source simple.</p>\n",
    "replyID": 87413,
    "replyName": "ngn"
  },
  {
    "id": 87415,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:58:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">without compiler intrinsics, i doubt you could get everything to work while keeping stuff vectorized</p>\n",
    "replyID": 87408,
    "replyName": "ngn"
  },
  {
    "id": 87414,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T16:58:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">which is my primary motivation to be here</p>\n"
  },
  {
    "id": 87413,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T16:57:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, i mean for implementing k’s overflowing + and *</p>\n"
  },
  {
    "id": 87412,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:56:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For implementing it? Why not use k? I don’t think the compiler will generally deal with enough code for performance to matter.</p>\n",
    "replyID": 87408,
    "replyName": "ngn"
  },
  {
    "id": 87411,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:55:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And functions are this combination of things in x86, but I’d say they should actually be a real concept in the IR, since this is more portable.</p>\n"
  },
  {
    "id": 87410,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:54:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think they’re in completely different categories: runtime functions are present in the IR and compile-time functions aren’t. I don’t think the compiler should be trying to move between one and the other, which is what inlining is.</p>\n",
    "replyID": 87407,
    "replyName": "dzaima"
  },
  {
    "id": 87409,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T16:54:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n"
  },
  {
    "id": 87408,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T16:53:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m still hoping i might be able to get away with pure c</p>\n",
    "replyID": 87367,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87407,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:51:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You’re kind of answering your own question - they’re just a special thing in assembly (if they even make it to assembly and aren’t inlined). In the language itself, there’s not much of a difference, the only thing <code>()</code>-args can do that <code>{}</code>-args can’t being exporting</p>\n",
    "replyID": 87405,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87406,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:41:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, emitted only.</p>\n",
    "replyID": 87404,
    "replyName": "dzaima"
  },
  {
    "id": 87405,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:41:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Functions are basically a special mechanism in assembly, with registers and instructions to support them. Why would having a separate syntax for them be stupid?</p>\n",
    "replyID": 87398,
    "replyName": "dzaima"
  },
  {
    "id": 87404,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:40:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">“evaluated” as in instructions for them are emitted, not actually calculated, right?</p>\n",
    "replyID": 87403,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87403,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:39:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No. Arguments to compile-time functions are evaluated first. The result of <code>f1()</code> is a handle/location and that’s what <code>fn_dup</code> will manipulate.</p>\n",
    "replyID": 87402,
    "replyName": "dzaima"
  },
  {
    "id": 87402,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:38:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">would <code>fn_dup{a,b} = fn(a,b,a)</code> mean <code>fn_dup{f1(), f2()}</code> would execute <code>f1()</code> twice?</p>\n",
    "replyID": 87390,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87401,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:37:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can define a function without exporting it. Then when you call it with <code>()</code> it generates a <code>call</code> instruction.</p>\n",
    "replyID": 87397,
    "replyName": "dzaima"
  },
  {
    "id": 87400,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:36:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It doesn’t tell you to inline <code>fn</code> (you <em>can’t</em> inline <code>fn</code>, there’s no such thing); it just creates a cover for <code>fn</code>. After that assignment <code>cfn{a,b,c}</code> is exactly identical to <code>fn(a,b,c)</code>.</p>\n",
    "replyID": 87396,
    "replyName": "dzaima"
  },
  {
    "id": 87398,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:35:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(or want to force not being inlined i guess, but that should really be achievable in less stupid ways)</p>\n"
  },
  {
    "id": 87397,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:34:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so the only time you would <em>ever</em> define a function in singlei is when you would export it?</p>\n",
    "replyID": 87395,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87396,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:33:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and <code>cfn{a,b,c} = fn(a,b,c)</code> is such an ugly and long form of what should be some annotation of “please inline thx”</p>\n"
  },
  {
    "id": 87395,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:33:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">They take arguments by completely separate methods. <code>Cast</code> is called from Singeli. <code>safe_double</code> is exported as a function in object code and its argument is passed in by some other programming language.</p>\n",
    "replyID": 87392,
    "replyName": "dzaima"
  },
  {
    "id": 87392,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:32:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess a more direct question is what’s the difference between <code>Cast</code> and <code>safe_double</code> that makes them taking their sole dynamic argument in completely separate ways logical</p>\n"
  },
  {
    "id": 87391,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:31:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you can of course just use regular args too for that, without much of a difference in behavior</p>\n",
    "replyID": 87390,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87390,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:26:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can always wrap <code>fn(a,b,c)</code> in <code>cfn{a,b,c} = fn(a,b,c)</code>. But that’s actually a useful ability, for example if you want to say <code>fn_dup{a,b} = fn(a,b,a)</code> or <code>fn_const{a,b} = fn(3,a,b)</code>.</p>\n"
  },
  {
    "id": 87389,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:26:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">All opcodes are gonna be generated at compile time though (because of course they are…), so that’s not much of an argument for preferring <code>Cast{2*T, x}</code> over <code>Cast{2*T}(x)</code></p>\n",
    "replyID": 87388,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87388,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:24:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Eventually it bottoms out to an <code>emit</code> call, but what opcode to emit is computed at compile time based on the type argument and the value argument’s type.</p>\n",
    "replyID": 87386,
    "replyName": "dzaima"
  },
  {
    "id": 87387,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:23:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, in my model the distinction is done with dynamic types. A constant has a (compile-time) type of Int; a (runtime) type has a (compile-time) type of Type, but the result of an instruction is Value.</p>\n",
    "replyID": 87384,
    "replyName": "dzaima"
  },
  {
    "id": 87386,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:22:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">A cast isn’t done at compile time though</p>\n",
    "replyID": 87385,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87385,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:21:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you write everything that does computation at compile time with <code>{}</code>, then you don’t even need the concept of inlining. I think that’s a big conceptual benefit.</p>\n",
    "replyID": 87380,
    "replyName": "dzaima"
  },
  {
    "id": 87384,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:21:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh right, <code>[n]i32</code> notation needs that <code>n</code> is constant, so there definitely needs to be some compile-time constant-vs-dynamic value distinction</p>\n"
  },
  {
    "id": 87383,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:19:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and you can do the exact same thing in your version</p>\n",
    "replyID": 87381,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87382,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:19:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, an argument of <code>4</code> is valid in <code>()</code>, but not in <code>{}</code></p>\n",
    "replyID": 87381,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87381,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:18:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But if you changed all your <code>()</code>s to <code>{}</code> wouldn’t you end up with valid code in my version? I don’t think you actually gain anything from the distinction.</p>\n",
    "replyID": 87379,
    "replyName": "dzaima"
  },
  {
    "id": 87380,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:16:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and the compiler should definitely do as much constant folding/inlining as possible either way)</p>\n"
  },
  {
    "id": 87379,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:15:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if i had my way, <code>{}</code>-args would be just types, and types only. <code>()</code>-args could be any values, and values only, which could be constant, or dynamic if an impl chooses to differentiate the two</p>\n"
  },
  {
    "id": 87378,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:13:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I view, e.g. the result of an instruction as a static value that describes part of a computation. I don’t think it’s useful to make it act differently from compile-time constants.</p>\n",
    "replyID": 87375,
    "replyName": "dzaima"
  },
  {
    "id": 87377,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:12:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’d change it too, but there just aren’t many parentheses in ASCII</p>\n",
    "replyID": 87376,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87376,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:10:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m open to changing the <code>{}</code> syntax, although really parens aren’t a good notation for function calls in the first place because they’re already used for grouping, so it’s nice to have an excuse to step away from that.</p>\n"
  },
  {
    "id": 87375,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:10:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">imo <code>{}</code>-args just should not be able to be dynamic values</p>\n"
  },
  {
    "id": 87374,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:09:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, the final exported output needs to be functions. I think it’ll sometimes be useful to call non-inline functions, say if there’s a vector loop you’ve already written and another place you want to use it as a preprocessing step.</p>\n",
    "replyID": 87372,
    "replyName": "dzaima"
  },
  {
    "id": 87373,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:08:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I assumed mostly everything would be inlined anyways, only exporting being special</p>\n"
  },
  {
    "id": 87372,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:08:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">why even have functions though?</p>\n"
  },
  {
    "id": 87371,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:07:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Nearly all arguments do go in <code>{}</code>; this is kind of obscured by the fact that operators use that kind of argument but not explicit brackets. <code>()</code> is only for calling functions with an actual <code>call</code> instruction.</p>\n",
    "replyID": 87369,
    "replyName": "dzaima"
  },
  {
    "id": 87370,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T16:05:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added the post on fundamental operations. It makes no mention of pointers; I think these should be manipulated just with add/subtract and load/store, so all part of <code>emit</code>.</p>\n"
  },
  {
    "id": 87369,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-02-04T16:05:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">would it not make more sense for cast to be <code>Cast{2*T}(x)</code> and not  <code>Cast{2*T, x}</code>? (alternatively, why not pass all arguments in <code>{}</code>-args always?)</p>\n"
  },
  {
    "id": 87367,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T15:48:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For loops on pointers will use a different syntax so the user can choose how to handle grouping and boundaries. Basically a for loop will be a function that takes a block, but we might want some special syntax, or other tricks to deal with the variable binding.</p>\n"
  },
  {
    "id": 87366,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T15:44:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m writing another post on what the fundamental operations should be, which also more or less ends up specifying the form the IR should take.</p>\n"
  },
  {
    "id": 87365,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T15:43:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It could even handle long types like <code>[24]u16</code>, although there the problem is figuring out how such a value would be represented so that <code>+</code> “knows” it’s a list.</p>\n"
  },
  {
    "id": 87364,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T15:42:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Operators <code>+</code> and <code>*</code> won’t be fundamental; they’ll be covers for many different instructions. So, for adding array types like <code>[4]u8</code>, a version of <code>+</code> matching those types would be dispatched.</p>\n",
    "replyID": 87363,
    "replyName": "ngn"
  },
  {
    "id": 87363,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T15:32:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ok, so far so good. the most interesting stuff (for me) is what a <code>list+list</code> or <code>list*list</code> loop will look like in this language, and most importantly what x86_64 it will ultimately generate</p>\n"
  },
  {
    "id": 87362,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-02-04T15:26:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n",
    "replyID": 87352,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 87355,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T14:58:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I keep going back and forth about whether the idea of a variable slot (<code>x:T</code>) makes sense. It allows some useful behavior in that it’s basically a reference: you can pass it in to a compile-time function and that function can set its value. There’s a strange aliasing effect where setting, say, <code>x:T = 6</code> and then <code>y=x</code> defines the value of <code>y</code> to be the variable slot, and not <code>6</code>, so changing <code>y</code> will change <code>x</code>, but that doesn’t seem likely to come up.</p>\n"
  },
  {
    "id": 87354,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T14:54:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Move “instructions” probably wouldn’t be represented as instructions, just connections between values.</p>\n"
  },
  {
    "id": 87353,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T14:53:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think the IR should handle register allocation and eliminate move instructions as much as possible, but otherwise output exactly the instructions represented.</p>\n"
  },
  {
    "id": 87352,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-02-04T14:52:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Just put up an evaluation sketch. It would probably be helpful to design our IR so I can describe things more concretely.</p>\n"
  },
  {
    "id": 86900,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T20:15:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And implementing a dynamically-typed interpreter is pretty easy if you keep the syntax simple and don’t worry about speed.</p>\n"
  },
  {
    "id": 86899,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T20:14:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Depends on how much IR you want to generate, doesn’t it? I want to make it as easy as possible to write the SIMD code even if that means some extra implementation effort for the langauge.</p>\n",
    "replyID": 86897,
    "replyName": "ngn"
  },
  {
    "id": 86898,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T20:13:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">then “singeli” would be more like a library than a whole language</p>\n"
  },
  {
    "id": 86897,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T20:11:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i have a stupid question - wouldn’t it be easier to generate the IR as a string using an existing language?</p>\n"
  },
  {
    "id": 86896,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T20:07:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think you’ve got the right idea. Type checking and code generation is part of the execution of a built-in function like <code>+</code>, so I wouldn’t describe it as “separate”.</p>\n",
    "replyID": 86895,
    "replyName": "dzaima"
  },
  {
    "id": 86895,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T20:00:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so your idea of this language is to be a dynamically-typed code generator, generating IR that’s statically type-checked &amp; generated completely separately</p>\n"
  },
  {
    "id": 86894,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:56:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>:</code> should be the thing that creates the variable, not <code>=</code>. That allows standalone <code>x:i8</code> (uninitialized variable, sometimes useful but should be checked).</p>\n"
  },
  {
    "id": 86893,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:53:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Huh, if you use <code>:</code> for type declarations, and require a declaration to create a variable but allow the right side to be blank, then <code>x := ...</code> declares and <code>x = ...</code> modifies.</p>\n"
  },
  {
    "id": 86892,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:50:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So if you could desugar the <code>autofor</code> in your example (don’t know if that will be possible), one of the arguments would be an anonymous function that looks like:</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">Lambda{i, w, x, z} {\n  z = Cast{T}(w) *@{return i} x\n}  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 48px; min-width: 224.517px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">Lambda</span>{<span class=\"cm-keyword\">i</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">w</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">x</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">z</span>} {</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">z</span> <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">Cast</span>{<span class=\"cm-keyword\">T</span>}(<span class=\"cm-keyword\">w</span>) <span class=\"cm-keyword\">*@</span>{<span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">i</span>} <span class=\"cm-keyword\">x</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">}  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 48px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 72px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"6\">and <code>autofor</code> calls it twice with different definitions for the arguments.</p>\n"
  },
  {
    "id": 86891,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:45:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, runtime control flow requires a built-in function to emit it.</p>\n",
    "replyID": 86890,
    "replyName": "dzaima"
  },
  {
    "id": 86890,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:44:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, so it’s not a runtime <code>if</code></p>\n",
    "replyID": 86888,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86889,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:44:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think trying to compare a runtime value to a constant like <code>0</code> would just give you an error.</p>\n"
  },
  {
    "id": 86888,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:43:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">At compile time. Calling <code>if{c,A,B}</code> compares to all the definitions of <code>if</code> to find one that fits.</p>\n",
    "replyID": 86887,
    "replyName": "dzaima"
  },
  {
    "id": 86887,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:43:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and that’s somehow dispatched at runtime?</p>\n",
    "replyID": 86886,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86886,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:41:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">This doesn’t even require a built-in “if”, since you can write <code>if{0,A,B} = A; if{1,A,B} = B</code>. Then possibly call the result as a function (you’d have to do that if you want to emit code).</p>\n"
  },
  {
    "id": 86885,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:40:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Maybe? It’s scoped, and it can do computations. So you could compare the result of <code>F{1,2,3}</code> to another number for control flow.</p>\n",
    "replyID": 86884,
    "replyName": "dzaima"
  },
  {
    "id": 86884,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:37:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so it’s a proper macro</p>\n",
    "replyID": 86883,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86883,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:35:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, <code>F{a,b,c}</code> is expanded at compile time, while <code>F(a,b,c)</code> would create a function in the object code.</p>\n",
    "replyID": 86882,
    "replyName": "dzaima"
  },
  {
    "id": 86882,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:34:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">wait, so now even the <code>{}</code>-args can be runtime? why even separate them at that point? ._.</p>\n",
    "replyID": 86881,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86881,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:33:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Compile-time execution being dynamically typed is nice, because the user can write one function <code>F{a,b,c} = a+(b*c)</code>. Then <code>F{1,2,3}</code> returns the compile-time constant <code>7</code>, while <code>F{x,2,y}</code> (assuming <code>x</code> and <code>y</code> are runtime values) emits code.</p>\n"
  },
  {
    "id": 86880,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:31:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The separation is needed more for the implementer. The user hopefully doesn’t have to think too much about whether things are happening at runtime or compile-time.</p>\n"
  },
  {
    "id": 86879,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:30:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So the result of an instruction like <code>x+y</code> isn’t really a “symbolic” value. The function emits an <code>add</code> instruction, but returns a handle (like SSA numbering) for this instruction so that later instructions can use its result.</p>\n"
  },
  {
    "id": 86878,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:29:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if they were completely separate layers, I’d want them to also have distinctly separate syntax</p>\n",
    "replyID": 86877,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86877,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:28:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think runtime and compile-time should be completely separate layers. Maybe I should say that the compiler executes all these <code>{}</code> functions, but some functions, as they are executed, emit instructions.</p>\n",
    "replyID": 86876,
    "replyName": "dzaima"
  },
  {
    "id": 86876,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:26:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so you really just need things to have both a is-runtime flag and is-compile-time flag with your design. (both being false <em>probably</em> being impossible)</p>\n"
  },
  {
    "id": 86875,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:23:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">wait that function is returning a type. :️|</p>\n"
  },
  {
    "id": 86874,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:22:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, potentially-compile-time is a flag on things (both functions and variables), and variables holding types wouldn’t really be variables</p>\n",
    "replyID": 86871,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86873,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:21:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But you can overload functions.</p>\n"
  },
  {
    "id": 86872,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:21:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">To be clear, compile-time names can’t be reassigned.</p>\n"
  },
  {
    "id": 86871,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:20:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s important to be able to handle numbers as well as types. And I’d say that in <code>F{n} = [n/2]i16</code>, <code>F</code> is a compile-time function.</p>\n",
    "replyID": 86870,
    "replyName": "dzaima"
  },
  {
    "id": 86870,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:19:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d rather say there aren’t compile-time variables (besides types), and value variables are processed compile-time on a best-effort basis (of course with things like <code>[variable]i32</code> requiring the variable to be compile-time-known)</p>\n",
    "replyID": 86869,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86869,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:17:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Or maybe there shouldn’t be runtime variables? The result of <code>x = y+z</code> would just be the symbolic value <code>y+z</code>.</p>\n"
  },
  {
    "id": 86868,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:16:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There’s also a difference between <code>TypeAlias = [2][4][2]u8</code>, which creates a compile-time variable but no runtime variable, and <code>x = y+z</code>, which generates code as well.</p>\n"
  },
  {
    "id": 86867,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T19:15:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I agree with those, which I guess means assignment isn’t a function. Functions should act on the runtime environment, not the compile-time one, but <code>x=y</code> creates both a runtime and a compile-time variable.</p>\n",
    "replyID": 86865,
    "replyName": "dzaima"
  },
  {
    "id": 86866,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:14:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also, unrelated, for loops should have specifiable min/max size (or something of the sort) and pointers have specified alignment, for if the calling language decides to separate short &amp; long arrays, allowing for optimizations for those (short optimizing for latency, long having best alignment &amp; padding)</p>\n"
  },
  {
    "id": 86865,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T19:10:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’d personally say functions shouldn’t act on the outer environment, and variables should be strictly lexical with special syntax &amp; handling</p>\n",
    "replyID": 86858,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86864,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:56:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">gtg for ~15 mins</p>\n"
  },
  {
    "id": 86863,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:55:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and such context-modifying functions wouldn’t be exposable to the calling language, the same problem macros have</p>\n"
  },
  {
    "id": 86862,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:53:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">actually, it’s pretty much precisely a macro</p>\n"
  },
  {
    "id": 86861,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:53:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’s pretty much a macro ¯\\_(ツ)_/¯</p>\n",
    "replyID": 86858,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86860,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:47:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I assume a b/k-like approach would be something like <code>:[name;type;value]</code> (a triadic overload of the normally dyadic assign)</p>\n",
    "replyID": 86851,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86859,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:47:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You should be able to declare types, but in things like floating point routines the type is <em>always</em> going to be <code>$f64</code> and having to write that all over the place is a waste of time.</p>\n",
    "replyID": 86856,
    "replyName": "dzaima"
  },
  {
    "id": 86858,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:45:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Hm, that’s trickier than I thought. The function should be able to act on the current environment, and also emit actions to be performed. Not sure it’s really like a function at that point.</p>\n",
    "replyID": 86854,
    "replyName": "dzaima"
  },
  {
    "id": 86857,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:41:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with vectors, types become much more important <em>and</em> confusing, and being able to track them manually gets a lot harder</p>\n"
  },
  {
    "id": 86856,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:40:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hm, I however would want to define the type on every variable definition. I went through a phase of using <code>var</code> in java, but ended up not liking it in the end</p>\n",
    "replyID": 86855,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86855,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:39:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The reason you can’t tell whether an assignment is a definition is that I don’t want to have to write the type every time I define a variable. But with an analog of <code>auto</code>, maybe this isn’t so bad. You’d have <code>?x =</code> versus <code>x =</code>.</p>\n"
  },
  {
    "id": 86854,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:39:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">“should work like a function” so functions are able to define variables on the calling function?</p>\n",
    "replyID": 86852,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86853,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:35:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Another option is to not provide an infix notation by default—use function notation like <code>let(x,...)</code> and <code>set(x,...)</code>, and leave it up to packages to define. But it would be frustrating that there’s no usable common ground.</p>\n"
  },
  {
    "id": 86852,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:34:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Assignment should work like a <em>function</em> at compile time (variable with type on the left, code on the right), so <code>let x = ...</code> would require special handling, besides making the more common case of declaration more difficult than modification.</p>\n"
  },
  {
    "id": 86851,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:32:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Regarding syntax, I’m somewhat stuck on what we should do about glyphs for assignment, comparison, and type declaration. Rust style would be <code>=</code> for assignment, <code>==</code> for comparison, <code>:</code> for types. But I want to use <code>=</code> for comparison. b does that and uses <code>:</code> for assignment, so we have a conflict. We might be able to leave out the <code>:</code> for type declaration like Go does. I don’t like <code>:</code> for assignment and would personally include a script that aliases it to <code>←</code>, but I don’t want to ever require special characters. Also there’s the problem of declaration versus modification. It would be best to have two different symbols (like <code>←↩</code>) but it’s not obvious how to choose.</p>\n"
  },
  {
    "id": 86850,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:30:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess having the language be compile-time-dynamically parsed is much more simple though</p>\n"
  },
  {
    "id": 86849,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:28:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i.e. what Java &amp; C# do, but we properly specialize</p>\n"
  },
  {
    "id": 86848,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:27:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you’d type-check each function separately once (probably generate half-evaluated/parsed versions too), and then invocations don’t need to do any checking at all, besides verifying the typeargs match</p>\n",
    "replyID": 86847,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86847,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:25:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But then you need <em>another</em> pass to type check the compile-time language. Or at least, I don’t see how you can avoid that.</p>\n",
    "replyID": 86845,
    "replyName": "dzaima"
  },
  {
    "id": 86846,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:25:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it gets verbose <em>fast</em> though</p>\n"
  },
  {
    "id": 86845,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:24:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’d of course much prefer if such things were fully specified &amp; required in the type signature</p>\n",
    "replyID": 86844,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86844,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:23:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Actually that code snippet doesn’t require <code>T</code> and <code>S</code> to even be types, but you’d get an error later if they weren’t since they appear to the right of a <code>:</code>. I guess if you want to overload the parameter to allow a number or type you’d check in the guard, like <code>{T | T is type}</code> (blatant pseudocode).</p>\n",
    "replyID": 86837,
    "replyName": "dzaima"
  },
  {
    "id": 86843,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:22:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">always nice when there’s a simple answer =P</p>\n",
    "replyID": 86842,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86842,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:21:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Don’t use it.</p>\n",
    "replyID": 86841,
    "replyName": "coltim"
  },
  {
    "id": 86841,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:20:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I never quite understood x87 and its place in the ecosystem (or if it even works any more)</p>\n",
    "replyID": 86834,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86840,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:20:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, the compile-time stuff is really dynamic. Which is why I’m calling it an “interpreter”.</p>\n",
    "replyID": 86839,
    "replyName": "dzaima"
  },
  {
    "id": 86839,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:19:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, so it’s like C++ where you definitely can’t typecheck a function without invocation</p>\n",
    "replyID": 86838,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86838,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:18:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, they don’t have to be scalar types. <code>&lt;</code> on types means “is strict subset of”, and maps over vector types by requiring that they have the same length and the inner types satisfy <code>&lt;</code>.</p>\n",
    "replyID": 86837,
    "replyName": "dzaima"
  },
  {
    "id": 86837,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:16:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the <code>{T,S | S&lt;T}</code> part in the <code>mulvv</code> definition for example. <code>T</code> and <code>S</code> are just assumed to be scalar types</p>\n",
    "replyID": 86836,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86836,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:16:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t know what typeargs means.</p>\n",
    "replyID": 86835,
    "replyName": "dzaima"
  },
  {
    "id": 86835,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:15:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is that for invocation typeargs or definition type args?</p>\n",
    "replyID": 86833,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86834,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:15:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Floats can only go in SIMD registers.</p>\n",
    "replyID": 86832,
    "replyName": "coltim"
  },
  {
    "id": 86833,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:15:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">typeargs? My current type-type:</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">data Typ\n  = Prim Quality Nat\n  | Vec  Nat Typ\n  | Ptr  Typ\n  | Func (List Typ) Typ  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 75px; min-width: 182.417px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">data</span> <span class=\"cm-keyword\">Typ</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-function cm-apl-equals\">=</span> <span class=\"cm-keyword\">Prim</span> <span class=\"cm-keyword\">Quality</span> <span class=\"cm-keyword\">Nat</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">|</span> <span class=\"cm-keyword\">Vec</span>  <span class=\"cm-keyword\">Nat</span> <span class=\"cm-keyword\">Typ</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">|</span> <span class=\"cm-keyword\">Ptr</span>  <span class=\"cm-keyword\">Typ</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">  <span class=\"cm-keyword\">|</span> <span class=\"cm-keyword\">Func</span> (<span class=\"cm-keyword\">List</span> <span class=\"cm-keyword\">Typ</span>) <span class=\"cm-keyword\">Typ</span>  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 75px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 99px;\"></div></div></div>\n",
    "replyID": 86831,
    "replyName": "dzaima"
  },
  {
    "id": 86832,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:14:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">another thing I’ve seen in generated assembly is using SSE registers for scalar float operations (so maybe the distinction between what’s in a vector register vs. general purpose one is already a bit blurry)</p>\n",
    "replyID": 86793,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86831,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:13:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">currently typeargs just assume they are scalar types. That should be somehow specifiable (we want typeargs for: any scalar type; any scalar integer type; any vector of any scalar type; different type vectors with same length; different type vectors with same total bits taken; halved or doubled width types (with or without respectively doubled or halved lengths))</p>\n",
    "replyID": 86827,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86830,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:13:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m fiddling with a little interpreter that will start off by just handling <code>{}</code> parameters, and compile-time computation and type checking. In Idris 2 because I’m tired of fighting with Haskell environment stuff.</p>\n"
  },
  {
    "id": 86829,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:10:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I will definitely take potshots at low level stuff I vaguely half-understand though =P</p>\n"
  },
  {
    "id": 86828,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:09:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ll take the middle of those and (potentially) offer more structured/less ramble-y thoughts at some point in the future, off to the side =)</p>\n"
  },
  {
    "id": 86827,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:08:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Rambling about syntactic features is entirely welcome.</p>\n",
    "replyID": 86825,
    "replyName": "coltim"
  },
  {
    "id": 86826,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:08:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’d happily rant about syntactical features too, but am not so we actually get stuff done</p>\n",
    "replyID": 86825,
    "replyName": "coltim"
  },
  {
    "id": 86825,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:07:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeh, I was hoping it was more b-like (mostly so I could ramble about syntactical features rather than being way out of my depth on actually implementing anything =P)</p>\n",
    "replyID": 86795,
    "replyName": "ngn"
  },
  {
    "id": 86824,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:05:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It should be easy to write a true SWAR library implementing operations on <code>[8]i8</code> and such with <code>i64</code>, but it’s not a priority.</p>\n"
  },
  {
    "id": 86823,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:04:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Was just going to mention that. Bitwise operations naturally work with SWAR, and if we have an inflection for undefined behavior on overflow then <code>+</code> and <code>-</code> for unsigned integers do too.</p>\n",
    "replyID": 86821,
    "replyName": "coltim"
  },
  {
    "id": 86822,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T18:04:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">probably the latter for now, with maybe some hints addable later</p>\n",
    "replyID": 86817,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86821,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T18:03:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t know how it fits in, but technically there’s also SWAR (SIMD Within A Register). I think I remember you mentioning that being especially useful for boolean ops</p>\n",
    "replyID": 86793,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86820,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:03:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, not all that similar.</p>\n",
    "replyID": 86818,
    "replyName": "ngn"
  },
  {
    "id": 86818,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T18:00:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"http://kparc.com/b/readme.txt\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">http://kparc.com/b/readme.txt</a></p>\n",
    "replyID": 86814,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86817,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T18:00:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s important for the user whether <code>[1]i32</code> means “value in SIMD register”, “value in ordinary register”, or “don’t worry about it”. The last one probably works though.</p>\n",
    "replyID": 86794,
    "replyName": "dzaima"
  },
  {
    "id": 86816,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:57:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think they should be implicit. But you should be able to get the width with (approximately) <code>#TypeOf{x}</code>. If <code>i</code> gives you the vector indices then <code>i[0]</code> gets you the first one, but it could be hard to keep the compiler from generating vector indices when you just want the scalar ones.</p>\n",
    "replyID": 86812,
    "replyName": "coltim"
  },
  {
    "id": 86815,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T17:55:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">from what i understood, b is just ±C with slightly different syntax and no precedence</p>\n"
  },
  {
    "id": 86814,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:53:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Can’t find any information about b right now, but I think it will look somewhat closer when we start adding infix versions of everything. For implementation it’s easiest to start with function syntax, but I think a symbols-are-infix rule would work work well so you could just assign say <code>! = Cast</code>. We could make k-like and BQN-like wrapper scripts.</p>\n",
    "replyID": 86795,
    "replyName": "ngn"
  },
  {
    "id": 86813,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T17:50:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(it breaks down a bit if the width of the elements themselves change)</p>\n"
  },
  {
    "id": 86812,
    "username": "coltim",
    "userID": 1820,
    "date": "2021-01-27T17:50:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I dunno if it’s helpful, but one thing I was kicking around was having separate implicit loop variables like <code>i</code> for the raw index, <code>w</code> for the vector width (# elements), and <code>n</code> as <code>i+..w</code></p>\n",
    "replyID": 86789,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86797,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T17:36:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it is pretty much a thin wrapper around assembly, just enough to make it a little portable</p>\n",
    "replyID": 86796,
    "replyName": "ngn"
  },
  {
    "id": 86796,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T17:35:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">looks a lot closer to ir</p>\n"
  },
  {
    "id": 86795,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T17:35:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">this is very far from b, btw</p>\n"
  },
  {
    "id": 86794,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T17:25:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">precisely how the compiler generates things is a separate topic. right now i was just thinking about the user-facing language stuff</p>\n",
    "replyID": 86793,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86793,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:23:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There is the question of why <code>[1]u32</code> would be stored in a normal register when <code>[2]u32</code> isn’t. I’m starting to think the compiler should decide when to use SIMD versus normal registers based on use instead of trying to specify it with the type.</p>\n"
  },
  {
    "id": 86792,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T17:22:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ok, understood</p>\n"
  },
  {
    "id": 86791,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T17:21:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yep, precisely</p>\n",
    "replyID": 86790,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86790,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:21:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Making variables in the for loop always be vectors is really helpful. It also allows the cleanup portion to use half-vectors, then quarter-vectors, and so on, which might be more efficient (the programmer should be able to select that behavior, or just scalar cleanup).</p>\n",
    "replyID": 86767,
    "replyName": "dzaima"
  },
  {
    "id": 86789,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:17:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And also a lot of the time you <em>will</em> want a vector of current indices, so we need a way to distinguish.</p>\n"
  },
  {
    "id": 86788,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:16:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">In each iteration, <code>i</code> should be the first index in the group, so it doesn’t depend on which value overflows. It’s not really obvious why <code>i</code> isn’t grouped though.</p>\n",
    "replyID": 86786,
    "replyName": "ngn"
  },
  {
    "id": 86787,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T17:16:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>*</code> wouldn’t even know anything about <code>i</code>, it’d just return whatever it was at the point of execution</p>\n",
    "replyID": 86786,
    "replyName": "ngn"
  },
  {
    "id": 86786,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T17:14:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>{return i;}</code> looks like it must detect which particular item of the 4 overflowed</p>\n",
    "replyID": 86783,
    "replyName": "dzaima"
  },
  {
    "id": 86785,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:13:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">My conception now is basically that a for loop is a transformation that turns a scalar/SIMD function into a function that works on pointers. It’s sometimes more complicated than that because you also want to do things like an early return, or carrying values through loop iterations, but maybe we can fit those into a functional view as well with a scan-like architecture.</p>\n",
    "replyID": 86779,
    "replyName": "ngn"
  },
  {
    "id": 86784,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T17:11:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You’re right, <code>_next</code> or even <code>_inctype</code> would be a better suffix.</p>\n",
    "replyID": 86770,
    "replyName": "dzaima"
  },
  {
    "id": 86783,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:58:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and indeed that’s what should be happening afaict</p>\n",
    "replyID": 86781,
    "replyName": "ngn"
  },
  {
    "id": 86782,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:52:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it is</p>\n",
    "replyID": 86779,
    "replyName": "ngn"
  },
  {
    "id": 86781,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:47:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">we don’t really care if we restart exactly from <code>i</code> or from the closest multiple of 2^something below <code>i</code></p>\n"
  },
  {
    "id": 86780,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:44:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">like, load 4 items from the left arg, 4 from the right arg, multiply them as a group, and detect overflows as a group</p>\n"
  },
  {
    "id": 86779,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:43:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">shouldn’t this be happening in groups of 4,8,16… whatever?</p>\n"
  },
  {
    "id": 86778,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:42:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>@{return i;}</code> is apparently an overflow handler</p>\n"
  },
  {
    "id": 86777,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:42:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">aha</p>\n"
  },
  {
    "id": 86776,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:42:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and <code>mulvv_over</code> of course doesn’t need to handle overflows since it’s already the overflow case)</p>\n"
  },
  {
    "id": 86775,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:41:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>mulvv</code> handles overflows by returning the number of elements processed. <code>@{return i;}</code> makes it return how far it got upon overflow</p>\n"
  },
  {
    "id": 86774,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:40:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right, just realized that…</p>\n",
    "replyID": 86773,
    "replyName": "dzaima"
  },
  {
    "id": 86773,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:40:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, <code>z</code> is the result array</p>\n"
  },
  {
    "id": 86772,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:38:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so, if i understand correctly, <code>z</code> is of length <code>n</code> and is filled with the overflow flags</p>\n"
  },
  {
    "id": 86771,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:37:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’s a version to execute when there’s overflow - e.g. it takes 2 16-bit arrays and produces a 32-bit one</p>\n"
  },
  {
    "id": 86770,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:35:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, that’d make sense. i didn’t write it originally, even renamed it to “mulvv_next” for next draft</p>\n",
    "replyID": 86769,
    "replyName": "ngn"
  },
  {
    "id": 86769,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:35:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">overflow?</p>\n"
  },
  {
    "id": 86768,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T16:33:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what does “over” mean? dyadic?</p>\n",
    "replyID": 86767,
    "replyName": "dzaima"
  },
  {
    "id": 86767,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T16:13:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0nZDBaoQwEIbvPsV/KiqBpVfTLYU@gAe9lVLi7tiKmrQxGqsVelz6ED32wfZJOrJQutc9hEn4J8M3X9s3wzDnIsMHspt8CXWSVRMJTEmcC/gkzgRGvkdIsCbYYg4A1TtTGovQc8zdEhWcgY4wY7OBFyOU3mOCNh4F7UxLGGjnjO1gSvS65kALFL0DvfWqQUP62b0IvJquq4rmHfuqLMmSdvzfeSKNypFVrjK6Q6hqhfp4@Lo@fv4cD9@SUR/qx0wyLNdc8gJrjZgVjLHFverczAv6CPHdbMn1lifKBaPknoWPDpYgaFchT2Ygu1oR6ckLrpDenttJL7NzzpOeeP4eY/QP5hc#JS\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">draft</a></p>\n"
  },
  {
    "id": 86766,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T15:57:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">grouping would also break auto-scalarization (you’d always process at least 2 items), so that should be a separate thing from <code>for_scal</code> anyways</p>\n",
    "replyID": 86765,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86765,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T15:52:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The issue is that sometimes you’d want to use multiple registers for some arguments, like when comparing <code>i8</code> to <code>i32</code> which allows you to saturate the <code>i32</code>s to <code>i16</code> and pack two registers together. Maybe the grouping could be an optional parameter.</p>\n",
    "replyID": 86764,
    "replyName": "dzaima"
  },
  {
    "id": 86764,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T15:49:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no, as in the <code>n:Size</code> argument is a count, and <code>for_scal</code> iterates over that many elements from all args, and doesn’t need any type argument</p>\n",
    "replyID": 86763,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86763,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T15:48:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It could use a count instead. I think passing in the type is more convenient. If it took a count you’d nearly always write <code>for_scal{#$T}</code> anyway.</p>\n",
    "replyID": 86762,
    "replyName": "dzaima"
  },
  {
    "id": 86762,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T15:45:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">why does <code>for_scal</code> need a type argument? i’d imagine <code>n</code> is a count, not array size in bytes</p>\n",
    "replyID": 86732,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86761,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T14:51:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ah, ok</p>\n",
    "replyID": 86759,
    "replyName": "dzaima"
  },
  {
    "id": 86760,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T14:51:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if yes, how will it interact with the memory management of the higher-level language?</p>\n"
  },
  {
    "id": 86759,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-27T14:51:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no - “Type checking, dispatching, and allocation are out of scope”</p>\n",
    "replyID": 86758,
    "replyName": "ngn"
  },
  {
    "id": 86758,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T14:48:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">will the language have a concept of memory management and refcounting? early draft [0] uses <code>allocate()</code></p>\n",
    "replyID": 86737,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86757,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-27T14:19:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">any name you guys come up with is fine by me</p>\n"
  },
  {
    "id": 86737,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-27T01:05:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I motion we name this language singeli, after an awesome and ridiculously fast kind of music that sounds a lot like “single instruction”.</p>\n"
  },
  {
    "id": 86736,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T23:36:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">reverted to the original now</p>\n"
  },
  {
    "id": 86735,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T23:35:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Great. Have to refresh to see it but that’s not too bad if we float things here before making changes.</p>\n"
  },
  {
    "id": 86734,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T23:34:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">&lt;- yes 😃</p>\n",
    "replyID": 86733,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86733,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T23:31:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We’re now a discussion post (thanks Jack!) so I’ve split up the topics. Can everyone edit those?</p>\n"
  },
  {
    "id": 86732,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T23:17:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0jc5BCoMwEAXQfU7xV0VDThBqKfQAWSR7kWIhoBGiRjHN3Tup0NJ200VgMvNneP3chRCN0LhDH00qnNR2awU2yY3AIrkWWKkuIZEnqBAZcBt8PV6bLpqEhRK0gCG0HhbWwT0zoF6FSzNOlCqWEvwcfTvN3sEmrJRI9BxLjPWZUecD2SLUrsEB6vRpUv@Y1Jfph6N2zuuzlm/MAw%23C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Revised version</a> that reflects new ideas. I’d still like to simplify the for loop syntax, and <code>return</code> could be problematic. <code>Cast</code> would have an ASCII operator, probably.</p>\n"
  },
  {
    "id": 86731,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T22:31:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It takes a length parameter as well, but computations on the length have to be symbolic.</p>\n"
  },
  {
    "id": 86730,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T22:30:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For will probably have fancy syntax, but it should basically just be a function, and then the scalar-cleanup version of For would do something like (not actual syntax) <code>ForScal{Fn{T}(...)} = { For{Fn{$T}(...)}; For{Fn{T}(...)} }</code></p>\n"
  },
  {
    "id": 86729,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T22:30:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the length could be a static property for the time being, but in the RISC-V future it could “just” become dynamic if needed (but we can of course not worry about this for now)</p>\n"
  },
  {
    "id": 86728,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T22:28:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s good.</p>\n",
    "replyID": 86727,
    "replyName": "dzaima"
  },
  {
    "id": 86727,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T22:27:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">one option would be that functions could be polymorphic in length, and the loop can specialize-inline the function on different lengths as needed, including <code>[1]T</code> which would be done with scalar ops</p>\n"
  },
  {
    "id": 86726,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T22:26:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, but I don’t know if all the details work out. Arithmetic functions should be pervasive, allowing them to work on scalars or vectors.</p>\n",
    "replyID": 86725,
    "replyName": "dzaima"
  },
  {
    "id": 86725,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T22:25:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>*:</code> there is both a scalar and vector function, and <code>w</code> and <code>x</code> in the loop aren’t actually always of type <code>$T</code>?</p>\n",
    "replyID": 86724,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86724,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T22:23:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I was thinking it would use a looping method that doesn’t allow any after-end elements, such as a scalar loop to clean up. I don’t have a good solution to this in general.</p>\n",
    "replyID": 86723,
    "replyName": "dzaima"
  },
  {
    "id": 86723,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T22:03:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">draft 2, how does <code>*:</code> know to not mark overflow on the after-end elements?</p>\n",
    "replyID": 86508,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86722,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:55:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added types of overflow handling. I think if overflow is possible then diverting on overflow is what you usually want, and sometimes it can be computed faster than getting all the high halves in the right position.</p>\n"
  },
  {
    "id": 86721,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T21:49:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m not super familiar with it, but I think <a href=\"https://github.com/vectorclass/version2\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Agner Fog’s vector class library</a> is interesting</p>\n"
  },
  {
    "id": 86720,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:48:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The instruction would be chosen based on type, so if you have <code>x:[4]f64</code> you can write <code>Permute{2,1,2,0}(x)</code> to shuffle. I think the user <em>should</em> have the ability to choose exactly what instructions to use, but there should also be optional extensions that fill in gaps.</p>\n",
    "replyID": 86719,
    "replyName": "coltim"
  },
  {
    "id": 86719,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T21:44:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hmm. could some of this be hidden/abstracted? like there’s <code>_mm256_permute4x64_pd</code> (AVX2) which can lane-cross, versus <code>_mm256_permute_pd</code> (AVX) which operates in-lane (not to mention the potential/complexity of using e.g. a float shuffle on integer data)</p>\n",
    "replyID": 86716,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86718,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:38:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, you’d want not only an index type but a difference type, where the extra copies are the same and don’t increase by 1.</p>\n"
  },
  {
    "id": 86717,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:37:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But it would be better if you could define it yourself with <code>$[2]i8</code> and so on of course.</p>\n"
  },
  {
    "id": 86716,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:36:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Index types are weird. Most permutes have the permutation hard-coded in the instruction, so that would be a few compile-time values and we don’t have to worry about their width. 64-bit permutevar uses 64-bit indices in <code>[0,2)</code> and shuffles within lanes; 32-bit permutevar uses 32-bit indices in <code>[0,8)</code> and goes across lanes. Gathers have 32 or 64 bits for both input and output; if one of those is smaller then it uses a half-register. Shuffle always uses one-byte indices and values, but you might want to use it for larger values, which you can do with a transformation like <code>2,1,0,3</code> into <code>4,5, 2,3 0,1, 6,7</code>. Maybe we want types <code>s16</code>/<code>s32</code>/<code>s64</code> to represent that encoding of indices?</p>\n"
  },
  {
    "id": 86715,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T21:26:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">at least the delays obviate some of the complications from all the subsets of AVX512. and in theory rocket lake (coming soon™) will support at least AVX512F</p>\n",
    "replyID": 86692,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86714,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T21:23:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">not to mention the few year gap between AVX and AVX2 (with integer ops (w/ shifts) and gather only appearing in the latter…)</p>\n",
    "replyID": 86713,
    "replyName": "dzaima"
  },
  {
    "id": 86713,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T21:20:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ok yeah avx is horrible</p>\n"
  },
  {
    "id": 86711,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:05:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For anyone who hasn’t seen it, the <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Intel Intrinsics Guide</a> is what I usually use to look up instructions. Not pretty but it’s searchable.</p>\n"
  },
  {
    "id": 86710,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:04:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It means leave the bits the same but treat it as a different type. There’s no generated code.</p>\n",
    "replyID": 86709,
    "replyName": "coltim"
  },
  {
    "id": 86709,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T21:03:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is “reinterpret” converting between signed/unsigned and integer/float?</p>\n",
    "replyID": 86706,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86708,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:02:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Something like <code>Truncate{[4]i32}(x)</code> with <code>x:[4]f64</code> would be the verbose option.</p>\n"
  },
  {
    "id": 86707,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:00:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think we should abandon the idea of a single preferred “cast” operation, and instead have a few functions that take a type and a value. No idea what those should look like really.</p>\n"
  },
  {
    "id": 86706,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T21:00:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Reload to see notes on type conversions. There are a lot of them.</p>\n"
  },
  {
    "id": 86705,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T20:57:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(I think SIMD stuff is inscrutable enough that over-explaining stuff helps. not sure I’ve actually really been in a discussion with anyone actually familiar with x86 SIMD before!)</p>\n"
  },
  {
    "id": 86704,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T20:55:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">heh, feels like I got a bit tripped up and just committed to it</p>\n",
    "replyID": 86703,
    "replyName": "ngn"
  },
  {
    "id": 86703,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T20:54:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">a trailing “-e” to verbe the noun “alias”, lol 😃</p>\n"
  },
  {
    "id": 86702,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T20:53:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Fortran has an advantage over C here because I think it assumes that pointers can’t alias-e</p>\n"
  },
  {
    "id": 86701,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:53:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but we’re not using/relying on auto-vectorization here</p>\n",
    "replyID": 86699,
    "replyName": "coltim"
  },
  {
    "id": 86700,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:53:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I <em>know</em> that.</p>\n",
    "replyID": 86699,
    "replyName": "coltim"
  },
  {
    "id": 86699,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T20:53:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think a decent chunk of compiler auto-vectorization can fail because of the potential for pointer aliasing</p>\n"
  },
  {
    "id": 86698,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:52:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, that’s right. You can permute 2x128, 4x64, or 8x32, looks like.</p>\n",
    "replyID": 86691,
    "replyName": "coltim"
  },
  {
    "id": 86697,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:52:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">given that we already work on vectors at a time, a compiler can’t really use that info for much</p>\n",
    "replyID": 86695,
    "replyName": "ngn"
  },
  {
    "id": 86696,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:51:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No; it should just perform the loads and stores you tell it to.</p>\n",
    "replyID": 86695,
    "replyName": "ngn"
  },
  {
    "id": 86695,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T20:51:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">should this language have something like c’s <code>restrict</code> keyword?</p>\n"
  },
  {
    "id": 86694,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:50:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">of course</p>\n",
    "replyID": 86693,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86693,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:50:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Assuming it doesn’t carry values over between iterations. For example, Indices/Compress algorithms won’t port that way.</p>\n",
    "replyID": 86690,
    "replyName": "dzaima"
  },
  {
    "id": 86692,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:49:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">AVX512 completely fixes this by having actually sane instructions and also an extension to that allows these to be used on 256-bit registers, but also could <em>never</em> be widely available.</p>\n"
  },
  {
    "id": 86691,
    "username": "coltim",
    "userID": 1816,
    "date": "2021-01-26T20:48:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">there are some lane-crossing shuffles/permutes, and some algorithms rely on being able to manipulate the entire register (e.g. pack-left/compress)</p>\n",
    "replyID": 86687,
    "replyName": "dzaima"
  },
  {
    "id": 86690,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:48:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so, if you have a function that works on SSE, just do <code>avxify(it)</code> and it magically upgrades all types to <code>[2][…]T</code> versions ¯\\_(ツ)_/¯</p>\n"
  },
  {
    "id": 86689,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:47:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 86688,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:47:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Fairly sure there isn’t. When you broadcast a scalar it fills both lanes of course, but I think that still fits the model.</p>\n",
    "replyID": 86687,
    "replyName": "dzaima"
  },
  {
    "id": 86687,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:45:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, that’s annoying. is there any case when it’s wrong to think of it as just 2 256-bit registers done in parallel?</p>\n",
    "replyID": 86684,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86686,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T20:38:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">thanks!</p>\n"
  },
  {
    "id": 86685,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:37:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Same for byte shifts. Each lane is shifted separately. The overflow from the “upstream” lane is lost and doesn’t go to the other.</p>\n"
  },
  {
    "id": 86684,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:37:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">An AVX register is like two loosely-coupled SSE registers (lanes), not a single register that’s twice as big. When you do a shuffle, indices still go from 0 to &lt;16, and an index in one lane can only select a value in the same lane.</p>\n",
    "replyID": 86682,
    "replyName": "ngn"
  },
  {
    "id": 86683,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:35:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Hmm, we’ll already want to do broadcasting to match <code>i32</code> up with <code>[4]i32</code>, so matching <code>[2][4]i32</code> with <code>[4]i32</code> is hardly any extra functionality (but note that it’s basically trailing axis agreement, so not like APL). Broadcasting is a little tricky because the language has to keep track of a broadcasted copy to be efficient, which takes the object code further from source.</p>\n"
  },
  {
    "id": 86682,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-26T20:34:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">can someone explain “lanes” to me in simple words?</p>\n"
  },
  {
    "id": 86681,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T20:26:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well in the worst case we just have to include some extra code to implement lane-crossing operations the “right” way. AVX registers work more like say <code>[2][4]i32</code> than <code>[8]i32</code>, so we might want to allow programmers to access the first kind. Or we might want to define an AVX register to be 16 bytes except you can process them in groups of two.</p>\n",
    "replyID": 86680,
    "replyName": "dzaima"
  },
  {
    "id": 86680,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T20:19:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">my thinking usually is to target the simplest thing, but design with the hardest in mind. If what AVX does is somehow incompatible with things we’ve discussed, imo it’s very much worth redesigning. Otherwise we’ll end up writing a separate language per architecture, which wouldn’t be nice…</p>\n",
    "replyID": 86647,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86658,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T18:47:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, let’s change this to “discussion” then.</p>\n",
    "replyID": 86656,
    "replyName": "Jack Douglas"
  },
  {
    "id": 86657,
    "username": "Jack Douglas",
    "userID": 2,
    "date": "2021-01-26T18:45:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">@Adám that’s really clever</p>\n",
    "replyID": 86635,
    "replyName": "Adám"
  },
  {
    "id": 86656,
    "username": "Jack Douglas",
    "userID": 2,
    "date": "2021-01-26T18:45:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">‘Wiki’ here means ‘no answers’, so if you want answers we do need a new post type — and it looks to me like we should call it ‘discussion’.</p>\n",
    "replyID": 86640,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86651,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T18:09:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The interpreter’s types are types, numbers (high-precision (like 64 bits) integers, probably), functions, and compile-time values. It’s dynamically-typed so functions just take in stuff and output a thing. I think there’s no reason for interpreter variables to be mutable. <code>i=0</code>, or whatever syntax we use, defines a variable both for the interpreter and in the compiled code, but <code>i+=1</code> only affects <code>i</code> at runtime.</p>\n"
  },
  {
    "id": 86650,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T18:02:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Expressions like <code>[2*#$u64]i16</code> are purely interpreted, since the result is a type. For actual computation, say <code>a = b+c</code>, the interpreter does the type computation and also creates IR code.</p>\n"
  },
  {
    "id": 86649,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T18:00:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We probably need to discuss the compile-time/runtime distinction. My thinking is that the compile-time is basically a simple interpreted language. Function calls use <code>{params…}</code>. Maybe the result is a <code>()</code> function and contains loops, but that doesn’t change the interpreter’s control flow.</p>\n"
  },
  {
    "id": 86648,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T17:55:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>[#$f32]u1</code> is a lot more flexible though. I think I would end up using variations like <code>[#$i32]i8</code> a fair amount. And you should be able to define <code>Mask{T} = [#$T]u1</code> anyway.</p>\n",
    "replyID": 86638,
    "replyName": "dzaima"
  },
  {
    "id": 86647,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T17:53:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think dealing with variable widths is just too much complication for now. In x86 every instruction has a known width, so let’s get that working first. I’d actually start by targetting just SSE since the fact that AVX does everything in lanes makes things more difficult.</p>\n",
    "replyID": 86638,
    "replyName": "dzaima"
  },
  {
    "id": 86640,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T13:12:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Couldn’t Wiki posts serve that purpose? I don’t really know what the intended use case is, but it seems like it would be helpful to allow answers but call them “subtopics” or something. Ideally they could be ordered by editors instead of using votes.</p>\n",
    "replyID": 86628,
    "replyName": "Jack Douglas"
  },
  {
    "id": 86639,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T10:18:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess some example draft for some function taking advantage of fixed width would be nice</p>\n"
  },
  {
    "id": 86638,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T10:08:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think it’d be reasonable to have 2 separate styles of vector operations - one for fixed-width stuff (<code>[length]type</code>), and one for generic vector processing, which would only know the length at runtime (<code>$type</code> or something else if you want that to be the shortcut for a max-size fixed-width vector) and be suitable for auto-masking or length limiting. (and <code>$f32.M</code> is shorter than <code>[#$f32]u1</code> so)</p>\n",
    "replyID": 86580,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86637,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T09:57:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the reason they were in my draft 0 is because it was adapted from the 2.5 month old thing i specifically made for dzaima/BQN</p>\n",
    "replyID": 86591,
    "replyName": "ngn"
  },
  {
    "id": 86636,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-26T09:55:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">vector register size is guaranteed to be a power of 2, ≥128, so worst-case it’s just the x86 situation where you can have different versions of things for 128bit, 256bit, 512bit, etc. Just that now if 1024bit appears, all you have to do is add 1024 to the list of widths to generate for, if you want to utilize the extra length. Register grouping is a bit more complicated, but the current spec says that grouping of sizes 2, 4, and 8 must be supported so it shouldn’t be much of a problem</p>\n",
    "replyID": 86547,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86635,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-26T08:50:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Workaround: add a VS15 to your chat language bar, then click that immediately when you see an emoji forming from something you wrote: :)︎</p>\n",
    "replyID": 86535,
    "replyName": "dzaima"
  },
  {
    "id": 86630,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-26T08:26:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes we do; and I think it should have the exact same rules as Question. Btw, Marshall is in the US, so it’ll be a while before he is online.</p>\n",
    "replyID": 86628,
    "replyName": "Jack Douglas"
  },
  {
    "id": 86628,
    "username": "Jack Douglas",
    "userID": 2,
    "date": "2021-01-26T08:02:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">@Marshall do you need a ‘discussion’ type post iin this community? A new post type can have it’s own rules about voting, editing and whether answers are allowed.</p>\n",
    "replyID": 86511,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86595,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-26T00:00:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Being able to select from multiple registers is really nice, so we should probably plan to support it eventually.</p>\n",
    "replyID": 86588,
    "replyName": "ngn"
  },
  {
    "id": 86594,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:58:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Powers of two are all right, but I don’t like using letters to indicate sizes at all. I would go with “i32” etc. because they are pretty widely used now. It should allow assigning types though, and you’ll mainly only have to write them in prototypes because of type inference, so this isn’t so much of an issue.</p>\n",
    "replyID": 86590,
    "replyName": "ngn"
  },
  {
    "id": 86592,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:44:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(but if it ends up faster than my c code, i would put up with any notation)</p>\n"
  },
  {
    "id": 86591,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:43:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>w</code> <code>x</code>? - please… <code>x</code> <code>y</code> like a good mathematician 😃</p>\n"
  },
  {
    "id": 86590,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:38:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">another option: <code>i3 i4 i5 i6 .. u0 f5 f6</code> (powers of 2)</p>\n"
  },
  {
    "id": 86589,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:37:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what do you think of shorter naming schemes for the types? the jvm uses <code>BSIJ Z FD</code>. k uses <code>GHIJ B EF</code>. i use <code>CHIL _ _D</code> (no u1,f32 yet). the unsigned versions could be prepended a <code>U</code>.</p>\n",
    "replyID": 86582,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86588,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:28:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">when you say “fixed-size list of <code>T</code>, passed in register<strong>s</strong>”, do you mean it can span over more than one register?</p>\n",
    "replyID": 86582,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86584,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:08:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">1am for me though, i’ll go sleep now</p>\n"
  },
  {
    "id": 86583,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:08:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">SIMD vs normal register could be a hint of sorts. In a future with 1024-bit vectors, you wouldn’t be able to fit it in a 64-bit register anyways, and RISC-V does masks in regular vector registers already</p>\n"
  },
  {
    "id": 86582,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:06:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Be back after dinner.</p>\n"
  },
  {
    "id": 86581,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:05:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Still have the SIMD/normal register issue, which I guess we could fix with more symbols but I’d rather find something nicer.</p>\n"
  },
  {
    "id": 86580,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:05:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I also think <code>[#$f32]u1</code> for a boolean vector with the same length as a SIMD register of floats is all right. Very symbol-heavy, but you should be able to just define <code>M = [#$f32]u1</code> so it’s not a big issue.</p>\n"
  },
  {
    "id": 86579,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:05:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh nooooo no self-replies on TA D:</p>\n"
  },
  {
    "id": 86578,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:04:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yep</p>\n",
    "replyID": 86577,
    "replyName": "ngn"
  },
  {
    "id": 86577,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:04:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you took the other types from the jvm? 😃</p>\n"
  },
  {
    "id": 86576,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:03:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh right, my <code>A</code>/<code>W</code>/<code>C</code> was only for the dispatcher, which <em>should</em> care about the specific types. vector language obviously shouldn’t care about chars vs ints</p>\n"
  },
  {
    "id": 86575,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:02:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, that makes sense</p>\n",
    "replyID": 86571,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86574,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:02:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah, good point</p>\n",
    "replyID": 86571,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86573,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:02:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But if we can agree on using <code>$u16</code> or similar instead of <code>W</code> then we don’t really have to worry about this.</p>\n"
  },
  {
    "id": 86572,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:01:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s what i thought too, but <code>char</code> is traditionally 8bit. doesn’t matter much.</p>\n",
    "replyID": 86570,
    "replyName": "dzaima"
  },
  {
    "id": 86571,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T23:01:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think we should just have unsigned integers, as there’s nothing particularly character-like about them.</p>\n",
    "replyID": 86568,
    "replyName": "ngn"
  },
  {
    "id": 86570,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:01:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">last is just <strong>c</strong>har; they’re just random things i came up with an hour before posting draft 0</p>\n",
    "replyID": 86568,
    "replyName": "ngn"
  },
  {
    "id": 86569,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T23:00:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess it makes sense as a queue where <code>t: [10][5]T</code> becomes <code>t[9]: [5]T</code></p>\n",
    "replyID": 86563,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86568,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T23:00:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">why are char types <code>A W C</code>? “ascii”, “wide”, …?</p>\n"
  },
  {
    "id": 86567,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:57:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">+1 for not copying c</p>\n"
  },
  {
    "id": 86566,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:53:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If types can be passed around like parameters, then splitting up the type for declarations is really confusing, since you can’t always do it.</p>\n",
    "replyID": 86560,
    "replyName": "ngn"
  },
  {
    "id": 86565,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:48:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think of it like a function type <code>10-&gt;5-&gt;T</code>.</p>\n",
    "replyID": 86564,
    "replyName": "dzaima"
  },
  {
    "id": 86564,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:47:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">god that hurts my brain</p>\n",
    "replyID": 86563,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86563,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:46:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The first one. So it’s <code>[10]([5]T)</code>.</p>\n",
    "replyID": 86561,
    "replyName": "dzaima"
  },
  {
    "id": 86562,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:45:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I wonder if operators that act on types should actually <em>be</em> APL-ish monads? We could change <code>[n]T</code> to <code>n/T</code>, and you could get the number of a type that fit in a vector register with <code>#$T</code>.</p>\n"
  },
  {
    "id": 86561,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:45:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is <code>t: [10][5]T</code> <code>10⍴⊂5⍴⊂x</code> or <code>5⍴⊂10⍴⊂x</code>?</p>\n",
    "replyID": 86557,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86560,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:45:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but in c you can write <code>T x[5]</code></p>\n",
    "replyID": 86557,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86558,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:33:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">thanks</p>\n",
    "replyID": 86555,
    "replyName": "Adám"
  },
  {
    "id": 86557,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:32:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The issue I have with C-style types is that for example the variable declared <code>T[5] x</code> is indexed with <code>x[i]</code>, which is out of order. <code>x: [5]T</code> keeps the variable and indices straight.</p>\n",
    "replyID": 86534,
    "replyName": "dzaima"
  },
  {
    "id": 86555,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-25T22:29:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">flag and comment.</p>\n",
    "replyID": 86552,
    "replyName": "ngn"
  },
  {
    "id": 86554,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:26:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">well, more reason for the dynamically generated code approach ¯\\_(ツ)_/¯</p>\n"
  },
  {
    "id": 86553,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:24:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">couldn’t you still define that fixed size at runtime? (i guess there would be overhead for that though)</p>\n",
    "replyID": 86550,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86552,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:23:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how do i delete a question?</p>\n"
  },
  {
    "id": 86551,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-25T22:23:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Normal question and Meta, per <a href=\"https://topanswers.xyz/meta?q=532#a636\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://topanswers.xyz/meta?q=532#a636</a></p>\n",
    "replyID": 86545,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86550,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:23:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For example, hash tables with a fixed bucket/probe size wouldn’t work.</p>\n",
    "replyID": 86548,
    "replyName": "dzaima"
  },
  {
    "id": 86549,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:22:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m fine with less dots if there’s good syntax for it. but dots are a good placeholder</p>\n",
    "replyID": 86544,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86548,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:21:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what else would you want?</p>\n",
    "replyID": 86547,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86547,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:21:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ve been worried about that architecture as I don’t see how you could use it for anything other than just operations on plain vectors.</p>\n",
    "replyID": 86546,
    "replyName": "dzaima"
  },
  {
    "id": 86546,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:18:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">at least ~3 months ago (or maybe more, idk) RISC-V was planned to have things like no hard-defined vector register size (each processor gives as much as it can), at runtime truncating the registers for easy computation of vector ends, and maybe something something merging multiple registers together in giga-registers for Superpowers if you don’t need all 32 registers</p>\n"
  },
  {
    "id": 86545,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:17:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Which post types allow sub-posts? Is there any documentation on the differences between types?</p>\n",
    "replyID": 86540,
    "replyName": "Adám"
  },
  {
    "id": 86544,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:16:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d rather use an APL-like syntax instead of dots everywhere.</p>\n",
    "replyID": 86542,
    "replyName": "dzaima"
  },
  {
    "id": 86543,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:15:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Compile-time constant, not hard-coded. There needs to be a way to compute the number of a type that will fit in a vector register but I don’t think that’s a problem.</p>\n",
    "replyID": 86541,
    "replyName": "dzaima"
  },
  {
    "id": 86542,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:14:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if there’s a <code>$i16</code> type, there should be a corresponding mask type imo - in my syntax that’d be <code>$i16.M</code></p>\n"
  },
  {
    "id": 86541,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:13:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s assuming fixed-width (and hard-coded!) vector register size</p>\n",
    "replyID": 86537,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86540,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-25T22:12:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m not, just flag (it isn’t severe like on SE) and comment for the mod.</p>\n",
    "replyID": 86538,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86538,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:11:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Might I ask if you’re a mod?</p>\n",
    "replyID": 86536,
    "replyName": "Adám"
  },
  {
    "id": 86537,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:10:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m thinking you’d just write <code>[4]u1</code> or something like that, but it’s not obvious how <code>[64]u1</code> would be stored.</p>\n",
    "replyID": 86532,
    "replyName": "dzaima"
  },
  {
    "id": 86536,
    "username": "Adám",
    "userID": 811,
    "date": "2021-01-25T22:10:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can ask mods to change post type.</p>\n",
    "replyID": 86511,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86535,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:10:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(can i pls disable auto emojis …)</p>\n"
  },
  {
    "id": 86534,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:09:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i personally absolutely hate <code>name: Type</code> <code>:)</code></p>\n",
    "replyID": 86533,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86533,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:08:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We’re all okay with types coming after values and type operations being prefixes, right? I find C/Java style types too confusing.</p>\n"
  },
  {
    "id": 86532,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:07:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i think there should be some separate boolean vector/mask type, one per element size</p>\n"
  },
  {
    "id": 86531,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:06:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think we want to get into AVX512 and mask registers yet.</p>\n"
  },
  {
    "id": 86530,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:05:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Actually, having the language handle shifts for you would be a really nice benefit. Dyalog only does unaligned boolean moves 8 bytes at a time because shifting vector registers is too annoying.</p>\n"
  },
  {
    "id": 86529,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:05:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the biggest mask (that isn’t just a bool for each bool or something) you can currently have is <code>512÷8</code> bits - AVX-512 8-bit ints</p>\n",
    "replyID": 86526,
    "replyName": "ngn"
  },
  {
    "id": 86528,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:04:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes, so you should still be able to do <code>$u1</code> and have that go in a SIMD register.</p>\n"
  },
  {
    "id": 86527,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:03:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">xor at least</p>\n"
  },
  {
    "id": 86526,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:03:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">can’t booleans benefit from simd?</p>\n",
    "replyID": 86524,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86525,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:03:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">to clarify on my draft 0: that dispatcher syntax is a completely separate thing, unrelated to the actual vector language.</p>\n",
    "replyID": 86508,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86524,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T22:02:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Do we want a way to distinguish between value lists held in SIMD registers and normal ones? Booleans should usually go in normal registers, but maybe they’re the only type that does that.</p>\n"
  },
  {
    "id": 86521,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T22:00:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">thanks</p>\n"
  },
  {
    "id": 86520,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T22:00:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">top left*?</p>\n"
  },
  {
    "id": 86519,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T21:59:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You can click on the Dyalog logo at the top left to get to TopAnswers APL.</p>\n"
  },
  {
    "id": 86517,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T21:59:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I see it.</p>\n"
  },
  {
    "id": 86516,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T21:59:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://topanswers.xyz/apl?q=1624\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>?</p>\n"
  },
  {
    "id": 86515,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T21:58:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i asked a test question but i don’t see it. any idea where it should have appeared?</p>\n"
  },
  {
    "id": 86514,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T21:58:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i guess now there’s a good reason to finish SE-chat-dark-ifying TAs chat design</p>\n"
  },
  {
    "id": 86513,
    "username": "dzaima",
    "userID": 1178,
    "date": "2021-01-25T21:57:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah, TA creates a chatroom per post, and this is one such post, and were in its chatroom</p>\n"
  },
  {
    "id": 86512,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T21:55:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is the “wiki post” the thing on the left?</p>\n",
    "replyID": 86511,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 86511,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T21:55:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Looks like I can’t add an answer to a Wiki post? That’s annoying. I was hoping to have a few answers with different aspects of the design.</p>\n"
  },
  {
    "id": 86510,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T21:49:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n"
  },
  {
    "id": 86509,
    "username": "ngn",
    "userID": 1009,
    "date": "2021-01-25T21:49:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">.</p>\n"
  },
  {
    "id": 86508,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2021-01-25T21:49:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Drafts: <a href=\"https://dzaima.github.io/paste/#0dVbNbuM2EL77KWYvWymQZWQbBIs6yaJpLhugCxQBWsA3WqQsOrLokpQt7TY99gF66QP1Tfok/YaUtE6CDRyHQw6/@ftmmL2yB@G0aUhqtxe@qJQl3@@V@2HGf0j4HR1UMaO19hR@VjQj0u@jcAtBn19G4YGF79/hFMJHFi4viLYQ7mmxINPUPemSdOMdiUZSWRvBS6vIqb2wwitKdK5yaoyn218@pTMqGUIC4o7NFoPZHyEUo9nfWGCzBYSfWO0MiwN@f53NZjAsVakb7TlKU5KvFO3a2ut9rQsRdvdW73B@ULMvuJ1ImZFV7vrL8ax7Stn1QjhFx0o1tDa@gsebwe1C1MKSNO26Vm7JPs@d72sVVWDtGCLtMkJiFW8MV0JyERzbu7vLOMcn9iB5Y/VnJQfs4MFyRAu2ow4c3WjnlXUZ7YR71M2GsHuskMwDaqkdVbhTA0m03uwQMByoe7ar9RAnm0Th/v0HXzNOKRfO0jXsYZWfUbcMKmENxCGGy4s5s@J5MuP9khJLb67J5oBMKVg4iJolDgVV94ZNLlEOAOIjqBafewIBi0cqEQIzxVOpoasbGj0jeOxb21C7Z5zEpsG1k5CXpOVjkMj1jRcducq0tYyWKoEqM8xT@A7@MYBtnZ/X@lGN@DXQkdF@rT5A8ynlhG23L4nBieLS5PQJxODkI67oGlZ85/7@ZXFRI8lMEE1j@nCFfUVReFNKuruj7Zbu70OV1e@tqDNat55UBTx8Rj6WIehXnAw3yIE86NIFmnMRc5fc3mb08JDRx48ZGK9i2bHg7KtOFa0HSUxTgKYNOS@sb/chScxV9BAdcwQV0s2rDfrFRR4zz5eIwJnBOpLQQYU5/wzB5yB0QMAiAoiRyAHpqBFKpLwkVaudanyMJWHwfJPT@w4V@@@vv@miu7xIIzyZHdjqcyNlEgnBvcB@YWfECf04mUvYuWzSq80R3VKJugxqwRkJKJ5EruUklUHXjWxao8e/ji3WH1xR7MqfZhfcACGbcC8e5g5Ch/NzurqCeNTSV/PzmBFHG8WNUU1zZUzAgP40MIm1G0NF3Qa3pg5qetoYI0/YwqPTHGEvOdJbMus0n7JvFeawsqg/bH4z7SMG@5x0E8a4zTMC@GdQGPfUZE6xKt3c3IyBTioT2rdVGFkxshqQeaQgwsTYm2vO4R@wfjXHKk3HWXAyBCIJQMNGdZ72obgo6zseJY8ZH/DDAgET@xm8muDVS3iMlTT6YmxeQQPKJ2VMsceprWh@mtyYWxDr8Dq1YarEjsZY8aF99Y5HqfZ4K8O7hVvrfnCBh4UAhdqiQmDoKMmRWCUgi0kd4fOLnlF4HYoWEu4hQLEPUxpFjjaZMCDUHL9xoryyDVLhzQgK/PCwMm/g6ShDZ4gaxuXkaQrqWSPk6CtTmfUHczwfitA8rwzRSi9W28VKLvRqsV0t5Gr2FN7uCvTSLnKcRyTfDDlEoG9JFL7l1@zrfy/yAyYxXgAl3vD1n3mA8zsS7YZ2DJ0r@0bs4lOItmsUd7Ekh2Ihl6FksGG1cienSP2Q9dB1wn/H44tbLhj8Hw%23C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">0</a>, <a href=\"https://dzaima.github.io/paste/#0lVTNbuM2EL77KWYvhbxwZKQNgqJKnEvaF1jfih4ocWwRK5EGSUtKt@mxD9DLPtC@SZ@k31A/TbIJFgVkSxwOZ7755htut6S8Vw9fPqfXylxe//obtefm8lqpbFz1Gxo/hg39crZVNM6Ssz977/yaPq1o2vZ0S6ppXKUiZzg0rAvabil6w4GiI8/nwGQO@DhU7mxjSO49mbghF2v2vYHDHCIgMJ6D85T1Ff1EfUGDvIeCvLz9GttEHVcRPp8kV1Ure5RsNdOxcaVqqFXho7FHqpyNPEQBIjBUwI59AJajCZF9EItl1qxTVJIct8JE1yE9qsFvLjrVZSwQmxiWDCECdQF7YyxrCnxSHpbmIdUweymrybp5mXI9pv9QqUZNdYCkaYmCdCPn3IHY6kAmUMkRiFGksikOko0khA2MJvlgy51SpyS58FG59mQaOZcYeFGlMV9XOYF7XK22i0wmWJmUAUjoo089C25CPClp/UxK4ZmU/p@QEg5sdDR02Bjy0julKxVi8VIeoyoWRaxea2P3vMDHhffVa3S8cJ64mCudyQALjR5JKJl6qCKypSNbCAQukwJEbsH8zhQfTryh8hyp5ToRNdIUEk3fJun6KlHUvx8SNQfKPL27JTm8hs/knCXInuPZW/LFBD1ye2rAa0I0EvXl8/he3ex3tJ@42guMgcq3QEgNmg@0z@/pvqA06DBhdTQdJlDNXRAr9SbWpN25bKBVbrhlG0cuMnDG@TGnH4cfvqd//vqbrobrK5nsPbkWVe5zp3U2jpyIXVQHyxwlyHpJlmEkQe3sh8uFZYSaQ3JLUDRCWYfsZ58uI/ENFOrUQnRPLYOb/BMQFiB/urZIIwMg3PE4erKdf8DnAI9LurnBsjc61heXxcLJB0ghjpfSpJiZgikDnnvCRYge9vQduXKd63QcZeUaPTS4u/zJS5Q3qRyDCI5sWIKMRlELwr/H9mjhJReLG@12uxn45LDEectBYrLE5EWFEHjm/O5W2PgDWW8u8LV@KkipqQYS7SCRyUwyIXLD9c5/vJO70WhW7@joogt31Ki21CrcPcnBSw5@Jcd/onc@r@EE/yeNWcMGFPi/eErsyCuk0r2k9fFf%23C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">1</a>, <a href=\"https://dzaima.github.io/paste/#0lVLBbtNAEL37K96hiCQyiQAJIauAECcu5BDfqhZt7XG6krNrdnbjxFH@nRnbVJQbOU1m3rx57603G5TnjrjINhvYjzns2w85khRJi@b9uxzr9VqnqxLzj@lXIlcRfIMyR2eYqYZhdN66SEHRd@5@xjf2RPUbtgOhtRxfLlmHQHtpU2Bdu3k@8qeNJrXtuJQp4JvhOKkt8QqnGTqe7QLFafAwDyoBY5Ecm4ZghQK3iGJX6U7LGbuewGxiCiZat0fl3ZFCzLJDao/HS1loRDl2t@V14YqdOMkxFCtx0RerXY6T1EsU0Ak@4ZKJaR/Qy0SA8EIGq1Yd9sGnTl1eADn/gySD6MEdVbY549EnV5tgiaXrM9UlqO@ObU2IT5bBlVctA4yrRbgJpGz9k20JPQRw9@V@Ny4eci9iFjcaR7/EqsBp7EsOXs5LWCk40XUdu4NgD@O1r/JMMSod2VCDrb708JrhPFrv9mLGPx6tT9yeYYSnoaBfg9Ao1czrsuuc30/1/3eIObafXya5/Z8kn0PcjvNJ@kL@TTbnUp73Xz2/AQ%23C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">2</a></p>\n"
  }
]