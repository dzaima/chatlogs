[
  {
    "id": 140389,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-27T23:32:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">merged!</p>\n"
  },
  {
    "id": 140388,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-27T22:46:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’m in favor.</p>\n"
  },
  {
    "id": 140387,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-27T22:05:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if there are no objections, I’d like to push the ffi stuff to the main branch so I could work on non-ffi stuff without having to worry about merges</p>\n"
  },
  {
    "id": 140386,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-27T22:00:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and pushed the bunch of random tests I’d built up during working on ffi</p>\n"
  },
  {
    "id": 140385,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-27T21:30:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0fY7NSsNAFIX3eYpLsugMLbFp0yRYdBFhihvBjRuRMml@CMYZnCRQEKELEbEb36DgSt/Ane8yT@LMpFUX2oHh3sM5fPc4juU4l72T3pUVn59dAE3TORVFjYxqBmDmEsOdBSCyphUMkls2v6HXGQl8pPeG663B0IcfucR4at130KRkipqm6DfM7AKOvnExb1lKmId2HQYqOlVJHchFlqFOblsIjTflFUnVBzB3QD6@gF3xBa0OqjJxa26DXL0Scgo2teXq0961MeKY2hbKucjKgkHeskVTcoY1jCiQL58/@iDXD1AoFWu8/08cEbl@mmHwRmNLbt7UDM2Xm3dt4@bQG24fEJPyQncUjVm9xw4nf9izzg7cIIr22ZOhtr8A#mixed\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">random test</a></p>\n"
  },
  {
    "id": 140225,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T12:22:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The issue with trying to match the argument nesting is that something like <code>{f32,i32,&amp;u8}</code> would also have to be nested for consistency, which I’d imagine gets frustrating.</p>\n"
  },
  {
    "id": 140224,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T12:18:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It can do that, but you end up with a variable-length result.</p>\n",
    "replyID": 140215,
    "replyName": "dzaima"
  },
  {
    "id": 140216,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-24T07:06:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also s/•bit._conv/•bit._cast/?</p>\n"
  },
  {
    "id": 140215,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-24T07:06:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh then there’s <code>*&amp;i32</code> which couldn’t spill each <code>&amp;i32</code> to a result item (but I could see being useful)</p>\n"
  },
  {
    "id": 140214,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-24T07:04:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d have imagined that’d add a single result item, containing the 5-item array (or, in general, any <code>&amp;</code> being present would result in the whole corresponding argument being a result item, with mutated parts mutated); Just adding a list for each <code>&amp;</code> is simpler to implement though, so I’m fine with either</p>\n",
    "replyID": 140203,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 140204,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T02:02:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Also missing something like <code>u64:~</code> to allow approximate conversion. I think it’s better to wait on this one as we may not want it at all.</p>\n"
  },
  {
    "id": 140203,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T02:01:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">In full generality it allows some crazy things like <code>[5]&amp;i32</code> for an array of 5 pointers to <code>&amp;i32</code>, which should add 5 result elements. I don’t think it makes sense to implement this, but don’t see any value in explicitly disallowing it in the spec.</p>\n"
  },
  {
    "id": 140202,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T01:59:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Added a spec <a href=\"https://mlochbaum.github.io/BQN/spec/system.html#foreign-function-interface\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>, which should fit CBQN’s intended behavior as I understand it.</p>\n"
  },
  {
    "id": 140200,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-24T00:01:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Calling a <code>•FFI</code> function seems to be missing a length check on the arguments?</p>\n"
  },
  {
    "id": 140199,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-23T18:19:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, it not being an atom would be weird for <code>**</code> - with <code>:c8</code> there’s a reason for the two to be merged to a single array, but with just <code>**</code> that’d be somewhat weirder</p>\n"
  },
  {
    "id": 140198,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-23T18:17:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">idea was that if BQN had system functions operating on character arrays as pointers, the character array <em>would</em> be the BQN form (not an atom, but I don’t think that matters)</p>\n"
  },
  {
    "id": 140197,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-23T17:58:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think <code>*:c8</code> is much more explicit, so I’d rather <code>*</code> just not be supported if it doesn’t correspond to a BQN atom.</p>\n"
  },
  {
    "id": 140196,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-23T17:56:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d consider opaque pointers to fall under expanding types.</p>\n"
  },
  {
    "id": 140195,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-23T17:56:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The one other non-type feature I had in mind was C arguments that don’t come from BQN arguments. Two varieties might be useful: a constant value, and an uninitialized array with a specified length. I don’t know how to specify it (as you need both type and value), and it’s only a convenience/performance thing, so not very important.</p>\n"
  },
  {
    "id": 140173,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-23T14:44:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(wait, <code>puts</code> has a trailing newline while <code>fputs</code> doesn’t? ಠ_ಠ)</p>\n"
  },
  {
    "id": 140172,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-23T14:35:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(for opaque pointers I’d personally rather have them be represented by a regular character array or something, and have some <code>•mem</code> namespace with functions that can operate on those; I just really don’t like the sound of <code>**</code> creating a list of namespaces)</p>\n"
  },
  {
    "id": 140171,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-23T14:29:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">besides opaque pointers, is there anything else important left to do besides expanding the types of things supported?</p>\n"
  },
  {
    "id": 140147,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T17:09:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>•FFI</code> works on android aarch64 on termux! (at least for loading <code>malloc</code> from some random .so; should have some way to load functions not from an external <code>.so</code> file)</p>\n"
  },
  {
    "id": 140145,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T16:35:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Pushed FFI-based filter, FFT, and resampling to <a href=\"https://github.com/mlochbaum/BQNoise\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">BQNoise</a>. Nothing should break if <code>•FFI</code> isn’t available or the libraries can’t be loaded; FFTW just isn’t loaded anywhere until I figure out how I want to do that.</p>\n"
  },
  {
    "id": 140143,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T15:55:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, I just had real and imaginary parts swapped (imaginary comes first, really?).</p>\n"
  },
  {
    "id": 140142,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T15:37:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">FFTW is working! Getting different results versus BQN-based FFT and the J binding though; probably something to do with forward versus backward.</p>\n",
    "replyID": 140140,
    "replyName": "dzaima"
  },
  {
    "id": 140141,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T15:09:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for properly doing <code>out</code> you’d want a way to explicitly allocate a persistent buffer</p>\n",
    "replyID": 140135,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 140140,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T14:14:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed <code>*:c8</code> etc &amp; allowing <code>a:b</code> in result</p>\n"
  },
  {
    "id": 140139,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:23:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Right, so the C example is definitely only good for illustration.</p>\n"
  },
  {
    "id": 140138,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:21:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and the lifetime of a <code>&amp;f64</code> ends when the function returns, so <code>\"*\"‿\"id\"‿\"&amp;f64\"</code> would be use-after-free</p>\n"
  },
  {
    "id": 140137,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:20:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">well, a function returning <code>*</code> wouldn’t return a length, so pointer objects in general can’t rely on it</p>\n"
  },
  {
    "id": 140136,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:18:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The pointer object needs to remember the length (shape?) so that C example is maybe not exact.</p>\n"
  },
  {
    "id": 140135,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:18:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And then the most sound way to handle the <code>out</code> problem with FFTW would be to have a utility that converts an array to a pointer object (would be <code>•FFI \"*\"‿\"id\"‿\"&amp;f64\"</code> with a C function <code>id</code> returning it’s argument), and pass that in and convert it back to a BQN array when it’s finished being mutated.</p>\n"
  },
  {
    "id": 140134,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:14:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">As for plain <code>*</code>, I think we want a non-opaque namespace so it can have the reading and writing methods, which should probably be designed together with streams.</p>\n"
  },
  {
    "id": 140133,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:14:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ah yeah that’s also a thing</p>\n"
  },
  {
    "id": 140132,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:13:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, <code>*:i32</code> would be a better way to write it.</p>\n"
  },
  {
    "id": 140131,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:12:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>u64</code> and pointers probably behave ~equally on x86-64, but not necessarily elsewhere</p>\n"
  },
  {
    "id": 140130,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:12:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh yeah still haven’t implemented the <code>:</code> thing for result</p>\n"
  },
  {
    "id": 140129,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:10:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>u64:i32</code> should work fine, right? It’s just that I get “Unimplemented result type” for it.</p>\n"
  },
  {
    "id": 140128,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:09:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if going with a namespace, there’s the annoying thing that it’ll be <code>2+field count</code> allocations when constructing one</p>\n"
  },
  {
    "id": 140127,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:08:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyway, opaque pointers; what’s the design of those</p>\n"
  },
  {
    "id": 140126,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T13:06:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>cmov</code>s tend to be kind of slow, and <code>cmp</code>/<code>ja</code> should be fused, so I’m not sure which of those is going to be faster.</p>\n"
  },
  {
    "id": 140125,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T13:05:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(also <a href=\"https://godbolt.org/z/Yfjrdro63\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">huh</a> clang does actually know to move the <code>push rax</code> to just before the call, but just decides to move it to the whole function for multiple calls)</p>\n"
  },
  {
    "id": 140124,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:58:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://godbolt.org/z/sPE6hdo6o\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">godbolt</a></p>\n"
  },
  {
    "id": 140123,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T12:55:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That <code>i64</code> check is faster as <code>(u64)(v+(1ULL&lt;&lt;53)) &gt;= (2ULL&lt;&lt;53)</code> I expect.</p>\n"
  },
  {
    "id": 140122,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:42:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed u64/i64 arguments &amp; check for exact values</p>\n"
  },
  {
    "id": 140121,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T12:25:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">State of FFTW: I have <a href=\"https://dzaima.github.io/paste/#0ZVLNattAEL7vU0y3UKSiJJJsfEhxL20FvQXau1HsdSRQrKCfuqUU3ItBagwJsUkCCU4CARsKufTvUCg4x77FPEEfobOrtWvootGOvm9m9tsZHUR@D3B4BDxv1LfDmssZ8zSylafJVhTuSut2s35tM403axzLHzi48byXrJ0IPxM7soTKoMQD@sDBLy7jW/Kj1elmXCKyttwfr5xuo66cR0tnySgZHZFmSfxuZymQinO@Kq1ZdYRE5c7EW9HOtaD/UzS7imae91qFvWcAfy4nM7ISP/6kbb4NxoaEHCzPsLhZ3DmmZCUFTxjFc5nsJ3v5vuhlsJ@nGewK8CEKyYsTCPw3ArJ@XAFtEUUphwdg1PCwbJp4@g2nM9tyLLeJxZVl43Qua1dC5qSKbFSA4eLwGIuRiaOp4T5tmqCjOmGipC8@0zQ2lHosrkkmcWlQUXcODk9IvE4Jq57gbbksomcV55linv2bJokjWWlg0RP2LHsxozedabn4adggsZT9Yq3Zqp8Az9dGpqH77zi9MO5PF1/S4Pe5uofTpEqmvB81m9SSBFfJIiHsA2MPcXyI4wGsLcImX6FBd3JXRiCAXbk2gAbWFo7PGP2or4K4D9WoJ/W/%23BQN\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this code</a>, which is stuck on being able to represent an opaque pointer (type <code>plan</code>). It also relies on <code>ExecutePlan</code> being able to modify <code>out</code>, which I guess will work since it’s an <code>f64</code> pointer but is awful.</p>\n"
  },
  {
    "id": 140120,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:24:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">then there’s the question of 2^62 again</p>\n"
  },
  {
    "id": 140119,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T12:23:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, but rounding is always part of float arithmetic.</p>\n",
    "replyID": 140117,
    "replyName": "dzaima"
  },
  {
    "id": 140118,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:23:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">huh, I don’t actually see slowdown for <code>\"\"‿\"noopManyArgs\"‿\"i8\"‿\"i16\"‿\"i32\"‿\"u8\"‿\"u16\"‿\"u32\"‿\"f32\"‿\"f64\"</code> if the integer args are checked (but that invocation is also an immense 210ns)</p>\n"
  },
  {
    "id": 140117,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:21:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(also, passing <code>÷3</code> to <code>f32</code> is also technically loses precision)</p>\n"
  },
  {
    "id": 140116,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:19:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">…especially for arrays of structs, when those’ll be a thing</p>\n"
  },
  {
    "id": 140115,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T12:16:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Full checking, I think. These changes are on par with other kinds of overhead BQN adds. If you have a tight loop that really needs to be fast, just write it in C.</p>\n"
  },
  {
    "id": 140114,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:07:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for returning <code>u64</code>, the bounds check is just <code>movabs</code>, <code>cmp</code>, and a jump, affects only some functions, and a max of one time per invocation. Checking whether a thing corresponding to an <code>i32</code> is exactly an i32 is quite a bit more complicated, affects any function taking integer arguments, and once for each such arg</p>\n"
  },
  {
    "id": 140113,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T12:01:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">another question - how complete should error checking be on FFI function invocation? Some checks can be quite expensive (in the nanosecond scale of course), but ideally invocation should be as fast as possible</p>\n"
  },
  {
    "id": 140112,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:44:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Fair.</p>\n"
  },
  {
    "id": 140111,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:43:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and gonna go sleep without implementing <code>u64</code> arguments</p>\n"
  },
  {
    "id": 140110,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:43:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed name change &amp; relative-to-source-file-ness</p>\n"
  },
  {
    "id": 140109,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:31:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It is now.</p>\n"
  },
  {
    "id": 140108,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:30:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">was the final agreement on the name <code>•FFI</code>?</p>\n"
  },
  {
    "id": 140107,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:26:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Wow, this J FFTW script uses <code>6 (33 b.) 1</code> for constant <code>1&lt;&lt;6</code> instead of, you know, <code>2^6</code>.</p>\n"
  },
  {
    "id": 140106,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:26:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed allowing u64 result</p>\n"
  },
  {
    "id": 140105,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:25:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Relative, same as <code>•file.Stuff</code>.</p>\n"
  },
  {
    "id": 140104,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:24:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so which should it be - relative to file or require absolute?</p>\n"
  },
  {
    "id": 140103,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:23:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, good (was definitely a “would expect” rather than a “did expect”; everything’s coming along pretty well).</p>\n"
  },
  {
    "id": 140102,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:21:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ah that’s just incompleteness</p>\n"
  },
  {
    "id": 140101,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:19:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">One other thing, I’d expect a relative path to work but had to use <code>•file.Path</code>. I guess I can understand not wanting <code>•LoadFFI</code> to depend on the file it’s in, but it should at least give an error if you try to use a relative path in that case.</p>\n"
  },
  {
    "id": 140100,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:17:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s what I was addressing.</p>\n"
  },
  {
    "id": 140099,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:17:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(what about 2^62? It’s representable exactly as an f64, but it’s most likely not what would be meant)</p>\n"
  },
  {
    "id": 140098,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:16:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Possibly with an error telling you to use <code>u64:u64</code> (?) if you go past <code>2⋆53</code>.</p>\n"
  },
  {
    "id": 140097,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:16:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, I think so. Given how widespread using <code>u64</code> for lengths is, I think we should probably be doing the same thing on inputs by default too.</p>\n"
  },
  {
    "id": 140096,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:15:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so a lone returning <code>u64</code> should be of the variety that checks if the value is representable exactly in an f64?</p>\n"
  },
  {
    "id": 140095,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:11:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, of course.</p>\n"
  },
  {
    "id": 140094,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:11:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>double</code> gets returned by <code>xmm</code>, whereas <code>u64</code> would be a GPR</p>\n"
  },
  {
    "id": 140093,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:09:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Changing to <code>u32</code> I do get <code>0</code>.</p>\n"
  },
  {
    "id": 140092,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:08:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The C return value should be a <code>u64</code> of <code>0</code>, but I set it to <code>f64</code> and get <code>0.08456460987958714</code>. Doesn’t make much sense to me.</p>\n"
  },
  {
    "id": 140091,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:04:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I figured it out on this side <em>just</em> before you posted that of course.</p>\n"
  },
  {
    "id": 140090,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T02:04:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Right result now!</p>\n"
  },
  {
    "id": 140089,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:03:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">pushed fix</p>\n"
  },
  {
    "id": 140088,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T02:01:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ah yep <code>&amp;f32</code> is broken</p>\n"
  },
  {
    "id": 140087,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:52:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">This broke in j9 I guess. j8 is giving reasonable results.</p>\n"
  },
  {
    "id": 140086,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:50:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Running now, and the length it sets is right, but the data converted from <code>f32</code> looks wrong with numbers around <code>2⋆30</code>. I can’t get my J version to return anything but <code>0</code> so I don’t know what the output should be.</p>\n"
  },
  {
    "id": 140085,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:41:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, although in this case I can ignore the result.</p>\n"
  },
  {
    "id": 140084,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T01:40:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, retyping in general isn’t supported for the result</p>\n"
  },
  {
    "id": 140083,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T01:39:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, i guess <code>u64</code> isn’t supported for result</p>\n"
  },
  {
    "id": 140082,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T01:37:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no</p>\n"
  },
  {
    "id": 140081,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:36:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No <code>u64:u64</code> or similar to convert to float though, right?</p>\n"
  },
  {
    "id": 140080,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-22T01:33:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>u64</code> does work if you have a type remapping (i.e. <code>u64:c8</code>)</p>\n"
  },
  {
    "id": 140079,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:19:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Seems FFTW uses ints for everything, so I can probably get that to work.</p>\n"
  },
  {
    "id": 140078,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:14:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Very low priority relative to having the functionality at all, of course. The thing I want most is <code>soxr_oneshot()</code> from sox’s (SOund eXchange) soxr.h for resampling, and that’s stuck on missing support for <code>u64</code> and <code>&amp;u64</code>.</p>\n"
  },
  {
    "id": 140077,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-22T01:10:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Got it working with the filter test! Only 8x faster than plain BQN, which is kind of amazing. Repeating in C versus BQN, it looks like there’s about a 25% overhead, even when I time with <code>⍟10</code> so it should be working on refcount-1 data after the first call.</p>\n"
  },
  {
    "id": 140076,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T21:52:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">aand that’s now pushed</p>\n"
  },
  {
    "id": 140075,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T21:30:53Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   f ← \"local/lib.so\" •LoadFFI ⟨\"\", \"muti32\",  \"&amp;i32:c8\",  \"i32\"⟩ ⋄ F ⟨\"helloworld\", 2⟩\n⟨ \"iellpworld\" ⟩\n   f ← \"local/lib.so\" •LoadFFI ⟨\"&amp;\",\"muti32\",  \"&amp;i32:c8\",  \"i32\"⟩ ⋄ F ⟨\"helloworld\", 2⟩\n\"iellpworld\"</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 629px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 62px; min-width: 617.45px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"\"</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-string\">\"muti32\"</span><span class=\"cm-function cm-apl-catenate\">,</span>  <span class=\"cm-string\">\"&amp;i32:c8\"</span><span class=\"cm-function cm-apl-catenate\">,</span>  <span class=\"cm-string\">\"i32\"</span><span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"helloworld\"</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-number\">2</span><span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">⟨</span> <span class=\"cm-string\">\"iellpworld\"</span> <span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"&amp;\"</span><span class=\"cm-function cm-apl-catenate\">,</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-function cm-apl-catenate\">,</span>  <span class=\"cm-string\">\"&amp;i32:c8\"</span><span class=\"cm-function cm-apl-catenate\">,</span>  <span class=\"cm-string\">\"i32\"</span><span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"helloworld\"</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-number\">2</span><span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 62px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"6\">and <code>\"&amp;\"</code> return</p>\n"
  },
  {
    "id": 140074,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T21:01:12Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   f ← \"local/lib.so\" •LoadFFI \"\"‿\"inc_many\"‿\"&amp;i32\"‿\"&amp;i16\"‿\"&amp;i8\" ⋄ F ⥊¨ 10‿20‿30\n10 20 30\n⟨ ⟨ 11 ⟩ ⟨ 21 ⟩ ⟨ 31 ⟩ ⟩\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"inc_many\"‿\"&amp;i32\"‿\"𝕨&amp;i16\"‿\"&amp;i8\" ⋄ ⟨⥊20⟩ F ⥊¨ 10‿30\n10 20 30\n⟨ ⟨ 11 ⟩ ⟨ 21 ⟩ ⟨ 31 ⟩ ⟩\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"inc_many\"‿\"&amp;i32\"‿\"&gt;𝕨&amp;i16\"‿\"&amp;i8\" ⋄ ⟨20⟩ F ⥊¨ 10‿30\n10 20 30\n⟨ ⟨ 11 ⟩ ⟨ 21 ⟩ ⟨ 31 ⟩ ⟩</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 608px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 129px; min-width: 596.4px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"inc_many\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i16\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i8\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⥊</span><span class=\"cm-operator cm-apl-each\">¨</span> <span class=\"cm-number\">10</span><span class=\"cm-keyword\">‿20‿30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">10</span> <span class=\"cm-number\">20</span> <span class=\"cm-number\">30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">⟨</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">11</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">21</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">31</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"inc_many\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"𝕨&amp;i16\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i8\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⟨⥊20⟩</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⥊</span><span class=\"cm-operator cm-apl-each\">¨</span> <span class=\"cm-number\">10</span><span class=\"cm-keyword\">‿30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">10</span> <span class=\"cm-number\">20</span> <span class=\"cm-number\">30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">⟨</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">11</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">21</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">31</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"inc_many\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;𝕨&amp;i16\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i8\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⟨20⟩</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⥊</span><span class=\"cm-operator cm-apl-each\">¨</span> <span class=\"cm-number\">10</span><span class=\"cm-keyword\">‿30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">10</span> <span class=\"cm-number\">20</span> <span class=\"cm-number\">30</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">⟨</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">11</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">21</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟨</span> <span class=\"cm-number\">31</span> <span class=\"cm-keyword\">⟩</span> <span class=\"cm-keyword\">⟩</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 129px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 159px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"11\">and with mutation working</p>\n"
  },
  {
    "id": 140073,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T20:30:55Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   f ← \"local/lib.so\" •LoadFFI \"\"‿\"muti32\"‿\"&amp;i32:c8\"‿\"i32\" ⋄ ⊑F ⟨\"helloworld\", 2⟩\n\"iellpworld\"\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"muti32\"‿\"&amp;i32:c8\"‿\"𝕨i32\" ⋄ ⊑ ⟨2⟩ F ⟨\"helloworld\"⟩\n\"iellpworld\"\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"muti32\"‿\"&amp;i32:c8\"‿\"&gt;𝕨i32\" ⋄ ⊑ 2 F ⟨\"helloworld\"⟩\n\"iellpworld\"\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"muti32\"‿\"&gt;&amp;i32:c8\"‿\"&gt;𝕨i32\" ⋄ ⊑ 2 F \"helloworld\"\n\"iellpworld\"\n   f ← \"local/lib.so\" •LoadFFI \"\"‿\"muti32\"‿\"&gt;𝕨&amp;i32:c8\"‿\"&gt;i32\" ⋄ ⊑ \"helloworld\" F 2\n\"iellpworld\"</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 608px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 142px; min-width: 596.4px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"i32\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⊑F</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"helloworld\"</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-number\">2</span><span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"𝕨i32\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⊑</span> <span class=\"cm-keyword\">⟨2⟩</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"helloworld\"</span><span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&amp;i32:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;𝕨i32\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⊑</span> <span class=\"cm-number\">2</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"helloworld\"</span><span class=\"cm-keyword\">⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;&amp;i32:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;𝕨i32\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⊑</span> <span class=\"cm-number\">2</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-string\">\"helloworld\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"muti32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;𝕨&amp;i32:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"&gt;i32\"</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">⊑</span> <span class=\"cm-string\">\"helloworld\"</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-number\">2</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-string\">\"iellpworld\"</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 142px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 172px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"12\">yay</p>\n"
  },
  {
    "id": 140072,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-21T18:28:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Looks right to me. <code>&gt;𝕨</code> feels like the more natural order to me, although either makes sense.</p>\n"
  },
  {
    "id": 140071,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T17:52:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>\"&amp;\"‿\"fn\"‿\"&gt;i32\"‿\"𝕨&gt;&amp;i32\"</code> for taking a number as the right arg, integer array as left, and returning the mutated integer array</p>\n"
  },
  {
    "id": 140070,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-21T17:32:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Plain <code>&amp;</code> is a good indicator for the second thing, I think.</p>\n"
  },
  {
    "id": 140069,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-21T17:31:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think that’s the best default. The result can be used to say “always use a list” or “void but don’t make a list” as a compatible extension.</p>\n"
  },
  {
    "id": 140068,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T14:26:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for result I still think it’d be fine if with no mutable args you just got the result, and otherwise it’s a list, the first element being the result (or not present if void); leads to the funky situation that a void function with a single mutable arg returns a 1-element list, but I think that’s fine</p>\n"
  },
  {
    "id": 140067,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-21T14:09:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">after some thought, I think I’d be fine with needing to explicitly denote then an argument is the whole of <code>𝕨</code>/<code>𝕩</code>, defaulting to a list. Result is still problematic though</p>\n"
  },
  {
    "id": 139788,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-14T15:49:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(34% of the time in that is spent in libffi, so that gives a minimum of 11000ms; of course everything anywhere near fast would be JITted)</p>\n"
  },
  {
    "id": 139787,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-14T15:33:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah the current setup isn’t gonna beat much in speed. <code>plusOne ← \"local/lib.so\" •LoadFFI \"i32\"‿\"plusone\"‿\"i32\"</code> and then <code>)t PlusOne∘⋈⍟500000000 0</code> gives 31.3s, aka 31300ms, worse than everything except Go and “dart scoped” whatever that is (assuming my processor performs similarly to the author’s, which isn’t a good assumption but ¯\\_(ツ)_/¯)</p>\n"
  },
  {
    "id": 139786,
    "username": "yiyus",
    "userID": 2376,
    "date": "2022-05-14T15:21:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">benchmarks for other languages: <a href=\"https://github.com/dyu/ffi-overhead\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://github.com/dyu/ffi-overhead</a></p>\n"
  },
  {
    "id": 139739,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-12T12:32:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">using <code>-Wl,--dynamic-list=syms</code> where <code>syms</code> is a file of the to-be-exported symbols instead brings <code>text</code> down to 1115388</p>\n"
  },
  {
    "id": 139738,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-12T12:10:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, 61KB of the binary size increase comes from <code>-rdynamic</code></p>\n"
  },
  {
    "id": 139733,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T21:09:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Definitely all right.</p>\n"
  },
  {
    "id": 139732,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T21:07:10Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   names ← &lt;˘ 'a'+100001‿5 •rand.Range 26 ⋄ i←0\n0\n   )t:100000 \"libqscintilla2_qt5.so.15.0.0\" •LoadFFI⎊'e' ⟨\"\", names⊑˜i+↩1⟩\n1.735us</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 538px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 62px; min-width: 526.233px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">names</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-function cm-apl-lessThan\">&lt;</span><span class=\"cm-keyword\">˘</span> <span class=\"cm-string\">'a'</span><span class=\"cm-function cm-apl-add\">+</span><span class=\"cm-number\">100001</span><span class=\"cm-keyword\">‿5</span> <span class=\"cm-keyword\">•rand</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">Range</span> <span class=\"cm-number\">26</span> <span class=\"cm-keyword\">⋄</span> <span class=\"cm-keyword\">i</span><span class=\"cm-apl-arrow\">←</span><span class=\"cm-number\">0</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">0</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   )<span class=\"cm-keyword\">t:100000</span> <span class=\"cm-string\">\"libqscintilla2_qt5.so.15.0.0\"</span> <span class=\"cm-keyword\">•LoadFFI⎊</span><span class=\"cm-string\">'e'</span> <span class=\"cm-keyword\">⟨</span><span class=\"cm-string\">\"\"</span><span class=\"cm-function cm-apl-catenate\">,</span> <span class=\"cm-keyword\">names⊑˜i</span><span class=\"cm-function cm-apl-add\">+</span><span class=\"cm-keyword\">↩1⟩</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">1.735us</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 62px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"></div></div></div>\n"
  },
  {
    "id": 139731,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T21:06:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And <code>•FFI \"filename\"</code> is still open anyway, allowing <code>lib ← •FFI \"filename\" ⋄ lib •FFI ...</code>.</p>\n"
  },
  {
    "id": 139730,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T21:06:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Probably all right. And if we end up making something that loads the symbol table once, our only problem is a slightly awkward name.</p>\n"
  },
  {
    "id": 139729,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T21:03:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(that .so being 6.5MB)</p>\n"
  },
  {
    "id": 139728,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T21:03:28Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   )t \"libqscintilla2_qt5.so.15.0.0\" •LoadFFI⎊'e' \"\"‿\"test\"\n18.21ms\n   )t \"libqscintilla2_qt5.so.15.0.0\" •LoadFFI⎊'e' \"\"‿\"test\"\n46.18us</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 433px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 62px; min-width: 420.983px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   )<span class=\"cm-keyword\">t</span> <span class=\"cm-string\">\"libqscintilla2_qt5.so.15.0.0\"</span> <span class=\"cm-keyword\">•LoadFFI⎊</span><span class=\"cm-string\">'e'</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"test\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">18.21ms</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   )<span class=\"cm-keyword\">t</span> <span class=\"cm-string\">\"libqscintilla2_qt5.so.15.0.0\"</span> <span class=\"cm-keyword\">•LoadFFI⎊</span><span class=\"cm-string\">'e'</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"test\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">46.18us</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 62px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"></div></div></div>\n"
  },
  {
    "id": 139727,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T21:01:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>$ ls -Sl /usr/lib/ | head -n 10</code></p>\n"
  },
  {
    "id": 139726,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:59:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">don’t exactly have random multi-megabyte <code>.so</code>s to compare with</p>\n"
  },
  {
    "id": 139725,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:58:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And no significant dependence on .so size I assume?</p>\n"
  },
  {
    "id": 139724,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:57:25Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   f ← \"local/lib.so\" •LoadFFI \"\"‿\"do_nothing\"\n(foreign function)\n   )t:10000000 F ↕0\n51.228ns</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 62px; min-width: 329.767px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"do_nothing\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">(<span class=\"cm-keyword\">foreign</span> <span class=\"cm-keyword\">function</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   )<span class=\"cm-keyword\">t:10000000</span> <span class=\"cm-keyword\">F</span> <span class=\"cm-keyword\">↕0</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">51.228ns</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 62px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 86px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"6\">maximum speed of invocation</p>\n"
  },
  {
    "id": 139723,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:54:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 139722,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:54:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">With parsing too! That’s really quick.</p>\n"
  },
  {
    "id": 139721,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:52:37Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">   )t:1000000 f ← \"local/lib.so\" •LoadFFI \"f32\"‿\"fn3\"‿\"u64:c8\"‿\"*u64:c8\"\n602.27ns</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 524px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 35px; min-width: 512.2px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   )<span class=\"cm-keyword\">t:1000000</span> <span class=\"cm-keyword\">f</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"local/lib.so\"</span> <span class=\"cm-keyword\">•LoadFFI</span> <span class=\"cm-string\">\"f32\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"fn3\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"u64:c8\"</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">\"*u64:c8\"</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">602.27ns</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 35px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 65px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"4\">pretty fast actually, considering speed wasn’t my consideration for the loading part</p>\n"
  },
  {
    "id": 139720,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:52:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So you need to load like 5k functions to get to 1ms overhead? That’s fine.</p>\n"
  },
  {
    "id": 139719,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:50:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it seems to always return the same thing, and thus takes ~200ns</p>\n"
  },
  {
    "id": 139718,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:46:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">What’s the performance impact of reloading from the filename multiple times? Inclined to say it won’t be enough to matter since you only need to load each function once, but if scanning is hard then maybe that’s not true.</p>\n"
  },
  {
    "id": 139717,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:43:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s a question of whether we want an <code>•ffi</code> namespace. In theory you could want some header parsing stuff too, but that’s probably best handled by a BQN library.</p>\n"
  },
  {
    "id": 139716,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:43:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and there’s still the whole question of whether the left arg should be just a path to the .so, or whether there should be some shared object object)</p>\n"
  },
  {
    "id": 139715,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:41:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so, <code>•FFI</code> or <code>•FFILoad</code>?</p>\n"
  },
  {
    "id": 139714,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:41:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">…and fixed</p>\n"
  },
  {
    "id": 139713,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:37:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also it seems i’ve broken <code>:</code>-things</p>\n"
  },
  {
    "id": 139712,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:36:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the name was super temporary</p>\n"
  },
  {
    "id": 139711,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:36:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t see an issue with plain <code>•FFI</code> for the name, but <code>•FFIload</code> seems better than <code>•LoadFFI</code> because it makes it clear that the FFI is the thing used for loading and not the thing being loaded.</p>\n"
  },
  {
    "id": 139710,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:32:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyways <a href=\"https://github.com/dzaima/CBQN/tree/ffi\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here’s</a> the thing</p>\n"
  },
  {
    "id": 139709,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:29:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Another thing to do would be to have inner versions of <code>bqn_make*Arr</code> that take the size as input, and compute it once on the outside.</p>\n"
  },
  {
    "id": 139708,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:26:52Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\"> 3618 genObj\n 2699 buildObj\n 2049 loadffi_c2\n 1531 libffiFn_c2\n 1408 ffi_parseTypeStr\n 1238 bqn_makeObjArr</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 89px; min-width: 161.367px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">3618</span> <span class=\"cm-keyword\">genObj</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">2699</span> <span class=\"cm-keyword\">buildObj</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">2049</span> <span class=\"cm-keyword\">loadffi_c2</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">1531</span> <span class=\"cm-keyword\">libffiFn_c2</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">1408</span> <span class=\"cm-keyword\">ffi_parseTypeStr</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"> <span class=\"cm-number\">1238</span> <span class=\"cm-keyword\">bqn_makeObjArr</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 89px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 113px;\"></div></div></div>\n"
  },
  {
    "id": 139707,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:25:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the largest new function is 3.6KB, the function to convert a BQN object to a C one. Then, at 2.7KB, is the one for converting back to BQN</p>\n"
  },
  {
    "id": 139706,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:21:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I doubt it’s an improvement here, but for some loops maybe.</p>\n"
  },
  {
    "id": 139705,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:21:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Unrolling to split one loop branch into several of them that are easier to predict is probably justifiable.</p>\n"
  },
  {
    "id": 139704,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:20:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">actually, seems a <code>RARE</code> makes it just unroll, but not go SIMD</p>\n"
  },
  {
    "id": 139703,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:18:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and <code>#pragma clang loop unroll(disable)</code> is a <code>#pragma</code> for some moronic reason so I can’t add it in a <code>#define</code></p>\n"
  },
  {
    "id": 139702,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:17:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">doesn’t work iirc</p>\n"
  },
  {
    "id": 139701,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:17:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Is there a good way to indicate that a loop should be short? Seems like adding <code>RARE</code> on the condition could.</p>\n"
  },
  {
    "id": 139700,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:16:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">text 1176207→1173455; 3KB less</p>\n"
  },
  {
    "id": 139699,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:16:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">…or add <code>if (the thing already written) thrM(\"Size too large\");</code> around it</p>\n"
  },
  {
    "id": 139698,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:14:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So you could fix it with some non-inlined versions of those probably.</p>\n"
  },
  {
    "id": 139697,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:13:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">hm, the <code>bqn_make*Arr</code> impls, while using <code>memcpy</code> for the elements, use manual loops for taking the product of the <code>size_t*</code> and convert it to to a <code>usz*</code>, and those get unrolled to oblivion</p>\n"
  },
  {
    "id": 139696,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:09:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that results in a 9000-line file</p>\n"
  },
  {
    "id": 139695,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:08:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>-D</code> should include sections that <code>-d</code> ignores?</p>\n"
  },
  {
    "id": 139694,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:07:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>objdump -d obj/def_o3n_si/ffi.o</code> results in a 7000-line file, which is reasonable-ish</p>\n"
  },
  {
    "id": 139693,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:05:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Should be easy enough to put ffi.o through objdump and figure out what’s there?</p>\n"
  },
  {
    "id": 139692,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T20:04:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And I don’t see anything in ffi.h that would take up binary space.</p>\n"
  },
  {
    "id": 139691,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T20:04:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>ffi.o</code> by itself is 60KB</p>\n"
  },
  {
    "id": 139690,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:58:59Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">$ make o3n-singeli &amp;&amp; ldd BQN\npost-singeli build:\n\n  linux-vdso.so.1 (0x00007ffe82ffa000)\n  libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fef8ee06000)\n  libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fef8ee00000)\n  libffi.so.7 =&gt; /lib/x86_64-linux-gnu/libffi.so.7 (0x00007fef8edf4000)\n  libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fef8ec02000)\n  /lib64/ld-linux-x86-64.so.2 (0x00007fef8ef88000)</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 531px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 129px; min-width: 519.217px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">$</span> <span class=\"cm-keyword\">make</span> <span class=\"cm-keyword\">o3n-singeli</span> <span class=\"cm-keyword\">&amp;&amp;</span> <span class=\"cm-keyword\">ldd</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">post-singeli</span> <span class=\"cm-keyword\">build:</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span cm-text=\"\">​</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"  \">    </span><span class=\"cm-keyword\">linux-vdso</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">1</span> (<span class=\"cm-number\">0x00007ffe82ffa000</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\" \">    </span><span class=\"cm-keyword\">libm</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">6</span> <span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-function cm-apl-null\">&gt;</span> <span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">lib</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">x86_64-linux-gnu</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">libm</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">6</span> (<span class=\"cm-number\">0x00007fef8ee06000</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\" \">    </span><span class=\"cm-keyword\">libdl</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">2</span> <span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-function cm-apl-null\">&gt;</span> <span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">lib</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">x86_64-linux-gnu</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">libdl</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">2</span> (<span class=\"cm-number\">0x00007fef8ee00000</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\" \">    </span><span class=\"cm-keyword\">libffi</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">7</span> <span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-function cm-apl-null\">&gt;</span> <span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">lib</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">x86_64-linux-gnu</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">libffi</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">7</span> (<span class=\"cm-number\">0x00007fef8edf4000</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\" \">    </span><span class=\"cm-keyword\">libc</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">6</span> <span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-function cm-apl-null\">&gt;</span> <span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">lib</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">x86_64-linux-gnu</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">libc</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">6</span> (<span class=\"cm-number\">0x00007fef8ec02000</span>)</span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\" \">    </span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">lib64</span><span class=\"cm-operator cm-apl-reduce\">/</span><span class=\"cm-keyword\">ld-linux-x86-64</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-keyword\">so</span><span class=\"cm-operator cm-apl-innerProduct\">.</span><span class=\"cm-number\">2</span> (<span class=\"cm-number\">0x00007fef8ef88000</span>)</span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 129px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 159px;\"></div></div></div>\n"
  },
  {
    "id": 139689,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:58:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(<code>bs</code> here being equivalent to <code>wc -c</code>)</p>\n"
  },
  {
    "id": 139688,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:57:27Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">$ make o3n-singeli FFI=0 &amp;&amp; size BQN &amp;&amp; bs BQN\npost-singeli build:\n\n   text    data     bss     dec     hex filename\n1082094    1752   23344 1107190  10e4f6 BQN\n1156528 BQN\n$ make o3n-singeli &amp;&amp; size BQN &amp;&amp; bs BQN\npost-singeli build:\n\n   text    data     bss     dec     hex filename\n1176207    2200   23392 1201799  125687 BQN\n1254632 BQN</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 169px; min-width: 343.8px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">$</span> <span class=\"cm-keyword\">make</span> <span class=\"cm-keyword\">o3n-singeli</span> <span class=\"cm-keyword\">FFI</span><span class=\"cm-function cm-apl-equals\">=</span><span class=\"cm-number\">0</span> <span class=\"cm-keyword\">&amp;&amp;</span> <span class=\"cm-keyword\">size</span> <span class=\"cm-keyword\">BQN</span> <span class=\"cm-keyword\">&amp;&amp;</span> <span class=\"cm-keyword\">bs</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">post-singeli</span> <span class=\"cm-keyword\">build:</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span cm-text=\"\">​</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">text</span>    <span class=\"cm-keyword\">data</span>     <span class=\"cm-keyword\">bss</span>     <span class=\"cm-keyword\">dec</span>     <span class=\"cm-keyword\">hex</span> <span class=\"cm-keyword\">filename</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">1082094</span>    <span class=\"cm-number\">1752</span>   <span class=\"cm-number\">23344</span> <span class=\"cm-number\">1107190</span>  <span class=\"cm-number\">10e4f6</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">1156528</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">$</span> <span class=\"cm-keyword\">make</span> <span class=\"cm-keyword\">o3n-singeli</span> <span class=\"cm-keyword\">&amp;&amp;</span> <span class=\"cm-keyword\">size</span> <span class=\"cm-keyword\">BQN</span> <span class=\"cm-keyword\">&amp;&amp;</span> <span class=\"cm-keyword\">bs</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">post-singeli</span> <span class=\"cm-keyword\">build:</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span cm-text=\"\">​</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\">   <span class=\"cm-keyword\">text</span>    <span class=\"cm-keyword\">data</span>     <span class=\"cm-keyword\">bss</span>     <span class=\"cm-keyword\">dec</span>     <span class=\"cm-keyword\">hex</span> <span class=\"cm-keyword\">filename</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">1176207</span>    <span class=\"cm-number\">2200</span>   <span class=\"cm-number\">23392</span> <span class=\"cm-number\">1201799</span>  <span class=\"cm-number\">125687</span> <span class=\"cm-keyword\">BQN</span></span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-number\">1254632</span> <span class=\"cm-keyword\">BQN</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 169px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 193px;\"></div></div></div>\n"
  },
  {
    "id": 139687,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:55:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d assume so</p>\n"
  },
  {
    "id": 139686,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T19:54:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, that’s a little worrying. libffi is dynamically linked?</p>\n"
  },
  {
    "id": 139685,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:53:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">don’t know why the binary is 8.6% bigger though</p>\n"
  },
  {
    "id": 139684,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T19:53:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Nice.</p>\n"
  },
  {
    "id": 139683,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T19:50:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0nY67SgNBFIb7eYqfWTDGDbpn1ks02igsCCKIZQiyJpEMjBmJG1OIkEJSmEYLsQxY6VNY@CbzJM6umxzTOs185/qdIBBB0KwcVVrizuoOroeZjtWq7mexusjWkNZQMky3X8W9AK7sAHkHNA4QNfy3nxc9hGEVaVO3wrAhHkSx@fDs1O@Gn4KbPEMa207NhtGX67dWwo3fT2zaSZJjSOnGX/LXX@CKh712veA8Bzd9hHt6SeBmH37wvGdHkL2uMXZkB6Yja1Bu9in@poTUPrgpg39dMSxhccKSn7r17zcVhW7ySlFRpig/wrdARfMHRYyKMWbcZNxi3GbcYawz7i5wbl0yE5uJzcRmYjOxmdhMbCY2E5spNxf2Hw#mixed\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">and mutation</a></p>\n"
  },
  {
    "id": 139674,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T17:31:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0XU/BSsQwEL3nKx4psu2yqG3apLg3hYIggue1SFsbXQiN1BQXRNiDePHiHyx40q/wX/IlZkt76M4wb968w8wbzyOet5pdzHIilS4MZMP8bt0YHt8ZFAuMfI4ywCsBnlqnSJ8eKbXBFG4buoCvdPOAPQTFZCpXp/mBEB4KUR4s3Y22Nl3bIIxYnHCRLskb6W2e31w7owAk7McXqNJVoU7Uujx@1hR2@32li/ssuwSVLKJ2@0fdO33veHxWpT2dDxz28x0Z7O6HPtZK6RfdOvu0GGI8buqN2Re1u18iIi6F4JJXLhOegofTBEuZYJwlLGaMRSyEiEXKE4dDJ@Ni8g8#mixed\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">report of progress</a></p>\n"
  },
  {
    "id": 139639,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:56:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess <code>u64:u64</code> giving an error and telling you the two options is actually kind of useful, since neither option is very good. Depends on how knowledgeable we expect FFI users to be.</p>\n"
  },
  {
    "id": 139637,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:51:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d definitely go for crash over inaccuracy, by default at least</p>\n"
  },
  {
    "id": 139636,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:50:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(Crash as in BQN error, which presumably nobody’s going to handle)</p>\n"
  },
  {
    "id": 139635,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:49:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Although in the cases where you want to convert, a crash is probably worse than inaccuracy? We could allow both with <code>u64:~u64</code> and <code>u64:!u64</code>, probably more complexity than it’s worth. But there should definitely be a <code>u64:u64</code> that does some default conversion.</p>\n"
  },
  {
    "id": 139634,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:43:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think it would be better to just not allow bare <code>u64</code>. If we do allow it, require the <code>f64</code> conversion to be exact.</p>\n"
  },
  {
    "id": 139633,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:42:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">should that include <code>u64</code>, losing information?</p>\n",
    "replyID": 139624,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 139632,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:40:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(then there’s still the whole question of <code>long</code> which we will need to support at some point, and having some ability to have the BQN side always convert it to 64-bit would be good)</p>\n"
  },
  {
    "id": 139631,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:39:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Could have another character so <code>$u64:c8</code> means it’s a list.</p>\n"
  },
  {
    "id": 139630,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:38:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, that was the idea.</p>\n"
  },
  {
    "id": 139629,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:38:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">though i guess <code>f32:i32</code> could be useful to not</p>\n"
  },
  {
    "id": 139628,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:38:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I was imagining it’d always make a list</p>\n"
  },
  {
    "id": 139627,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:37:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You could check the widths to decide whether to make it a list, but that sounds like an annoying inconsistency.</p>\n"
  },
  {
    "id": 139626,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:36:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">According to what I wrote <code>u64:c8</code> would mean the <code>u64</code> corresponds to one BQN <code>c8</code>. To make a list, what you’d want is more like <code>[1]u64:c8</code>.</p>\n"
  },
  {
    "id": 139624,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-11T14:33:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">By default I think you should just convert a C number to a BQN number; the fact that there’s no optimized representation for some types is irrelevant.</p>\n"
  },
  {
    "id": 139623,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:27:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and what’s “incomplete” about <code>u64:c8</code>?)</p>\n"
  },
  {
    "id": 139618,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-11T14:10:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and f32 too I guess; makes most sense as an f64 array, but that’s also wasteful and makes <code>:x</code> have to have a different storage mechanism</p>\n"
  },
  {
    "id": 139601,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-10T19:57:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how are unsigned types represented? especially <code>u32</code>, which can fit in losslessly fit in an <code>f64</code>, but that’d mean an array of them needs to use an f64 array</p>\n"
  },
  {
    "id": 139526,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:51:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that feels like just too special additional syntax to learn for a marginally useful thing</p>\n",
    "replyID": 139521,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 139525,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:49:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 139524,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:49:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s much weirder because there’s no single place to put it in the list case.</p>\n"
  },
  {
    "id": 139523,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:49:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">having just <code>&lt;</code> for “this is a list” for both result &amp; (optionally) input would work imo</p>\n"
  },
  {
    "id": 139522,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:48:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I guess I wouldn’t be averse to doing the opposite of that either.</p>\n"
  },
  {
    "id": 139521,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:48:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Could put an <code>&gt;</code> on the function name to say “nothing is a list” and get it down to one.</p>\n"
  },
  {
    "id": 139520,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:47:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You’re down to the two <code>&gt;</code>s in that case then.</p>\n"
  },
  {
    "id": 139519,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:46:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh i’m definitely for manually choosing <code>𝕨</code> vs <code>𝕩</code></p>\n"
  },
  {
    "id": 139518,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:46:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Besides, which argument is <code>𝕨</code> and which is <code>𝕩</code>? There’s no way for that not to be confusing if <code>•FFI</code> forces one mapping or the other on you.</p>\n"
  },
  {
    "id": 139517,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:46:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t like it being smart, but I would kinda like it to not be annoying</p>\n"
  },
  {
    "id": 139516,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:44:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">well, if you originally took as a non-list before (which I would literally 100% of the time), it wouldn’t help you besides letting you know that you need to change it (but that’s really not hard to know by yourself)</p>\n"
  },
  {
    "id": 139515,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:44:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I really don’t like the lowest-level interface being “smart” like this and forcing you to build the consistent thing as an extra layer on top.</p>\n"
  },
  {
    "id": 139514,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:43:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And it’s one more thing to change if you do the normal C thing and add an argument to your function.</p>\n"
  },
  {
    "id": 139513,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:42:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Consistency. If you want to take a list then having to write <code>⊑</code> or <code>´</code> based on number of arguments is really annoying.</p>\n"
  },
  {
    "id": 139512,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:39:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I also don’t really see what being explicit with when a thing is the whole input/output gives you</p>\n"
  },
  {
    "id": 139511,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:38:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so two chars saved, uglier code gotten, and a pointless allocation</p>\n"
  },
  {
    "id": 139510,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:34:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You do also have the option of sticking <code>⋈</code> after the whole thing.</p>\n"
  },
  {
    "id": 139509,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:34:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and having my preference result in 3 extra chars is pretty ugly</p>\n"
  },
  {
    "id": 139508,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:34:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">well, I will want to then</p>\n"
  },
  {
    "id": 139507,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:33:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Disagree there.</p>\n"
  },
  {
    "id": 139506,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:33:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(assuming you do want to spread those on <code>𝕨</code> and <code>𝕩</code>, which you very likely will)</p>\n"
  },
  {
    "id": 139505,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:33:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And many of the cases where it would happen just have a prototype repeated a lot, in which case you’d want to make that a constant regardless.</p>\n"
  },
  {
    "id": 139504,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:32:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">well, single-argument and two-argument. I’d guess those two make up a pretty good portion of all functions.</p>\n"
  },
  {
    "id": 139503,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:32:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you have a lot of single-argument functions you can write a wrapper around <code>•FFI</code>. My guess is this isn’t too common.</p>\n",
    "replyID": 139501,
    "replyName": "dzaima"
  },
  {
    "id": 139502,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:31:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Usually <code>1↓</code> covers the last one, but conversion could be expensive on rare occasions.</p>\n"
  },
  {
    "id": 139501,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:30:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">all single-argument functions having a forced <code>&gt;</code> on the single argument isn’t too nice</p>\n",
    "replyID": 139497,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 139500,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:30:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Like <code>#type</code> for “result ignored; mutable pointer used”, <code>&lt;type</code> for “result is a list”, <code>&lt;#type</code> for “result is a list but the C result isn’t in it”.</p>\n"
  },
  {
    "id": 139499,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:28:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And an explicit marker on the result type to tell you that there are arguments contributing instead/too is probably a good thing.</p>\n"
  },
  {
    "id": 139498,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:27:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We might want to do the result differently, yes.</p>\n"
  },
  {
    "id": 139497,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:27:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The very worst case is <code>\"&gt;a\"‿\"fn\"‿\"&gt;a\"‿\"&gt;𝕨a\"</code>, and I don’t see that as particularly painful.</p>\n"
  },
  {
    "id": 139496,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:26:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">outside of things that mutate array arguments (which are rare), you’d always have one result though</p>\n"
  },
  {
    "id": 139495,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:25:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d prefer it to always be a list by default. There’s not a lot of difference between one argument and a few in C, and I think I’d run into the inconsistency a lot.</p>\n"
  },
  {
    "id": 139494,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:25:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the alternatives are pretty much all either ugly or don’t provide an actual single place defining the case</p>\n"
  },
  {
    "id": 139493,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-05-07T21:23:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d be fine with whole argument/result vs list of such being implicit from the number of corresponding things</p>\n"
  },
  {
    "id": 139492,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:21:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I like <code>*</code> for constant pointers and <code>&amp;</code> for mutable ones, but the last one or two would require some extra symbols (last one could also be indicated with <code>&gt;</code> plus some ignore symbol on the C result type).</p>\n"
  },
  {
    "id": 139491,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:20:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Then you have a few possibilities for pointers with regards to the result:</p>\n<ul>\n<li class=\"source-line\" data-source-line=\"1\">Assume constant; no result</li>\n<li class=\"source-line\" data-source-line=\"2\">Mutable; ignore result</li>\n<li class=\"source-line\" data-source-line=\"3\">Mutable and put result into the result list</li>\n<li class=\"source-line\" data-source-line=\"4\">Mutable and make result the whole result</li>\n</ul>\n"
  },
  {
    "id": 139490,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:19:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For a mutable pointer, the <code>&gt;</code> would apply to the argument, because generally you have the result value preventing it from working on the result.</p>\n"
  },
  {
    "id": 139489,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:18:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think sticking a <code>𝕨</code> in front of an argument’s type to say it comes from <code>𝕨</code>, as opposed to default <code>𝕩</code>, is fine. I also like the idea of a <code>&gt;</code> or some other symbol in front of a value to say it doesn’t go in a list. That would only be valid if there’s no other value associated to the same thing.</p>\n"
  },
  {
    "id": 139488,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:13:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We might also want to ignore the result, or maybe to use a constant for a C argument (set a number to 0 or something).</p>\n"
  },
  {
    "id": 139487,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:12:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">A mutable pointer argument can be part of both an argument and the result. Otherwise, C arguments come from one BQN argument, and the result goes to the result.</p>\n"
  },
  {
    "id": 139486,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-07T21:10:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Going back to this, the most general information we want is, for each of <code>𝕨</code>, <code>𝕩</code>, and the result, which C-side values go into them, and if there’s exactly one, whether it should be a list. I think not allowing <code>𝕨</code> if it would be a length-0 list is fine; that can be fixed with <code>∘⊢</code>.</p>\n",
    "replyID": 139022,
    "replyName": "dzaima"
  },
  {
    "id": 139301,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-04T02:02:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For pointers we’re going to have more work to do in a lot of cases.</p>\n"
  },
  {
    "id": 139300,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-05-04T02:01:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The type conversions can just as easily go in the other direction to turn a C result into BQN.</p>\n"
  },
  {
    "id": 139299,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-05-04T02:00:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is there a new type that represents an external resource? are there multiple types that represent external resource? do we allow modifying these on the BQN side of things?</p>\n"
  },
  {
    "id": 139298,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-05-04T01:58:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">this might have already been mentioned - but what happens to C values returned from FFI functions?</p>\n"
  },
  {
    "id": 139046,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:54:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The interpreter can only ever define precisely one <code>bqn_free</code>, taking a specific width argument, though, so the width is bound to whatever the interpreter was compiled for</p>\n",
    "replyID": 139044,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 139044,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-27T17:51:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You do kind of want to be able to specify width in case you’ve built the C code for a specific width, so I still think <code>a</code> should be a special case of something.</p>\n",
    "replyID": 139016,
    "replyName": "dzaima"
  },
  {
    "id": 139043,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:51:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">this is why I did the configurable makefile thing - now I could safely enable libffi by default, and when it’s not available one could just <code>make o3 ffi=0</code> or with any build type; previously I would’ve needed to double the configuration count to achieve that with e.g. <code>make o3-noffi</code></p>\n"
  },
  {
    "id": 139042,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-27T17:47:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Very strongly believe we shouldn’t be trying to push no-ffi builds by default because that means you can’t access existing C libraries without a C compiler.</p>\n"
  },
  {
    "id": 139040,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-27T17:45:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, there should probably be a possibility for multiple results, so you have to distinguish between a single thing out, or a list.</p>\n"
  },
  {
    "id": 139039,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:45:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(when you do have an alternative though is when there is only one return value - do you still return a list, or the plain value?)</p>\n"
  },
  {
    "id": 139038,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:43:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right; for that you’d need to have the result be a list, but at least then you don’t have an alternative</p>\n",
    "replyID": 139036,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 139037,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:41:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(to be clear, the only “special” thing about those special-cases is that they don’t need libffi to load; they’re functionally exactly identical)</p>\n"
  },
  {
    "id": 139036,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-27T17:40:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There are some similar concerns about the result, since a lot of the time you want to pass in a pointer and get whatever’s written back.</p>\n",
    "replyID": 139020,
    "replyName": "dzaima"
  },
  {
    "id": 139035,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:38:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">from <code>•FFI</code>; Namespace keys are always (ideally supposed to be) static, this is no different</p>\n",
    "replyID": 139033,
    "replyName": "Rowan"
  },
  {
    "id": 139034,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T17:36:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’s a bit irregular, but it’s about all you can reasonably get without libffi support</p>\n",
    "replyID": 139032,
    "replyName": "Rowan"
  },
  {
    "id": 139033,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-27T17:12:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Is <code>Function</code> here from •FFI or <code>\"file.so\"</code></p>\n",
    "replyID": 139022,
    "replyName": "dzaima"
  },
  {
    "id": 139032,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-27T17:08:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">having special cases for <code>\"a\"‿\"fn\"‿\"a\"</code> vs <code>\"a\"‿\"fn\"‿\"a\"‿\"a\"</code> i could see as potentially an irregular thing to remember when writing an ffi lib.</p>\n"
  },
  {
    "id": 139031,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-27T17:07:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">All arguments as a monadic list and destructuring seems okay.</p>\n",
    "replyID": 139020,
    "replyName": "dzaima"
  },
  {
    "id": 139022,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T14:39:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">then there’s the question of the BQN interface - <code>\"file.so\" •FFI \"a\"‿\"fn\"‿\"a\"</code>? <code>(•FFI \"file.so\").Function \"a\"‿\"fn\"‿\"a\"</code>? Something else? What to name the <code>•</code>-thing?</p>\n"
  },
  {
    "id": 139020,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T13:15:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(which leads to a question - is this gonna take all arguments as a list monadically, or should there be some way to define dyadic functions?)</p>\n"
  },
  {
    "id": 139019,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T13:14:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m thinking about having two separate FFI modes, toggleable at compile-time (along with a 3rd option of no FFI of course) - one only supporting <code>\"a\"‿\"fn\"‿\"a\"</code> and <code>\"a\"‿\"fn\"‿\"a\"‿\"a\"</code> or something and requiring just <code>dlfcn.h</code>, and the full(er) one, using libffi</p>\n"
  },
  {
    "id": 139018,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T13:11:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(really it should be a union of <code>u64</code> and <code>void*</code>, but some architectures force those to be passed on the stack while both <code>u64</code> and <code>void*</code> separately can be passed in registers)</p>\n"
  },
  {
    "id": 139017,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T13:06:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(now, it’s gonna be just <code>u64</code> for quite a while, but that doesn’t mean we should force it to be so forever)</p>\n"
  },
  {
    "id": 139016,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-27T13:05:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">about <code>u64:a</code> - I think binding the FFI to a specific bit width for BQN objects isn’t good; while 128-bit pointers won’t be a worry for a long time, CHERI already exists (with 128-bit pointers) and <a href=\"https://github.com/CTSRD-CHERI/libffi\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">apparently</a> has a libffi impl, and 32-bit systems shouldn’t necessarily be forced to waste 32 bits if they don’t do tagging. Just <code>a</code> should do.</p>\n"
  },
  {
    "id": 138483,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-09T01:36:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Put up a thing on the function specification format, which mostly reflects the things I think we agree on. BQN correspondence <code>:thing</code> is still a bit more confusing than I’d realized, and we didn’t get to mutability.</p>\n"
  },
  {
    "id": 138482,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-09T00:57:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well dlfcn.h is part of glibc so it’s on the same level as math.h.</p>\n"
  },
  {
    "id": 138481,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-09T00:29:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">exists on android+termux at least (and libffi does too)</p>\n"
  },
  {
    "id": 138480,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-09T00:15:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the current thing isn’t even libffi, but just dlfcn.h &amp; <code>-ldl -rdynamic</code>; perhaps my fears of that not existing are unfounded</p>\n"
  },
  {
    "id": 138479,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T23:59:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And the library wouldn’t necessarily include C code to be built, if you’re using libjpeg or whatever.</p>\n"
  },
  {
    "id": 138478,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T23:58:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">FFI is quite likely to be used in distributed code and it would be frustrating to have to tell your users to rebuild BQN to run your library.</p>\n"
  },
  {
    "id": 138477,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T23:57:06Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think you’d have to specifically be trying to get a Linux system without libffi. So I’d push for building with it by default.</p>\n"
  },
  {
    "id": 138476,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T23:54:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">a compile error of it not being available or something is the big one (though idk if that’s a thing that can happen on anything CBQN compiles on)</p>\n"
  },
  {
    "id": 138475,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T23:27:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">What are the costs of building with FFI exactly?</p>\n"
  },
  {
    "id": 138474,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T22:58:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">…all at the cost of needing to serialize all the config options to a valid directory name in Some Way™; what that’d be, is a good question; sha256? joining together with some escaping &amp; separator? (what about directory name length limit?)</p>\n"
  },
  {
    "id": 138473,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T22:56:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(also allowing extending any of the predefined targets in a non-broken way, i.e. <code>make o3 CC=gcc</code> and <code>make o3 CC=clang</code> would each have their own build directory and incrementally compile side-by-side)</p>\n"
  },
  {
    "id": 138472,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T22:54:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">now with the option of optionally adding an ffi to any build, i’ll finally need to get to autogenerating the <code>t=</code> makefile argument so that that doesn’t require doubling the number of targets</p>\n"
  },
  {
    "id": 138471,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T22:49:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://dzaima.github.io/paste/#0XVBNa9tAEL3vrxisEslOJa3spF@OCk4cl4AJlEIuIZj17ipaulq5q7XbpgRyKL300kvPgZ7av@Vf0lkpJaYHaXf2vXnz5gUBCQK4DJ385MIr8gQ4c6BrznRamIR34AkigTJcr4WEo8YJrZZJ@frxrZckaWN5WhQqKXuEHL89v4DCRO256cMXAtCoG7lAbWkgh@UHs1jWayOiTX@MoDJuNFy4ASzXBcIV0@ghQu7goMU930omzkbDibXR5qkntkhRW4iwHRT20TEeR34GXvb3@551qa78wO4ygIz6rtaYlc2DlYq9lyh9IduZO@JWyuhf4YntQ2fZSre2xouMye3/IXKIryHGf7FSfCdPiOvHqh63xKZkVgpEfKrNLo5K3hm4XGjMz1xLrfIMijyMp6fnk@P56WI2O4O4YpaXuWFObSQODmE@nc0nb94hT2NnbMVnwyrFQ@CwtwdWf7RsBUmKKZBV3bj4QRv3Vlq8It02iOIygCnA9tsP6KVlXclU3DBVsXSacswj7Sz3YHv3a14z4d30CoP1968ww7af2SHZ3v8GirnDkMKIwgGFQwrPKDyn8ILCSw/hh3iGhAwZGVK293/IXw#mixed\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">yay</a></p>\n"
  },
  {
    "id": 138441,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T15:48:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and here is an example of the api in use<br>\n<a href=\"https://gist.github.com/TooTallNate/3797011\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://gist.github.com/TooTallNate/3797011</a></p>\n"
  },
  {
    "id": 138436,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T15:43:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i suppose that was known reading convo</p>\n"
  },
  {
    "id": 138435,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T15:42:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">additional piece of info re libffi and arrays<br>\n<a href=\"https://stackoverflow.com/a/43525176/4650757\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://stackoverflow.com/a/43525176/4650757</a></p>\n"
  },
  {
    "id": 138432,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T15:15:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’m pretty sure a pointer to an object with size n is guaranteed to have the elements n bytes apart</p>\n"
  },
  {
    "id": 138430,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:57:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yeah, the <code>(i8)</code> is just an additional hint.</p>\n"
  },
  {
    "id": 138429,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:56:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh <code>*(i8)</code> is an queryable object like <code>*</code>, just restricted</p>\n"
  },
  {
    "id": 138428,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:55:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Memory.</p>\n"
  },
  {
    "id": 138427,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:55:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">disk?</p>\n"
  },
  {
    "id": 138426,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:51:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Depending on how pointers are represented, I guess you could use <code>*(i8)</code> or something to indicate that the object should only give you methods to access it as <code>i8</code> (is there a disk/BQN type problem here too?).</p>\n"
  },
  {
    "id": 138425,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:44:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh yeah</p>\n"
  },
  {
    "id": 138424,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:42:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think the inconsistency between <code>[4]i8</code> being an array and <code>[n]i8</code> being a pointer in C is worse.</p>\n"
  },
  {
    "id": 138423,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:41:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">In both cases the data is an array, the length is just extra information.</p>\n"
  },
  {
    "id": 138422,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:40:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>*i8</code> taking a length in the result, but a full array in an argument would be confusing though</p>\n"
  },
  {
    "id": 138421,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:39:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d use <code>*i8</code>; <code>*</code> would be for getting a pointer out.</p>\n"
  },
  {
    "id": 138420,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:38:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(<code>\"[n]i8\"</code> could be <code>[]i8</code> or <code>[?]i8</code> or something; the specific syntax is bikesheddable)</p>\n"
  },
  {
    "id": 138419,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:37:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">one option - <code>\"[n]i8\"‿\"fn\"‿\"arg1\"‿\"arg2\"</code> and you call the BQN function as <code>resultLength FN arg1‿arg2</code>, and some random decoration characters to indicate freeing; could even allow <code>[n]i8</code> in the arguments to specify a buffer to allocate</p>\n"
  },
  {
    "id": 138418,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:33:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah that’s a bit complicated</p>\n"
  },
  {
    "id": 138417,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:31:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Unrelated, how do we convert an output pointer to a list? Do we try? I think there are reasonable situations where you know the length and would like the FFI to do the conversion, but then you also have to tell it whether to free the pointer.</p>\n"
  },
  {
    "id": 138416,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:29:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyway; structs can be avoided for a while, and are pretty much orthogonal to the rest of the design</p>\n"
  },
  {
    "id": 138415,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:27:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">reinterpreting separate fields in a struct should be fine</p>\n"
  },
  {
    "id": 138414,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:27:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Which I think can use syntax like <code>{u64:i8, *, i16, [2]i16}</code> without trouble.</p>\n"
  },
  {
    "id": 138413,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:27:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(as another random datapoint, the wayland protocol pads everything to 4 bytes iirc)</p>\n"
  },
  {
    "id": 138412,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:25:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, usually you’ll turn it into a list instead of reinterpreting the whole thing.</p>\n"
  },
  {
    "id": 138411,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:24:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">files usually should be a platform-independent format. FFI struct representations are very-platform-dependent</p>\n"
  },
  {
    "id": 138410,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:23:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also, struct decoding from FFI arguments/return values is not at all a thing that should be related to file parsing anyway imo</p>\n"
  },
  {
    "id": 138409,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:22:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://github.com/gco/xee/blob/master/XeePhotoshopLoader.m#L108\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">infamous PSD rant</a></p>\n"
  },
  {
    "id": 138408,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:21:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also file formats definitely aren’t always padding-free</p>\n"
  },
  {
    "id": 138407,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:19:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(but X also has some pipe-based protocol that might have a different representation)</p>\n"
  },
  {
    "id": 138406,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:19:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">there’s the Xlib stuff (some random struct <a href=\"https://tronche.com/gui/x/xlib/events/keyboard-pointer/keyboard-pointer.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>)</p>\n"
  },
  {
    "id": 138405,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:17:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The use case I have in mind is file formats where the file header is specified to be a serialized struct, pretty much. I think these are all defined in a way that avoids padding? But I’d also imagine C functions for working with them just take a pointer to the data. We could use some examples on how structs are used.</p>\n"
  },
  {
    "id": 138404,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:16:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s reasonable</p>\n"
  },
  {
    "id": 138403,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:16:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Yes.</p>\n"
  },
  {
    "id": 138402,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T13:15:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>{i8,i8}</code> is equivalent to the struct, but is stripped of padding if reinterpreted?</p>\n"
  },
  {
    "id": 138401,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T13:12:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, BQN views it an a sane way and C views it as a C struct. I think we should try getting the length from libffi first, but if that changes a lot between architectures then it makes it harder to write portable BQN code.</p>\n",
    "replyID": 138400,
    "replyName": "dzaima"
  },
  {
    "id": 138400,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T11:05:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">as in, <code>{i8,i8}</code> isn’t actually <code>struct { int8_t a; int8_t b; }</code>?</p>\n",
    "replyID": 138387,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138395,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T03:27:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it looks like</p>\n"
  },
  {
    "id": 138394,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T03:27:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It computes the size then?</p>\n"
  },
  {
    "id": 138393,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T03:23:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/Structures.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">http://www.chiark.greenend.org.uk/doc/libffi-dev/html/Structures.html</a></p>\n"
  },
  {
    "id": 138392,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T03:21:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">We can put an array length on the BQN side, for example <code>*i64:[8]i8</code> to convert to a matrix with cells of 8 elements. Implicit length, like <code>*i64:[]i8</code>, would indicate that the part to the right (<code>i8</code> here) has to divide the element size on the left exactly, and it picks a length so an element is one row.</p>\n"
  },
  {
    "id": 138391,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T03:12:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">An opaque pointer I guess would be representable as <code>*</code> with nothing following. And then if you want the actual numeric value (don’t want object overhead maybe? Pass around an array of pointers with just copies?) we have the possibility of supporting <code>*:i8</code>, <code>**:i8</code> or whatever.</p>\n"
  },
  {
    "id": 138390,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T03:04:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Very rare, glib2 is used by all sorts of things.</p>\n"
  },
  {
    "id": 138389,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:59:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Arch’s libffi isn’t installed by default, but on my system I see:</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">Required By     : ghc-libs  glib2  guile  libp11-kit  llvm-libs  python  ruby  tracker3  wayland</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\" style=\"display: block; right: 0px; left: 0px;\"><div style=\"height: 100%; min-height: 1px; width: 692px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 21px; min-width: 680.6px; padding-right: 0px; padding-bottom: 6px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">Required</span> <span class=\"cm-keyword\">By</span>     <span class=\"cm-keyword\">:</span> <span class=\"cm-keyword\">ghc-libs</span>  <span class=\"cm-keyword\">glib2</span>  <span class=\"cm-keyword\">guile</span>  <span class=\"cm-keyword\">libp11-kit</span>  <span class=\"cm-keyword\">llvm-libs</span>  <span class=\"cm-keyword\">python</span>  <span class=\"cm-keyword\">ruby</span>  <span class=\"cm-keyword\">tracker3</span>  <span class=\"cm-keyword\">wayland</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 6px solid transparent; top: 21px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 51px;\"></div></div></div>\n<p class=\"source-line\" data-source-line=\"4\">Conceivable but pretty rare that someone would not have it I guess.</p>\n",
    "replyID": 138239,
    "replyName": "Rowan"
  },
  {
    "id": 138388,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:38:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Anyway, good night!</p>\n"
  },
  {
    "id": 138387,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:37:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think it probably makes sense to break from C behavior, and we won’t actually be handling the value as a struct.</p>\n"
  },
  {
    "id": 138386,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:36:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyways it’s 4:35</p>\n"
  },
  {
    "id": 138385,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:35:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i mean it’s Probably™ gonna work Most Of The Time™, but that’s not a nice standard to live by</p>\n"
  },
  {
    "id": 138384,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:34:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://stackoverflow.com/a/47662938\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://stackoverflow.com/a/47662938</a></p>\n"
  },
  {
    "id": 138383,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:32:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If we specify that the conversion is done with no padding (ignoring bits, if they even exist), that should be well-defined and work right on the important cases, shouldn’t it?</p>\n"
  },
  {
    "id": 138382,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:29:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">padding</p>\n"
  },
  {
    "id": 138381,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:29:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I did. What’s the problem?</p>\n"
  },
  {
    "id": 138380,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:28:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">cause that’s not gonna work</p>\n"
  },
  {
    "id": 138379,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:27:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you mean <code>[16]{i8,i8}:i16</code> or something?</p>\n"
  },
  {
    "id": 138378,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:25:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And treat a struct as a primitive type I guess?</p>\n"
  },
  {
    "id": 138377,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:23:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah <code>:T1</code> should just apply to an immediate <code>*T2</code> or <code>[n]T2</code> to the left of it</p>\n"
  },
  {
    "id": 138376,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:22:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If you try to keep structure with array-of-array, you run into <code>[4][5]i8:i32</code>. Although that doesn’t really have to be allowed.</p>\n"
  },
  {
    "id": 138375,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:21:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think you have to flatten <code>[16]u16:i8</code> because you can’t not flatten <code>[16]u16:i32</code>, so pointer-to-array is the problem.</p>\n"
  },
  {
    "id": 138374,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:18:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh hmm <code>*[16]u16</code> being rank 2 is indeed a question</p>\n"
  },
  {
    "id": 138373,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:18:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But there is if you convert each <code>u16</code> to 2 <code>i8</code>s. And <code>*[16]u16</code> could have rank 2 either way.</p>\n"
  },
  {
    "id": 138372,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:17:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh right it could be <code>T1‿T2 •bit._cast ≍GetData \"[16]T1\"</code></p>\n"
  },
  {
    "id": 138371,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:17:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what’s the alternative? there’s no structure to <code>[16]u16</code></p>\n",
    "replyID": 138369,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138370,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:16:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Obviously it can accept shape on the incoming side.</p>\n"
  },
  {
    "id": 138369,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:16:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Does that mean it all gets flattened into a list? I guess that’s okay.</p>\n"
  },
  {
    "id": 138368,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:15:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">with <code>T1</code> being legal to be a hypothetical temporary <code>i64</code></p>\n"
  },
  {
    "id": 138367,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:14:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i imagine <code>[16]T1:T2</code> would be <code>T1‿T2 •bit._cast GetData \"[16]T1\"</code></p>\n"
  },
  {
    "id": 138366,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:13:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh</p>\n"
  },
  {
    "id": 138365,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:13:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The BQN-side type comes after it.</p>\n"
  },
  {
    "id": 138364,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:12:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">2 field struct?</p>\n"
  },
  {
    "id": 138363,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:12:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>:</code> being what?</p>\n"
  },
  {
    "id": 138362,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:12:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Like, is there a sensible and consistent answer to represent <code>[16]u16:i8</code>, <code>[16]u16:i32</code>, and pointers to those?</p>\n"
  },
  {
    "id": 138361,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:11:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, signedness doesn’t matter since we’re reinterpreting regardless, I’m just picking randomly.</p>\n"
  },
  {
    "id": 138360,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:10:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">probably best to just not bother with unsigned</p>\n"
  },
  {
    "id": 138359,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:09:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Arrays like <code>[16]u16</code> are worrying then.</p>\n"
  },
  {
    "id": 138358,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:08:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(i am well aware you very much know that, but that’s pretty much what it comes down to afaict)</p>\n"
  },
  {
    "id": 138357,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:07:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>i64</code> has a constant width, whereas <code>*i64</code> doesn’t, so an array of the former can have an optimized non-nested representation</p>\n"
  },
  {
    "id": 138356,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:07:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Like if you add another <code>*</code> and go to <code>**i64</code>, why is it the final <code>*i64</code> that’s affected and not the <code>i64</code>?</p>\n"
  },
  {
    "id": 138355,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:06:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if you really wanted to, <code>*i64</code> could give an 8-column character matrix</p>\n"
  },
  {
    "id": 138354,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:05:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I get that it doesn’t directly cause problems, it just feels to me like it’s indicating there’s some structure there that shouldn’t be ignored. Hard to pin down.</p>\n"
  },
  {
    "id": 138353,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:04:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so <code>*i64</code> and <code>i64</code> both being character arrays isn’t too weird</p>\n"
  },
  {
    "id": 138352,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:03:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">like, <code>*i8</code> and <code>*i32</code> would both be number arrays in BQN</p>\n"
  },
  {
    "id": 138351,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:03:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">There are complicated things like converting a high-rank array to pointer-to-pointer format that definitely would require more specification, but the FFI probably shouldn’t be doing that.</p>\n"
  },
  {
    "id": 138350,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T02:03:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you definitely need separate types in the signature, but the consumed &amp; produced BQN objects corresponding to those don’t need to be distinct</p>\n"
  },
  {
    "id": 138349,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T02:01:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So, is it okay to just specify one BQN-side atomic type in all cases? That makes things easy if so, but I feel like it’s probably not enough.</p>\n"
  },
  {
    "id": 138348,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T02:00:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ha i like that since <code>\"\"</code> would be <code>⟨⟩</code></p>\n"
  },
  {
    "id": 138347,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:59:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(which’d even hint at the fact that the actual return value would be <code>@</code>)</p>\n"
  },
  {
    "id": 138346,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:58:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">void could even be <code>@</code></p>\n"
  },
  {
    "id": 138345,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:57:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Splitting up components does solve a lot of problems (hey, void can be <code>\"\"</code>).</p>\n"
  },
  {
    "id": 138344,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:57:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and will happen anyway</p>\n"
  },
  {
    "id": 138343,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:57:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">BQN side being the same for multiple types isn’t bad</p>\n"
  },
  {
    "id": 138342,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:56:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The BQN&lt;=&gt;C stuff is much more important. Seems pretty tricky, like how can we convert i64 to 8 chars and also *i64 to list of chars without weirdness about both BQN sides being the same?</p>\n"
  },
  {
    "id": 138341,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:54:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and <code>\"name arg0 arg1\"</code> or <code>\"name ← arg0 arg1\"</code> for returning nothing?</p>\n"
  },
  {
    "id": 138340,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:54:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">splitting up components means way easier transitioning to rich arrays</p>\n"
  },
  {
    "id": 138339,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:53:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">If we’re splitting components up, sure.</p>\n"
  },
  {
    "id": 138338,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:53:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It would be kind of nice to be able to write nothing for the return type instead of <code>void</code>, so I kind of like <code>\"name res ← arg0 arg1\"</code>.</p>\n"
  },
  {
    "id": 138337,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:52:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also that’s just a <code>⌽⌾(2⊸↑)</code> away</p>\n"
  },
  {
    "id": 138336,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:51:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">But you kind of want to separate the result from argument type then.</p>\n"
  },
  {
    "id": 138335,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:51:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so like <code>\"void\"‿\"fn\"‿\"i64 but give it to me as a list of 8-byte ints please\"‿\"*i32 that will be mutated and please give the mutated version to me\"</code> is still <code>ret‿name‿arg1‿arg2</code></p>\n"
  },
  {
    "id": 138334,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:51:19Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">t ← 16‿'c'  \nresult‿name‿t‿'f'  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 35px; min-width: 140.317px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">t</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-number\">16</span><span class=\"cm-keyword\">‿</span><span class=\"cm-string\">'c'</span>  </span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">result‿name‿t‿</span><span class=\"cm-string\">'f'</span>  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 35px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 59px;\"></div></div></div>\n"
  },
  {
    "id": 138333,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:51:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Name first is nice because it’s the only thing you need to read a lot of the time. So if you have a list with one specifier string on each line then you can scan the names easily.</p>\n"
  },
  {
    "id": 138332,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:50:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’d be specified in the individual types</p>\n"
  },
  {
    "id": 138331,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:50:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and would result,arg1,arg2 include the constness and BQN&lt;=&gt;C translation?</p>\n"
  },
  {
    "id": 138330,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:49:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>name‿result‿arg1‿arg2</code> or <code>⟨name ⋄ result‿arg1‿arg2⟩</code> or <code>⟨name ⋄ result ⋄ arg1‿arg2⟩</code> are options i guess but not really</p>\n"
  },
  {
    "id": 138329,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:48:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">eh, result-name-arg1-arg2 is standard enough that not even i think it’s worth bikeshedding over</p>\n",
    "replyID": 138327,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138328,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:47:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">something like that</p>\n"
  },
  {
    "id": 138327,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:47:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I meant like, ordering of the result type and name, maybe separating name from the rest, so actual arrangement.</p>\n"
  },
  {
    "id": 138326,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:46:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">something like <code>\"ret\"‿\"name\"‿(\"arg1field1\",\"arg1field2\")‿\"arg2\"</code> ?</p>\n"
  },
  {
    "id": 138325,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:45:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I think <code>\"ret\"‿\"name\"‿\"arg1\"‿\"arg2\"</code> is pretty much guaranteed acceptable for depth&gt;1 - the individual type format could be changed or extended, and there’s always the option for adding a depth=1 single string version if wanted</p>\n",
    "replyID": 138318,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138324,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:45:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Like, C might return an i64 array, which can’t be represented directly, so you should be able to specify that it’s reinterpreted as 8 1-byte characters or 64 booleans, etc.</p>\n"
  },
  {
    "id": 138323,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:44:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">“indicating the BQN to C translation” could you elaborate?</p>\n",
    "replyID": 138318,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138322,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:43:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">You just have to trust the FFI caller to declare this right.</p>\n",
    "replyID": 138319,
    "replyName": "Rowan"
  },
  {
    "id": 138321,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:43:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you’d definitely specify your expectations on mutation in the signature</p>\n",
    "replyID": 138319,
    "replyName": "Rowan"
  },
  {
    "id": 138320,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:43:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Assuming we agree on basically Singeli-style stuff like <code>[3]*f32</code> for array of 3 pointers to floats.</p>\n"
  },
  {
    "id": 138319,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:43:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">mutability is hard, because you have no idea based on fn signature if its going to change the value that some pointer is referencing</p>\n"
  },
  {
    "id": 138318,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:41:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Concerns I’m thinking about with this are overall layout (mostly bikeshedding), mutability or constness, and indicating the BQN to C translation.</p>\n"
  },
  {
    "id": 138317,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:40:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138316,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:39:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Let’s do strings first, sounds easier to me.</p>\n"
  },
  {
    "id": 138315,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:37:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and then those types could be strings or “rich arrays” independently of each other</p>\n"
  },
  {
    "id": 138314,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:35:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">also an option is <code>\"ret\"‿\"name\"‿\"arg1\"‿\"arg2\"</code>, where you don’t need to split on spaces</p>\n"
  },
  {
    "id": 138313,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:35:40Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Should be possible to implement either in terms of the other without a lot of difficulty though.</p>\n"
  },
  {
    "id": 138312,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:35:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">It’s easier to generate programmatically.</p>\n"
  },
  {
    "id": 138311,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:34:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">True, distinguish based on depth which is ugly but totally consistent with the rest of BQN.</p>\n"
  },
  {
    "id": 138310,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:34:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it might even have some advs</p>\n"
  },
  {
    "id": 138309,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:34:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i mean i dont hate that</p>\n"
  },
  {
    "id": 138308,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:33:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">could be both really</p>\n"
  },
  {
    "id": 138307,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:33:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so would a 10-array of 16-bit characters be   <code>10‿(16‿'c')</code>?</p>\n"
  },
  {
    "id": 138306,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:32:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Even an array of those sounds ugly.</p>\n"
  },
  {
    "id": 138305,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:31:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well the nice thing about it is that it could share the <code>•bit._cast</code> model where for example <code>16‿'c'</code> indicates a 16-bit character.</p>\n"
  },
  {
    "id": 138304,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:31:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i prefer keeping the type sig separate from the fn name as in <code>\"V←V V\"‿\"yourName\"</code></p>\n"
  },
  {
    "id": 138303,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:30:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Rich array is lower-level in a sense, but if you’ve got pointer to pointer to function whatever then I think you’d need a nested array to encode it.</p>\n"
  },
  {
    "id": 138302,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:30:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(my original proposal v2 was <code>\"V←V V\"‿\"yourName\"</code> actually, which’d map to <code>\"V yourName V V\"</code> in <code>⎕NA</code>-like syntax)</p>\n"
  },
  {
    "id": 138301,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:30:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what would a rich array look like? would i32 be an atom or a string?</p>\n"
  },
  {
    "id": 138300,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:29:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>i32←i32 i32</code> vs <code>i32 fn i32 i32</code>, barely any difference</p>\n"
  },
  {
    "id": 138299,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:29:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but yea feel free to… ya know… get sleep.</p>\n"
  },
  {
    "id": 138298,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:29:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The big question is whether it’s a string, or a rich array that doesn’t have to be parsed. Sounds like we’re going with string, which I’m slightly favoring at this point.</p>\n"
  },
  {
    "id": 138297,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:29:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it sounds like •NA is one style, and “i32←i32 i32” is another</p>\n"
  },
  {
    "id": 138296,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:28:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and my “tomorrow” i mean today because it’s 03:27)</p>\n"
  },
  {
    "id": 138295,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:28:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">To be totally clear, in this conversation I’m using “object” to mean something that behaves basically like a BQN namespace, and probably has namespace type, but could have an arbitrary representation and behavior underneath.</p>\n"
  },
  {
    "id": 138294,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:27:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and by “now” i mean tomorrow because imma go sleep soon hopefully)</p>\n"
  },
  {
    "id": 138293,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:27:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyway; for now i really just want to get the syntax decided on enough for “take 1 (or 2) BQNV, return BQNV”</p>\n"
  },
  {
    "id": 138292,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:26:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah that makes sense</p>\n"
  },
  {
    "id": 138291,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:26:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">64-bit integers I’m thinking you’d usually store as 8 characters or whatever and use the built-in cast-y thing to transfer to and from C.</p>\n"
  },
  {
    "id": 138290,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:25:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, “some kind of object” on the BQN side</p>\n"
  },
  {
    "id": 138289,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:25:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Then it would be a no-field object that you only interact with by passing it through the FFI.</p>\n"
  },
  {
    "id": 138288,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:25:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(also: 64-bit integers)</p>\n"
  },
  {
    "id": 138287,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:24:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but with <code>FILE*</code> you know none of that, but still may want to be able to transfer it to &amp; from BQN</p>\n",
    "replyID": 138284,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138286,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:24:12Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That could accomodate safe pointers too, that do range checking on your indices (if read/write even have indices).</p>\n"
  },
  {
    "id": 138285,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:23:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">mutate the contents of the pointer without returning it</p>\n"
  },
  {
    "id": 138284,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T01:23:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’d expect a pointer maps to some kind of object. Could have no fields, or some functions to read/store values.</p>\n"
  },
  {
    "id": 138283,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:21:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but regular pointers have some issues too - the invoked function could mutate it, and you may or may not want to see the mutated version</p>\n"
  },
  {
    "id": 138282,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:20:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah. for all you know <code>FILE*</code> might not even be a pointer really</p>\n"
  },
  {
    "id": 138281,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:19:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yea. like is it an opaque pointer that you should never ever deref? does that become illegal?</p>\n"
  },
  {
    "id": 138280,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:19:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">¯\\_(ツ)_/¯</p>\n"
  },
  {
    "id": 138279,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:19:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh, as in what that maps to in BQN</p>\n"
  },
  {
    "id": 138278,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:18:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">in libffi that’d be just a regular pointer</p>\n",
    "replyID": 138276,
    "replyName": "Rowan"
  },
  {
    "id": 138277,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:18:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">anyway, structs aren’t too important for an initial version</p>\n"
  },
  {
    "id": 138276,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:18:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what if its a struct that has a <code>FILE *fp</code>?</p>\n"
  },
  {
    "id": 138275,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:18:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">but yeah you need to translate all the struct fields recursively to the string form</p>\n"
  },
  {
    "id": 138274,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:17:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>⎕NA</code> uses <code>{F8 I2}</code> for structs</p>\n"
  },
  {
    "id": 138273,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:17:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you’d have the explicit full type</p>\n"
  },
  {
    "id": 138272,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:17:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you wouldn’t actually have <code>bar</code></p>\n"
  },
  {
    "id": 138271,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:15:48Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">okay, to know what type bar is, would you need to parse a header file, or define it in BQN?</p>\n"
  },
  {
    "id": 138270,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:14:55Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">like <code>[i32 bar] baz i32</code> or something</p>\n"
  },
  {
    "id": 138269,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:14:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you have “some notation for grouping types together”</p>\n"
  },
  {
    "id": 138268,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:14:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">how would you differentiate if the function is bar that takes baz, i32, or baz that returns a tuple of i32,bar ?</p>\n<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">i32 bar baz i32</textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 21px; min-width: 112.25px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">i32</span> <span class=\"cm-keyword\">bar</span> <span class=\"cm-keyword\">baz</span> <span class=\"cm-keyword\">i32</span></span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 21px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 45px;\"></div></div></div>\n"
  },
  {
    "id": 138267,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:11:50Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">structs are solvable, with some notation for grouping types together</p>\n"
  },
  {
    "id": 138266,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:10:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">okay, so typedefs are a problem, like an arbitrary struct.</p>\n"
  },
  {
    "id": 138265,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:10:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i mean <code>\"/path/to/foo.so\" •NA \"i32 bar i32 i32\"</code> works just fine, you don’t need random mangling</p>\n"
  },
  {
    "id": 138264,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:10:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">no idea not important</p>\n"
  },
  {
    "id": 138263,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:09:41Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">foo ← \"⇐/path/to/foo.so\"  \n•NA 'i32 foo‿bar i32‿i32'   </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 35px; min-width: 203.467px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">foo</span> <span class=\"cm-apl-arrow\">←</span> <span class=\"cm-string\">\"⇐/path/to/foo.so\"</span>  </span></pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">•NA</span> <span class=\"cm-string\">'i32 foo‿bar i32‿i32'</span>   </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 35px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 59px;\"></div></div></div>\n"
  },
  {
    "id": 138262,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:08:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">maybe dies of sadness, maybe doesn’t and does random garbage instead</p>\n"
  },
  {
    "id": 138261,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:08:22Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">your computer gets sad</p>\n"
  },
  {
    "id": 138260,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:08:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it gets sad</p>\n"
  },
  {
    "id": 138259,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:08:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yea im spitballing take me srsly but not literally</p>\n"
  },
  {
    "id": 138258,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:07:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what happens if the FFI function has some other typedef?</p>\n"
  },
  {
    "id": 138257,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:07:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i don’t see a reason to cram the so file name in the same string though</p>\n"
  },
  {
    "id": 138256,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:07:11Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138255,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:07:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the left is the return type</p>\n"
  },
  {
    "id": 138254,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:07:03Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">left side return, right side list of types</p>\n"
  },
  {
    "id": 138253,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:06:53Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh i see nvm</p>\n"
  },
  {
    "id": 138252,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:06:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">what if theres more than 2 args?</p>\n"
  },
  {
    "id": 138251,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:06:21Z",
    "html": "<textarea class=\"codefence\" \"=\"\" data-mode=\"\" style=\"display: none;\">•NA 'i32 foo.so‿bar i32'  </textarea><div class=\"CodeMirror cm-s-default\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 11px;\"><textarea style=\"position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;\" wrap=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" tabindex=\"0\"></textarea></div><div class=\"CodeMirror-vscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"min-width: 1px; height: 0px;\"></div></div><div class=\"CodeMirror-hscrollbar\" tabindex=\"-1\" cm-not-content=\"true\"><div style=\"height: 100%; min-height: 1px; width: 0px;\"></div></div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"></div><div class=\"CodeMirror-scroll\" tabindex=\"-1\" draggable=\"true\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: -6px; border-right-width: 24px; min-height: 21px; min-width: 189.433px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div style=\"position: relative; outline: none;\" role=\"presentation\"><div class=\"CodeMirror-measure\"><pre class=\"CodeMirror-line-like\"><span>xxxxxxxxxx</span></pre></div><div class=\"CodeMirror-measure\"></div><div style=\"position: relative; z-index: 1;\"></div><div class=\"CodeMirror-cursors\"><div class=\"CodeMirror-cursor\" style=\"left: 4px; top: 0px; height: 13.45px;\">&nbsp;</div></div><div class=\"CodeMirror-code\" role=\"presentation\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\"><span class=\"cm-keyword\">•NA</span> <span class=\"cm-string\">'i32 foo.so‿bar i32'</span>  </span></pre></div></div></div></div></div><div style=\"position: absolute; height: 24px; width: 1px; border-bottom: 0px solid transparent; top: 21px;\"></div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 45px;\"></div></div></div>\n"
  },
  {
    "id": 138250,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:05:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"http://help.dyalog.com/13.1/Content/Language/System%20Functions/na.htm\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">http://help.dyalog.com/13.1/Content/Language/System Functions/na.htm</a></p>\n"
  },
  {
    "id": 138249,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:04:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and then there’s <a href=\"https://github.com/mlochbaum/JSound/blob/master/filter.ijs#L8-L21\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the J thing</a></p>\n"
  },
  {
    "id": 138248,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:03:56Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">like i found when googling if libffi could be compiled to wasm, but its mostly about how libffi is used in ghc.<br>\n<a href=\"https://www.tweag.io/blog/2022-03-17-libffi-wasm32/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.tweag.io/blog/2022-03-17-libffi-wasm32/</a></p>\n"
  },
  {
    "id": 138247,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:03:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">dyalog has that in <code>⎕NA</code> as <code>⎕NA 'I4 yourSOFile|functionName I4 I4'</code> if i’m reading correctly</p>\n"
  },
  {
    "id": 138246,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:00:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">or like “i32←A[i32] A[i32]”</p>\n"
  },
  {
    "id": 138245,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T01:00:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138244,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T01:00:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so the user would have to define a type signature, something like “V←V V”?</p>\n"
  },
  {
    "id": 138243,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:59:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">or, a concern at all really</p>\n"
  },
  {
    "id": 138242,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:59:09Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah none of those are much of a concern</p>\n"
  },
  {
    "id": 138241,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:58:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">here are libffi’s “missing features”</p>\n<p class=\"source-line\" data-source-line=\"2\">•Variadic closures.</p>\n<p class=\"source-line\" data-source-line=\"4\">•There is no support for bit fields in structures.</p>\n<p class=\"source-line\" data-source-line=\"6\">•The “raw” API is undocumented.</p>\n<p class=\"source-line\" data-source-line=\"8\">•The Go API is undocumented.</p>\n"
  },
  {
    "id": 138240,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:57:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">probably</p>\n"
  },
  {
    "id": 138239,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:56:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i also have ffi.h in /usr/include/x86_64-linux-gnu, but i assume thats because its been installed as a dependency at some point.</p>\n"
  },
  {
    "id": 138238,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:56:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for specifying types &amp; whatnot</p>\n"
  },
  {
    "id": 138237,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:56:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">so the question for what would be what the BQN-side interface is</p>\n"
  },
  {
    "id": 138236,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:55:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and <code>#include &lt;ffi.h&gt;</code> appears to be a thing just by default (on my system at least)</p>\n"
  },
  {
    "id": 138235,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:51:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">huh <code>make o3 LDFLAGS='-lffi'</code> does Something™</p>\n"
  },
  {
    "id": 138234,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:40:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(libffi docs: <a href=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/Using-libffi.html#Using-libffi\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">annoying html tree</a>, <a href=\"http://gensoft.pasteur.fr/docs/libffi/3.3/libffi.pdf\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">annoying pdf</a>)</p>\n"
  },
  {
    "id": 138233,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:39:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s pretty much what my proposal is to do</p>\n",
    "replyID": 138231,
    "replyName": "Rowan"
  },
  {
    "id": 138232,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:37:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">for example, if it broke a lot of user code created using model 1</p>\n"
  },
  {
    "id": 138231,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:37:28Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">is there a danger in starting with model 1, before attempting model 2?</p>\n"
  },
  {
    "id": 138230,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:33:20Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 1 can be considered as a very tiny subset of model 2</p>\n"
  },
  {
    "id": 138229,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:31:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">2 questions: are the models mutually exclusive? would the models be equally capable of implementing the use cases?</p>\n"
  },
  {
    "id": 138228,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:31:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i added a list of “use cases”</p>\n"
  },
  {
    "id": 138227,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:20:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138226,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:20:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Given that the complications are dealing with multiple architectures, I’d expect the compiled code for any given architecture to be small enough.</p>\n",
    "replyID": 138224,
    "replyName": "dzaima"
  },
  {
    "id": 138225,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:19:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I’ll implement this if I have to, anything less is not usable to me.</p>\n"
  },
  {
    "id": 138224,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:18:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">if it’s very tiny, maybe it’s includeable. If not, I’d rather have it as an external module</p>\n",
    "replyID": 138221,
    "replyName": "Rowan"
  },
  {
    "id": 138223,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:15:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">J does apparently have about <a href=\"https://github.com/jsoftware/jsource/blob/master/jsrc/x15.c\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">1500 lines</a> to handle things.</p>\n"
  },
  {
    "id": 138222,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:14:38Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">most of the complaints were about the rantiness, or “yeah of course C doesn’t have an ABI”; the latter of which does not at all help us if we want to use C ABI</p>\n",
    "replyID": 138219,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138221,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:13:51Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">or is including that undesired for reasons</p>\n"
  },
  {
    "id": 138220,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:13:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">are there libraries that handle subtleties in calling conventions? for example libffi?</p>\n"
  },
  {
    "id": 138219,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:12:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I mean, I saw some highly skeptical discussion and skipped the article.</p>\n"
  },
  {
    "id": 138218,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:11:25Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(<a href=\"https://gankra.github.io/blah/c-isnt-a-language/#c-doesnt-actually-have-an-abi\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">obliagtory article/rant</a> about C ABI/calling conventions, which you’ll have seen if you had opened hn some 20 days ago)</p>\n"
  },
  {
    "id": 138217,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:09:05Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Idea in model 1 is that C must provide a BQN function like <code>BQNV yourName(BQNV w, BQNV x)</code>, and in model 2 it provides whatever C function and BQN has to deal with it.</p>\n"
  },
  {
    "id": 138216,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:08:35Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">fixed</p>\n"
  },
  {
    "id": 138215,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:08:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138214,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:07:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">JNI &lt;=&gt; BQN Calling Convention ?</p>\n"
  },
  {
    "id": 138213,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:07:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’s backwards to what I assumed too</p>\n"
  },
  {
    "id": 138212,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:07:24Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That’s backwards from what I meant. Which isn’t a good sign for those names.</p>\n"
  },
  {
    "id": 138211,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:07:08Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"http://java-native-access.github.io/jna/5.11.0/javadoc/overview-summary.html#marshalling\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here’s</a> a fun wall of text about JNA type marshalling (hey that fits)</p>\n"
  },
  {
    "id": 138210,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-08T00:05:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ok added calling convention to titles</p>\n"
  },
  {
    "id": 138209,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:04:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(where the corresponding java is <a href=\"https://github.com/HumbleUI/JWM/blob/d877b88ebdabfe1442ba734eda1a4afdee147914/linux/java/WindowX11.java#L177-L182\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>)</p>\n"
  },
  {
    "id": 138208,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-08T00:02:00Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><a href=\"https://github.com/HumbleUI/JWM/blob/d877b88ebdabfe1442ba734eda1a4afdee147914/linux/cc/WindowX11.cc#L382-L409\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here’s</a> some random JNI thing in JWM (there’s a bunch of it everywhere) - C++ defining X11 interfaces &amp; things, and exporting it directly to Java names</p>\n"
  },
  {
    "id": 138207,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-08T00:01:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">The difference seems to be which language dictates the prototype of the function at the boundary, so maybe it makes sense to refer to them as BQN calling convention versus C calling convention.</p>\n"
  },
  {
    "id": 138206,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:59:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">plz correct stuff if its wrong</p>\n"
  },
  {
    "id": 138205,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:59:39Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Is there an APL-family example of the model 1 thing? What do people use JNI for?</p>\n"
  },
  {
    "id": 138204,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:59:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">all good. its why the military is so strict w/ names of things. both of you understand it much better than i do, so im constantly being like “wait which model is this”</p>\n"
  },
  {
    "id": 138203,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:58:10Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh damn i messed up the names didn’t i</p>\n"
  },
  {
    "id": 138202,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:57:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, so the opposite order to my bullet points at the top.</p>\n",
    "replyID": 138197,
    "replyName": "dzaima"
  },
  {
    "id": 138201,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:56:49Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">oh right yeah others can edit others answers</p>\n"
  },
  {
    "id": 138200,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:56:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">For <code>filter</code>, I have a C function that mutates an array of floats, and I want to call it. Obtaining a pointer I can mutate with the header sounds annoying and extremely error prone, and then I have to get the result into a BQN value somehow.</p>\n"
  },
  {
    "id": 138199,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:56:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">marshall/dzaima feel free to edit my answers its me trying to get a better understanding.</p>\n"
  },
  {
    "id": 138198,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:55:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 2 is what you want basically</p>\n"
  },
  {
    "id": 138197,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:55:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 1 is where C is aware of BQN (by e.g. my header); model 2 is where C doesn’t (necessarily) know about BQN and just defines regular C functions, and the BQN side specifies the argument types &amp; whatnot</p>\n"
  },
  {
    "id": 138196,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:54:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(but I am starting to like the idea that model 1 is just a very very restricted subset of model 2)</p>\n"
  },
  {
    "id": 138195,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:54:01Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t know what 1 and 2 refer to anymore. What’s the difference between JNI and JNA?</p>\n"
  },
  {
    "id": 138194,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:52:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t expect it to be used directly much, but, indeed, more to build more advanced interfaces (while not being restricted to whatever ABI subset the implementation has)</p>\n",
    "replyID": 138188,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138193,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:51:43Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">not the <code>filter</code> thing?</p>\n",
    "replyID": 138192,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138192,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:50:47Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">No, I don’t have anything I’d use it for.</p>\n",
    "replyID": 138189,
    "replyName": "Rowan"
  },
  {
    "id": 138191,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:50:44Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Is the code regular enough to be produced with a DSL? For example, Singeli produces SIMD instructions.</p>\n"
  },
  {
    "id": 138190,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:49:32Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">loading a symbol from a <code>.so</code> is like 5 lines or something. Invoking arbitrary functions for multiple ABIs with &gt;4 arguments is hundreds? thousands?</p>\n",
    "replyID": 138184,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138189,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:49:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Marshall, do you have an example of what the model 2 JNA-Like FFI would look like in practice?</p>\n"
  },
  {
    "id": 138188,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:48:29Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Well, implement this, see how many people use it. If array programmers enjoyed writing this sort of code, CBQN would have a lot more contributors.</p>\n"
  },
  {
    "id": 138187,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:46:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and if you FFI over that model 1 interface to something that’s not C, you now have to write code in that other language that’s not C)</p>\n"
  },
  {
    "id": 138186,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:45:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and “have to write C, therefore not powerful” is not valid logic for everyone</p>\n"
  },
  {
    "id": 138185,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:44:37Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">ability to implement <code>•SaneFFI</code> is a feature of model 1, not a bug</p>\n"
  },
  {
    "id": 138184,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:43:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">And even to do that, I’d have to write my own .so handler from scratch?</p>\n"
  },
  {
    "id": 138183,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:41:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I mean, it’s not powerful, because it forces everything to happen on the C side. It’s “implement your own BQN primitive in C” and the only primitive I would want to implement is <code>•SaneFFI</code>.</p>\n"
  },
  {
    "id": 138182,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:40:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">really that <code>\"path/to/compiled/file.so\" •LoadNativeFnOrWhatever arity‿\"yourName\"</code> could be expanded to <code>\"path/to/compiled/file.so\" •LoadNativeFnOrWhatever \"V←V V\"‿\"yourName\"</code> or something, where <code>\"V←V V\"</code> is the signature of the function, however we decide for it to look; and the initial version could support some very trivial signatures and nothing else</p>\n"
  },
  {
    "id": 138181,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:38:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">yeah</p>\n"
  },
  {
    "id": 138180,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:38:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Also passing three values in is several times more complicated than just two.</p>\n"
  },
  {
    "id": 138179,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:38:14Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’s mean to be powerful, not simple</p>\n"
  },
  {
    "id": 138178,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:37:26Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">right</p>\n"
  },
  {
    "id": 138177,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:37:15Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Okay, that’s a little better. You’re still forcing me to write the buffer allocation code though, and skipping the allocation when possible is complicated.</p>\n"
  },
  {
    "id": 138176,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:36:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(at the cost of not being zero copy)</p>\n"
  },
  {
    "id": 138175,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:36:04Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’ll work regardless of the type</p>\n"
  },
  {
    "id": 138174,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:35:52Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">you can just <code>bqn_readI32Arr</code></p>\n"
  },
  {
    "id": 138173,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:35:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">So if I want to write a C algorithm that works on an array of 32-bit ints, I still have to write the code to handle every possible BQN type?</p>\n"
  },
  {
    "id": 138172,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:35:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">my paste is for model 1</p>\n",
    "replyID": 138168,
    "replyName": "Rowan"
  },
  {
    "id": 138171,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:35:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Marshall, could you explain your reasons?</p>\n"
  },
  {
    "id": 138170,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:33:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">:︎)</p>\n"
  },
  {
    "id": 138169,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:33:21Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I would never ever want to use this model.</p>\n"
  },
  {
    "id": 138168,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:32:59Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">added to answer</p>\n"
  },
  {
    "id": 138167,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:32:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Oh, there’s a comment.</p>\n"
  },
  {
    "id": 138166,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:31:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">i’ve given <a href=\"https://dzaima.github.io/paste/#0jVfNbhs3EL7vUwzkQyVDiSHZEIS6LdAYNRCgcFA0SY8Wtcu1GFHkhuRKUYIAufYJes8z5F6gfRM/SWdIane1Wks9yOYuv/nml5zZM6FSWWb8B@uyjOfPFz8lZ41XQrn2q7nWkt4lbltwFIESQZOrewcvfrt7e50kFxfgNOCOUBwYKObEmkNeqtQJrYa7HY2/jXALv9A5uAWCtJR6I9QDWPGAgqXh9nsiJGrY6tLcsRXv@6cPg@sndjZDaCKYykBqloFwIBRtBb1Wr7hbkDIplhxmvYK5xYXTF6leFULy7CLHv8@t7sHjl6@/IsOdd@VWvTJ/LJjja26AGeG2j1/@7u1M6M0SDFdOgbm/TwtZWvol/IPjRkHvpgefkjOuMpEnyVqLDObv1X1ueLR9jTYnmS7nkgP4PadvJ1dQ7QJ6FLNha9n1IKE0XI4xDUHoZsHMaaE9TYaz7EBXprlV37md@NMqSfpA6THpxBu11hh7ysmuQBIvT8CUSTkKdHkjpXv74/39ZuqJn6@ZLDFVXkOq0QKsAAZogl0AV2thtFpx5WpSkgic1qRNbbRx87sz/RSdPAfrTHBxp8L6ClallM8w1SuB5cszePP6dvqMK1Kdkcw18Pclk3RCZkEL/OjpV2zJCUwaEDcksOSK1gNUhAaX0kWst9Hi2yqc@IB1Rx5TGrAqDdtCxhxLrPjIY4bmulRZ8I0F29mSQWF0VqaOjqBdsIIP4d@//vn2@OfXPVnD1LISrQvXS8T3aLLHn8O8zAP/Bk9HrDhPwAZ4CPnKUhYQVAe3EOmyRQOFtjGLwScpgUtO2bJk7IzNkAbjSGG3BU9FLjDGSJtzU1voy3L6szGhrM9JAdXtlAwNlrbAowmi98GjSeVWC3w5PgDTiegEv2yZUVnRCW6ZUVnRCW6ZUVnRBcYjvgcOd8ATZryav9sDhwVUYJ@fFJF4xvT8HU@drbNKNY3a@vGWyZrHifb8dVFdIqK9HeMVy4EKqC6xWKp1CKnYDwhCDE8QxLB2EoS4niCIoe4iiLE@RlCHv4vg5nQM6mruJDgdg7rCOwlOx6Cu@i6CWELHCOqqigTtQnjL0yoIeCv@j8SjRFvgeKI7BI4nti1wKpEHPpxMXFvDyUR1CRxNTFvgIBF7AlV/akg0umE9Enqp/nnVdG7VaBCud7wjGi36afz4AN9u7ZsFV0AjAM@GMLIOm96Db6v5DOc7bBZznOlQfLbvw4toT79pXDU/IL7tdBQYNwXGLQFvUCYMXn/Q/8iNxlmj2A5iH6aWByxNubWVx1yVK/iEDc3di@kw/B9N4uJyHBb55Cos0ghJd5B0BynVEj6TKb/I10jtbQ9L70CwiR7r5k0XNlM4dsstlJaHwTsOX9irOU7gIPIwaAQmw3ESV2HASbXBWaTQOMHi5Ezu@BkbcCTBtiFWRWjRjNioTTdoNrqUGaUFs8Tkhm1tZN55MkQNpcVAWrb7DiCVZCQyxfiGQGIAHT7LbdLoopXDL6dQ@9vonDVgNNkD7LplDbgc14BGh6wA1NcqQGOgqAA3TRsaQ0QNaNrQGBxqQNOGro@Kz/FL4j8#C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">a whole header file</a></p>\n"
  },
  {
    "id": 138165,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:31:02Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">They’re not models, they’re use cases, and I don’t think you’ve really said what your model is.</p>\n"
  },
  {
    "id": 138164,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:30:13Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 1 requires code for each cpu+os anyway, to decide how 64-bit things get passed, how registers vs stack are managed; model 2 requires precisely zero per-cpu/per-os code</p>\n"
  },
  {
    "id": 138163,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:27:34Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it shouldn’t affect the design, yes, but it does affect what I’m willing to do</p>\n"
  },
  {
    "id": 138162,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:26:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">That just sounds like an implementation concern. I don’t think it should affect our design. If we have to we just have structs or some kinds of them fail until they can be supported.</p>\n",
    "replyID": 138158,
    "replyName": "dzaima"
  },
  {
    "id": 138161,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:26:19Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>long</code> has a ±constant width on a given OS+cpu architecture</p>\n"
  },
  {
    "id": 138160,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:24:54Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Does this actually appear in the ABI? I assumed for an actual library file a given type would have a known width.</p>\n",
    "replyID": 138155,
    "replyName": "dzaima"
  },
  {
    "id": 138159,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:24:36Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">and someone would have to write code to do that</p>\n"
  },
  {
    "id": 138158,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:23:27Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\"><code>struct {int a; int b;}</code> on SysV x86-64 gets passed in a single register, the two fields being packed together for example</p>\n"
  },
  {
    "id": 138157,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:22:45Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">structs are very weird</p>\n"
  },
  {
    "id": 138156,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:21:58Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I don’t think structs end up being that bad. You have two options: treat the whole thing as opaque and cast (maybe if you read a chunk of bytes from a file), or split up the input as a list (could have separate depth/rank options) and recurse.</p>\n"
  },
  {
    "id": 138155,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:20:07Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">that’d have to have, at the very minimum, a separate value for <code>long</code> as the width of that differs between systems (technically <code>short</code>/<code>int</code>/<code>long long</code> don’t need to have their common widths either, but that’s whatever)</p>\n",
    "replyID": 138151,
    "replyName": "Marshall Lochbaum"
  },
  {
    "id": 138154,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:17:46Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 1 is like Java JNI; model 2 is like Java JNA</p>\n"
  },
  {
    "id": 138153,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:16:33Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">the BQN side part of model 1  is very very tiny, if not non-existent, as you could map all your native functions to BQN ones with <code>bqn_makeBoundFn*</code> only</p>\n",
    "replyID": 138150,
    "replyName": "Rowan"
  },
  {
    "id": 138152,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:16:18Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I meant <code>•FFI</code> only, not sure I’d use “FFI” for the second.</p>\n",
    "replyID": 138150,
    "replyName": "Rowan"
  },
  {
    "id": 138151,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:14:42Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Deal with in what way? I think the full version of the type specification should let you specify how to translate a BQN array, pretty much like the input or output of <code>•bit._cast</code>.</p>\n",
    "replyID": 138148,
    "replyName": "dzaima"
  },
  {
    "id": 138150,
    "username": "Rowan",
    "userID": 1822,
    "date": "2022-04-07T23:13:30Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">model 1 is two things, correct?</p>\n<ul>\n<li class=\"source-line\" data-source-line=\"1\">Being able to interact with BQN from a language that speaks C (cdefs)</li>\n<li class=\"source-line\" data-source-line=\"2\">Being able to interact with a language that speaks C from BQN (•FFI)</li>\n</ul>\n"
  },
  {
    "id": 138149,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:13:16Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">(and ofc it gets complicated quickly if you have structs)</p>\n"
  },
  {
    "id": 138148,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:10:41Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">I just don’t really like model 1 needing to deal with int/long/long long/int[n]_t without actually doing that in C which actually knows what those mean</p>\n"
  },
  {
    "id": 138147,
    "username": "dzaima",
    "userID": 1178,
    "date": "2022-04-07T23:07:23Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">it’s true that passing full BQN objects could be just another “passable object” type to model 1; the two could probably be merged at some point, but that’d require both being pretty stable</p>\n"
  },
  {
    "id": 138146,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T23:00:31Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Some features for second model would also be useful for something like a UI framework that maintains its own state. You’d like to be able to automatically free something when the BQN-side references disappear.</p>\n"
  },
  {
    "id": 138145,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T22:56:17Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">dzaima’s identified two major use cases, while I’d been almost entirely interested in just the first. It’s my opinion that they can be combined in the same interface, where the second adds features to a basic model of being able to call C functions with BQN inputs and outputs.</p>\n<ul>\n<li class=\"source-line\" data-source-line=\"1\">Calling an existing C library, or writing a “pure C” library that doesn’t relate to BQN at all.</li>\n<li class=\"source-line\" data-source-line=\"2\">Writing a library to interface with BQN, which might have bidirectional inputs and outputs, or maintain references or mutable state.</li>\n</ul>\n"
  },
  {
    "id": 138144,
    "username": "Marshall Lochbaum",
    "userID": 1715,
    "date": "2022-04-07T22:51:57Z",
    "html": "<p class=\"source-line\" data-source-line=\"0\">Ooh, nice reference list.</p>\n"
  }
]